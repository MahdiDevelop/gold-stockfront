{"version":3,"file":"static/js/1027.d978253c.chunk.js","mappings":"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","sources":["pages/Items/forms/AddSell.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport Source from \"../../../Source\";\r\nimport axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\nimport Profile from \"../../../assets/icon/profile.png\";\r\nimport IdNational from \"../../../assets/icon/national_id.png\";\r\nimport Datepicker_Customer from \"../../forms/Datepicker_customer\";\r\nimport moment from \"moment-jalaali\";\r\nimport jalaali from \"jalaali-js\";\r\nimport Combo_stock from \"../../forms/Combo_Customer\";\r\nimport Combo_stockps from \"../../psbox/Combo_Customer\";\r\nimport Combo_item from \"../../forms/Combo_Customer\";\r\nimport Additem from \"./AddItem\";\r\nimport Money from \"../../Money\";\r\n// import AddCustomer from '../../assets/icon/AddCustomer.png';\r\nimport Add_customer from \"../../AddAccount\";\r\nimport Combo_Customer from \"../../forms/Combo_Customer\";\r\n// import { useMyContext } from \"../../constext/UseContext\";\r\nimport ComboBox from \"../../forms/ComboBox\";\r\nimport Trash from \"../../../assets/icon/trash.png\";\r\nimport Print from \"../../../assets/icon/print.png\";\r\nimport Add from \"../../../assets/icon/add.png\";\r\nimport jsPDF from \"jspdf\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { addCustomerToCache, getCustomers } from \"../../Redux/customerSlice\";\r\nimport { updateBelanceInCache } from \"../../Redux/belanceSlice\";\r\nimport { getMoneys, updateMoneyInCache } from \"../../Redux/moneysSlice\";\r\nimport { updateItemInCache } from \"../../Redux/itemSlice\";\r\nimport AddAddress from \"../../../assets/icon/address.png\";\r\nimport { getSettings } from \"../../Redux/settingSlice\";\r\nimport html2pdf from 'html2pdf.js';\r\nimport { FormattedMessage ,useIntl} from \"react-intl\";\r\nimport { showAlert } from \"../../../warrper\";\r\nimport { useShowAlert  } from \"../../../warrper\";\r\n\r\n// MUI components\r\nimport {\r\n  Box,\r\n  Typography,\r\n  IconButton,\r\n  TextField,\r\n  InputAdornment,\r\n  FormControlLabel,\r\n  Switch,\r\n  Button,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  TableContainer,\r\n  Paper,\r\n} from '@mui/material';\r\n\r\nimport { Plus, Trash2, X } from 'lucide-react';\r\nimport { NumericFormat } from 'react-number-format';\r\n\r\nexport default function AddSell({\r\n  AddSellModal,\r\n  close,\r\n  // settings,\r\n  records,\r\n  setRecords,\r\n  moneys,\r\n  // addAccountModal,\r\n  // setAddAccountModal,\r\n  // setcustomer,customer,\r\n  belance,\r\n  setbelance,\r\n  setAddBalanceModal,\r\n  options1,\r\n  setOptions1,\r\n}) {\r\n  const showAlert = useShowAlert(); \r\n  const dispatch = useDispatch();\r\n  // const { customers, errorc, statusc } = useSelector(\r\n  //   (state) => state.customers\r\n  // );\r\n    const { settings, errors,statuss } = useSelector((state) => state.settings);\r\n    const { sidebars } = useSelector((state) => state.sidebars);\r\n  \r\n  useEffect(() => {\r\n  //   // بررسی و بارگذاری `belances`\r\n  //   // if (!statusb && belances?.lenght ===0) {\r\n  //   //   dispatch(getBelances());\r\n  //   // }\r\n\r\n  //   // // بررسی و بارگذاری `moneys`\r\n  //   // if (!statusm && moneys?.lenght ===0) {\r\n  //   //   dispatch(getMoneys());\r\n  //   // }\r\n\r\n  //   // بررسی و بارگذاری `customers`\r\n  //   if (!statusc) {\r\n  //     dispatch(getCustomers());\r\n  //   }\r\n\r\n    if(!statuss && settings?.lenght ===0) {\r\n      dispatch(getSettings());\r\n    }\r\n  }, [dispatch, statuss]);\r\n  // const { customers, errorc } = useSelector((state) => state.customers);\r\n  const { items, errori } = useSelector((state) => state.items);\r\n      const { formatMessage } = useIntl();\r\n  const [selectedDay, setSelectedDay] = useState(moment());\r\n  // const [selectedDay1, setSelectedDay1] = useState(moment());\r\n  const [selectedOption, setSelectedOption] = useState();\r\n  const [selectedOption1, setSelectedOption1] = useState();\r\n  const [EndDate, setEndDate] = useState(moment());\r\n  const [account, setaccount] = useState(false);\r\n  const [update, setupdate] = useState({ id: 0, belance: 0 });\r\n  const [selectedOptionAccount, setSelectedOptionAccount] = useState([]);\r\n  const [ExestQty, setExestQty] = useState(0);\r\n  const [AddItem, setAddItem] = useState({\r\n    item_id: \"\",\r\n    qty: null,\r\n    weight: null,\r\n    dateInsert: new Date().toISOString(),\r\n    rate: null,\r\n    user_id: localStorage.getItem(\"userTokenid\"),\r\n    purchase_price: null,\r\n    description: \"\",\r\n    sell_price: null,\r\n    expiry_date: new Date().toISOString(),\r\n    accounts_id: \"\",\r\n    money: \"\",\r\n    stock: { name: \"\" },\r\n    e_id: 1,\r\n  });\r\n\r\n  const [shopingcart, setshopingcart] = useState([]);\r\n  const [TotalAmount, setTotalAmount] = useState(0);\r\n\r\n  const [primari, setprimari] = useState(0);\r\n\r\n  const algorithm = (e) => {\r\n    if (e) {\r\n      setAddItem({\r\n        ...AddItem,\r\n        accounts_id: e.id,\r\n      });\r\n    }\r\n  };\r\n  const algorithm1 = (e) => {\r\n    setSelectedOption1(e);\r\n    if (e) {\r\n      setAddItem({\r\n        ...AddItem,\r\n        item_id: e.id,\r\n        stock: e,\r\n      });\r\n    }\r\n  };\r\n  const handle_date = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n\r\n      // const date = new Date(jalaliDate.year, jalaliDate.month - 1, jalaliDate.day);\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      // setIsoDate(isoString);\r\n      setAddItem({\r\n        ...AddItem,\r\n        dateInsert: isoString,\r\n      });\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n  // console.log(shopingcart.length);\r\n  // const generateInvoicePDF = () => {\r\n  //   let Customer=selectedOption;\r\n  //   if (!Customer) {\r\n  //     alert('لطفا یک مشتری را انتخاب کنید');\r\n  //     return;\r\n  //   }\r\n\r\n  //   const doc = new jsPDF();\r\n\r\n  //   // تنظیم رنگ پس‌زمینه برای هدر\r\n  //   doc.setFillColor(255, 165, 0); // رنگ نارنجی\r\n  //   doc.rect(10, 10, 190, 20, 'F'); // مستطیل برای عنوان\r\n\r\n  //   // افزودن عنوان\r\n  //   doc.setFontSize(18);\r\n  //   doc.setTextColor(255, 255, 255); // سفید\r\n  //   doc.text('Invoice Report', 105, 25, null, null, 'center');\r\n\r\n  //   // تنظیم اطلاعات شرکت\r\n  //   doc.setFontSize(12);\r\n  //   doc.setTextColor(0, 0, 0); // مشکی\r\n  //   // doc.text(`Company Name: ${settings[0].company_name}`, 10, 40);\r\n  //   // doc.text(`Address: ${settings[0].address}`, 10, 50);\r\n  //   // doc.text(`Phone: ${settings[0].phone}`, 10, 60);\r\n  //   // doc.text(`Email: ${settings[0].email}`, 10, 70);\r\n  //   // doc.text(`Customer: ${Customer.name}`, 10, 80);\r\n\r\n  //   // اضافه کردن لوگوی شرکت (اختیاری)\r\n  //   // if (settings[0].company_pic) {\r\n  //   //   const logoURL = Source.getAddress() + \"/api/getImage/\" + settings[0].company_pic.split('/').pop();\r\n  //   //   doc.addImage(logoURL, 'JPEG', 150, 34, 50, 50);\r\n  //   // } else {\r\n  //   //   doc.text('No Logo Available', 150, 34);\r\n  //   // }\r\n\r\n  //   // اطلاعات جدول\r\n  //   const tableHeaders = ['No', 'Item', 'Price', 'Quantity', 'Total'];\r\n  //   const tableData = [];\r\n  \r\n  //   let totalInvoiceAmount = 0;\r\n  //   shopingcart.forEach((item, index) => {\r\n  //     const total = item.price * item.quantity;\r\n  //     totalInvoiceAmount += total;\r\n  \r\n  //     tableData.push([\r\n    //       index + 1,\r\n  //       item.name,\r\n  //       item.price,\r\n  //       item.quantity,\r\n  //       total,\r\n  //     ]);\r\n  //   });\r\n  \r\n  //   // اضافه کردن جدول\r\n  //   doc.autoTable({\r\n  //     head: [tableHeaders],\r\n  //     body: tableData,\r\n  //     startY: 90,\r\n  //     styles: {\r\n  //       fontSize: 10,\r\n  //       cellPadding: 3,\r\n  //     },\r\n  //     headStyles: {\r\n    //       fillColor: [255, 140, 0], // نارنجی تیره\r\n  //       textColor: [255, 255, 255], // سفید\r\n  //     },\r\n  //     foot: [[\r\n  //       '', '', '', 'Total:', totalInvoiceAmount,\r\n  //     ]],\r\n  //     footStyles: {\r\n  //       fillColor: [255, 223, 186], // نارنجی کم‌رنگ\r\n  //       fontStyle: 'bold',\r\n  //     },\r\n  //   });\r\n\r\n  //   // ذخیره PDF\r\n  //   doc.save('invoice_report.pdf');\r\n  // };\r\n\r\n  // const generateInvoicePDF=()=> {\r\n    //   // ایجاد یک شیء jsPDF\r\n  //   const pdf = new jsPDF();\r\n\r\n  //   // اضافه کردن محتوای متنی\r\n  //   pdf.setFont(\"Arial\", \"normal\");\r\n  //   pdf.setFontSize(14); // تنظیم سایز فونت\r\n  //   pdf.text(\"گزارش فروش\", 10, 10); // اضافه کردن متن عنوان\r\n  //   pdf.text(\"این یک فایل PDF نمونه است که بدون استفاده از HTML ساخته شده است.\", 10, 20);\r\n\r\n  //   // اضافه کردن جدول داده‌ها\r\n  //   const headers = [[\"کالا\", \"تعداد\", \"قیمت\"]];\r\n  //   const data = [\r\n  //     [\"محصول A\", \"10\", \"100000\"],\r\n  //     [\"محصول B\", \"5\", \"50000\"],\r\n  //     [\"محصول C\", \"20\", \"200000\"],\r\n  //   ];\r\n\r\n  //   let y = 40; // محل شروع جدول در محور Y\r\n  //   headers.forEach((header) => {\r\n  //     pdf.text(header, 10, y);\r\n  //     y += 10;\r\n  //   });\r\n\r\n  //   data.forEach((row) => {\r\n  //     pdf.text(row.join(\" | \"), 10, y);\r\n  //     y += 10;\r\n  //   });\r\n\r\n  //   // اضافه کردن شماره صفحه در پایین\r\n  //   pdf.setFontSize(10);\r\n  //   pdf.text(`صفحه 1`, 100, 290);\r\n\r\n  //   // ذخیره کردن فایل PDF\r\n  //   pdf.save(\"Add_Sell_Report.pdf\");\r\n  // }\r\n  const date = (d) => {\r\n    const date = new Date(d);\r\n    let formattedDate = `${date.getFullYear()}-${String(\r\n      date.getMonth() + 1\r\n    ).padStart(2, \"0\")}-${String(date.getDate()).padStart(2, \"0\")}`;\r\n    const hours = date.getHours();\r\n    const minutes = date.getMinutes();\r\n    const ampm = hours >= 12 ? \"pm\" : \"am\";\r\n    let aa = ampm;\r\n    const formattedHours = hours % 12 || 12;\r\n    const formattedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    if (localStorage.getItem(\"date\") === \"Persian\") {\r\n      moment.locale(\"fa\"); // تنظیم لوکال به فارسی\r\n      aa = hours >= 12 ? \"ب.ظ\" : \"ق.ظ\";\r\n      formattedDate = moment(d).format(\"jYYYY-jMM-jDD\");\r\n    } else {\r\n      moment.locale(\"en\"); // تنظیم لوکال به انگلیسی\r\n    }\r\n\r\n    return `${formattedDate} ${formattedHours}:${formattedMinutes} ${aa}`;\r\n  };\r\n\r\n  const capitalizeWords = (text) => {\r\n    return text\r\n      .toLowerCase() // همه حروف را کوچک کنید\r\n      .split(\" \") // متن را به آرایه‌ای از کلمات تقسیم کنید\r\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1)) // حروف اول هر کلمه را بزرگ کنید\r\n      .join(\" \"); // کلمات را به هم وصل کنید\r\n  };\r\n  const generateInvoicePDF = (id) => {\r\n    // Function to format date (with Persian date support)\r\n    const dateObj = new Date(selectedDay);\r\n    let formattedDate = `${dateObj.getFullYear()}-${String(\r\n        dateObj.getMonth() + 1\r\n    ).padStart(2, \"0\")}-${String(dateObj.getDate()).padStart(2, \"0\")}`;\r\n    const hours = dateObj.getHours();\r\n    const minutes = dateObj.getMinutes();\r\n    const ampm = hours >= 12 ? \"pm\" : \"am\";\r\n    const formattedHours = hours % 12 || 12;\r\n    const formattedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    let aa = ampm;\r\n\r\n    if (settings[0].date === \"Persian\") {\r\n        moment.locale(\"fa\");\r\n        formattedDate = moment(selectedDay).format(\"jYYYY/jMM/jDD\");\r\n    } else {\r\n        moment.locale(\"en\");\r\n    }\r\n    formattedDate = `${formattedDate} ${formattedHours}:${formattedMinutes} ${aa}`;\r\n\r\n    // Get the company image URL\r\n    const imageUrl = settings[0]?.company_pic;\r\n    let imageSrc = \"\";\r\n    if (imageUrl) {\r\n        const fileName = imageUrl.split(\"/\").pop();\r\n        imageSrc = Source.getAddress() + \"/api/getImage/\" + fileName;\r\n    }\r\n\r\n    // Generate the HTML content\r\n    const invoiceHTML = `\r\n    <html>\r\n        <head>\r\n            <title>Invoice</title>\r\n            <style>\r\n                body {\r\n                    font-family: Helvetica, sans-serif;\r\n                    font-size: 12px;\r\n                }\r\n\r\n                .invoice-container {\r\n                    width: 210mm;\r\n                    height: auto;\r\n                    padding: 10mm;\r\n                    box-sizing: border-box;\r\n                    background: #fff;\r\n                }\r\n\r\n                .header {\r\n                    text-align: center;\r\n                    margin-bottom: 20px;\r\n                }\r\n\r\n                .invoice-details {\r\n                    margin-bottom: 15px;\r\n                }\r\n\r\n                table {\r\n                    width: 100%;\r\n                    border-collapse: collapse;\r\n                    border: 1px solid #000;\r\n                }\r\n\r\n                th,\r\n                td {\r\n                    border: 1px solid #000;\r\n                    padding: 5px;\r\n                    text-align: left;\r\n                }\r\n\r\n                th {\r\n                    background-color: rgb(11, 105, 255);\r\n                    color: #fff;\r\n                    font-size: 12px;\r\n                }\r\n\r\n                td {\r\n                    font-size: 12px;\r\n                    color: #000;\r\n                }\r\n\r\n                .amount-details {\r\n                    text-align: right;\r\n                    margin-bottom: 20px;\r\n                }\r\n\r\n                .footer {\r\n                    text-align: center;\r\n                }\r\n\r\n                .logo {\r\n                    position: absolute;\r\n                    top: 10px;\r\n                    right: 10px;\r\n                    width: 30mm;\r\n                }\r\n\r\n                .even-row {\r\n                    background-color: #f5f5f5;\r\n                }\r\n\r\n                .odd-row {\r\n                    background-color: #fff;\r\n                }\r\n            </style>\r\n        </head>\r\n\r\n        <body>\r\n            <div class=\"invoice-container\">\r\n                <div class=\"header\">\r\n                    <h1 style=\"font-size: 26px; font-weight: bold; color: rgb(11,105,255); margin: 0;\">Invoice</h1>\r\n                    <h2 style=\"font-size: 14px; margin: 5px 0; color: #000;\">${settings[0].company_name}</h2>\r\n                    </div>\r\n                    \r\n                    <div class=\"invoice-details\">\r\n                    <p style=\"font-size: 12px; margin: 0;\">Customer Name: ${selectedOption ? capitalizeWords(selectedOption.name) : \"N/A\"}</p>\r\n                    <p style=\"font-size: 14px; color: rgb(11,105,255); margin: 0;\">Invoice Number: ${id}</p>\r\n                    <p style=\"font-size: 12px; margin: 0;\">Date: ${formattedDate}</p>\r\n                </div>\r\n\r\n                <hr style=\"border: 0; border-top: 1px solid #000; margin-bottom: 15px;\">\r\n\r\n                <div style=\"margin-bottom: 20px;\">\r\n                    <table style=\"width: 100%; border-collapse: collapse;\" border=\"1\" cellspacing=\"0\" cellpadding=\"5\">\r\n                        <thead style=\"background-color: rgb(11,105,255); font-size: 12px;\">\r\n                            <tr>\r\n                                <th>No</th>\r\n                                <th>Name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Price</th>\r\n                                <th>Total</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody style=\"font-size: 12px; color: #000;\">\r\n                            ${shopingcart\r\n                                .map(\r\n                                    (row, index) => `\r\n                                    <tr class=\"${index % 2 === 0 ? 'odd-row' : 'even-row'}\">\r\n                                        <td>${index}</td>\r\n                                        <td>${row.stock.name}</td>\r\n                                        <td>${row.qty}</td>\r\n                                        <td>${row.sell_price} ${selectedOptionmoney ? selectedOptionmoney.name : \"N/A\"}</td>\r\n                                        <td>${row.sell_price * row.qty} ${selectedOptionmoney ? selectedOptionmoney.name : \"N/A\"}</td>\r\n                                    </tr>\r\n                                `\r\n                                )\r\n                                .join(\"\")}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <div class=\"amount-details\">\r\n                    <p style=\"margin: 0;\">Total Amount: ${TotalAmount} ${selectedOptionmoney ? selectedOptionmoney.name : \"N/A\"}</p>\r\n                    <p style=\"margin: 0;\">Paid Amount: ${PaidAmount ? PaidAmount : \"0.00\"} ${selectedOptionmoney ? selectedOptionmoney.name : \"N/A\"}</p>\r\n                    <p style=\"margin: 0;\">Balance: ${update.belance} ${selectedOptionmoney ? selectedOptionmoney.name : \"N/A\"}</p>\r\n                </div>\r\n\r\n                <hr style=\"border: 0; border-top: 1px solid #000; margin-bottom: 15px;\">\r\n\r\n                <div class=\"footer\">\r\n                    <p style=\"margin: 0;\">Address: ${settings[0].address}</p>\r\n                    <p style=\"margin: 0;\">Phone: ${settings[0].phone}</p>\r\n                    <p style=\"margin: 0;\">Email: ${settings[0].email}</p>\r\n                </div>\r\n                 ${imageSrc ? `<img class=\"logo\"  src=\"${imageSrc}\" alt=\"Company Logo\"/>` : ''}\r\n            </div>\r\n        </body>\r\n    </html>\r\n`;\r\n\r\n\r\n\r\n    // Open a new tab/window\r\n    const printWindow = window.open('', '_blank');\r\n    if (printWindow) {\r\n        printWindow.document.open();\r\n        printWindow.document.write(invoiceHTML);\r\n        printWindow.document.close();\r\n\r\n        // Wait for content to load in the new window\r\n        printWindow.onload = () => {\r\n            printWindow.focus(); // Focus on the new window\r\n            printWindow.print(); // Open the print dialog\r\n            printWindow.close(); // Close the new window\r\n        };\r\n    } else {\r\n        alert('Please allow pop-ups for this website to print the invoice.');\r\n    }\r\n};\r\n\r\n  \r\n  const Sumbit = (flag) => {\r\n    // console.log(add);\r\n    let BillId = 0;\r\n    // console.log(selectedOption||\r\n    //   shopingcart.length<=0);\r\n    if (!Exesting && update.belance != 0) {\r\n      showAlert({\r\n        position: \"top-end\",\r\n        icon: \"error\",\r\n        title: <FormattedMessage id=\"You don't have enough belance!\" />,\r\n        showConfirmButton: false,\r\n        timer: 1000,\r\n      });\r\n      return;\r\n    }\r\n    if (!selectedOptionmoney || !selectedOption || shopingcart.length <= 0) {\r\n      showAlert({\r\n        position: \"top-end\",\r\n        icon: \"error\",\r\n        title: <FormattedMessage id=\"You must fill the item input!\" />,\r\n        showConfirmButton: false,\r\n        timer: 1000,\r\n      });\r\n      return;\r\n    }\r\n    let arr = [];\r\n    shopingcart.forEach((key) => {\r\n      arr.push({\r\n        item_id: key.item_id,\r\n        qty: key.qty,\r\n        weight: key.weight,\r\n        dateInsert: key.dateInsert,\r\n        rate: key.rate,\r\n        user_id: key.user_id,\r\n        sell_price: key.sell_price,\r\n        description: key.description,\r\n        expiry_date: key.expiry_date,\r\n        bill_id: \"\",\r\n        accounts_id: key.accounts_id,\r\n      });\r\n    });\r\n\r\n    let add = { arr: arr };\r\n    axios\r\n      .post(Source.getAddress() + \"/api/sell\", add, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n        },\r\n        params: {\r\n          Exesting: Exesting ? \"ok\" : \"no\",\r\n          money: selectedOptionmoney.id || 0,\r\n          accounts_id: selectedOption.id,\r\n          PaidAmount: PaidAmount ? PaidAmount : 0,\r\n          TotalAmount: TotalAmount,\r\n          CustomerName: selectedOption.name,\r\n          DateInsert: selectedDay,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        if (flag) {\r\n          generateInvoicePDF(res.data.bill.id);\r\n        }\r\n        res.data.bill[\"money\"] = selectedOptionmoney;\r\n        if(Exesting){\r\n          res.data.bill[\"accounts\"] = { account: selectedOption };\r\n        }\r\n        BillId = res.data.bill.id;\r\n        let add = {\r\n          sells: shopingcart,\r\n          bill: res.data.bill,\r\n          money: selectedOptionmoney,\r\n        };\r\n        setRecords([add, ...records]);\r\n        setSelectedDay(moment());\r\n        setSelectedOption({ name: \"\" });\r\n        setSelectedOption1({ name: \"\", type: { measuring: \"\" } });\r\n        setEndDate(moment());\r\n        setprimari(0);\r\n        setAddItem({\r\n          stocks_id: 0,\r\n          qty: 0,\r\n          weight: 0,\r\n          dateInsert: new Date().toISOString(),\r\n          rate: 0,\r\n          user_id: localStorage.getItem(\"userTokenid\"),\r\n          purchase_price: 0,\r\n          description: \"Description\",\r\n          sell_price: 0,\r\n          expiry_date: new Date().toISOString(),\r\n          accounts_id: \"\",\r\n        });\r\n        setSearchQuery(\"\");\r\n        setSearchQuery1(\"\");\r\n        setupdate({ id: 0, belance: 0 });\r\n        setSelectedOptionmoney({ name: \"\" });\r\n        setaccount(false);\r\n        setshopingcart([]);\r\n        setSelectedDay(moment());\r\n        setSelectedOption();\r\n        setSelectedOptionmoney(null);\r\n        setupdate({ id: 0, belance: 0 });\r\n        setTotalAmount(0);\r\n        setPaidAmount(0);\r\n        setExestQty(0);\r\n        showAlert({\r\n          position: \"top-end\",\r\n          icon: \"success\",\r\n          // title: \"Stock has been created!\",\r\n                                            title: <FormattedMessage id=\"Your record has been added!\" />,\r\n          showConfirmButton: false,\r\n          timer: 1000,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n        showAlert({\r\n          position: \"top-end\",\r\n          icon: \"error\",\r\n          // title: \"Sosmething went wrong!\",\r\n                            title:  <FormattedMessage id=\"You must enter the customer name!\" />,\r\n          showConfirmButton: false,\r\n          timer: 1000,\r\n        });\r\n      });\r\n  };\r\n  const AddAccountModal = (name) => {\r\n    let add = { name: name, user_id: localStorage.getItem(\"userTokenid\") };\r\n    axios\r\n      .post(Source.getAddress() + \"/api/customers\", add, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setSelectedOption(res.data.customer);\r\n        setOptions([res.data.customer, ...options]);\r\n        showAlert({\r\n          position: \"top-end\",\r\n          icon: \"success\",\r\n          title:  <FormattedMessage id=\"Customer has been created!\" />,\r\n          showConfirmButton: false,\r\n          timer: 1000,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        showAlert({\r\n          position: \"top-end\",\r\n          icon: \"error\",\r\n          title:  <FormattedMessage id=\"Sosmething went wrong!\" />,\r\n          showConfirmButton: false,\r\n          timer: 1000,\r\n        });\r\n      });\r\n  };\r\n  const AddtoTable = () => {\r\n    if (!AddItem.qty) {\r\n      showAlert({\r\n        position: \"top-end\",\r\n        icon: \"error\",\r\n        title:  <FormattedMessage id=\"Select an item!\" />,\r\n        showConfirmButton: false,\r\n        timer: 1000,\r\n      });\r\n      return;\r\n    }\r\n    const qty = AddItem.qty ? parseInt(AddItem.qty) : 0;\r\n    const sellPrice = AddItem.sell_price ? parseFloat(AddItem.sell_price) : 0;\r\n    const weight= AddItem.weight;\r\n    if (parseInt(selectedOption1.qty) - qty < 0) {\r\n      showAlert({\r\n        position: \"top-end\",\r\n        icon: \"error\",\r\n        title:  <FormattedMessage id=\"have not enuagh item!\" />,\r\n        // title: \"have not enuagh item!\",\r\n        showConfirmButton: false,\r\n        timer: 1000,\r\n      });\r\n      return;\r\n    }\r\n    if (!qty || !sellPrice || !selectedOption1||weight) {\r\n      showAlert({\r\n        position: \"top-end\",\r\n        icon: \"error\",\r\n        // title: \"Please select an item and fill the quantity and price!\",\r\n                          title:  <FormattedMessage id=\"Please select an item and fill the quantity and price!\" />,\r\n        \r\n        showConfirmButton: false,\r\n        timer: 1000,\r\n      });\r\n      return;\r\n    }\r\n\r\n    // اطمینان از مقدار مثبت برای موجودی\r\n    if (qty <= 0 || sellPrice <= 0) {\r\n      showAlert({\r\n        position: \"top-end\",\r\n        icon: \"error\",\r\n        // title: \"Quantity and price must be positive values!\",\r\n        title:  <FormattedMessage id=\"Quantity and price must be positive values!\" />,\r\n        showConfirmButton: false,\r\n        timer: 1000,\r\n      });\r\n      return;\r\n    }\r\n\r\n    // ایجاد نسخه کپی از AddItem و selectedOption1\r\n    const addto = { ...AddItem, item: { ...selectedOption1 } };\r\n    addto.item.qty = selectedOption1.qty\r\n      ? qty - parseInt(selectedOption1.qty)\r\n      : qty;\r\n        setshopingcart((prev) => [...prev, addto]);\r\n    // افزود\r\n    // به‌روزرسانی مقادیر کل\r\n    setPaidAmount((prev) => prev + qty * sellPrice *weight);\r\n    setTotalAmount((prev) => prev + qty * sellPrice*weight);\r\n\r\n    // بازنشانی مقدار AddItem\r\n    setAddItem({\r\n      stocks_id: \"\",\r\n      qty: \"\",\r\n      weight: null,\r\n      dateInsert: new Date().toISOString(),\r\n      rate: null,\r\n      user_id: localStorage.getItem(\"userTokenid\"),\r\n      purchase_price: \"\",\r\n      description: \"\",\r\n      sell_price: '',\r\n      expiry_date: new Date().toISOString(),\r\n      accounts_id: \"\",\r\n      money: \"\",\r\n      stock: { name: \"\" },\r\n      e_id: AddItem.e_id + 1,\r\n    });\r\n    // بازنشانی selectedOption1\r\n    setSelectedOption1(null);\r\n  };\r\n  const handleItem = (e) => {\r\n    setAddItem({\r\n      ...AddItem,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const [options, setOptions] = useState();\r\n  // const [options1, setOptions1] = useState(items);\r\n\r\n  const handleSearch = async (query) => {\r\n    if (!Exesting) {\r\n      // if (query.length < 3) {\r\n      //   // برای جلوگیری از ارسال درخواست بیش از حد، درخواست فقط اگر ورودی بیشتر از 2 حرف باشد ارسال شود\r\n      //   setOptions([]);\r\n      //   return;\r\n      // }\r\n      // try {\r\n      //   const response = await axios.get(\r\n      //     `${Source.getAddress()}/api/customers`,\r\n      //     {\r\n      //       headers: {\r\n      //         Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n      //       },\r\n      //       params: { query: query }, // ارسال پارامتر جستجو به سرور\r\n      //     }\r\n      //   );\r\n      //   const data = response.data;\r\n      //   // تبدیل داده‌ها به فرمت مناسب برای react-select\r\n      //   let formattedOptions = data;\r\n      //   setOptions(formattedOptions);\r\n      //   if (formattedOptions && formattedOptions.length() === 0) {\r\n      if (query) {\r\n        setAddItem({\r\n          ...AddItem,\r\n          temp_customer: query,\r\n        });\r\n        setSelectedOption({ id: 0, name: query });\r\n      }\r\n      //   }\r\n      // } catch (error) {\r\n      //   console.error(\"Error fetching data:\", error);\r\n      // } finally {\r\n      // }\r\n    }\r\n  };\r\n\r\n  const handleSearch1 = async (query) => {\r\n    // if (query.length < 1) {\r\n    //   // برای جلوگیری از ارسال درخواست بیش از حد، درخواست فقط اگر ورودی بیشتر از 2 حرف باشد ارسال شود\r\n    //   setOptions1([]);\r\n    //   return;\r\n    // }\r\n    // try {\r\n    //   const response = await axios.get(`${Source.getAddress()}/api/item`, {\r\n    //     headers: {\r\n    //       Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n    //     },\r\n    //     params: {\r\n    //       query: query,\r\n    //       stock: true,\r\n    //     }, // ارسال پارامتر جستجو به سرور\r\n    //   });\r\n    //   const data = response.data;\r\n    //   // console.log(data);\r\n    //   // تبدیل داده‌ها به فرمت مناسب برای react-select\r\n    //   const formattedOptions = data;\r\n    //   //    data.map((customer) => ({\r\n    //   //     id: customer.id,\r\n    //   //     name: customer.name,\r\n    //   //     customer\r\n    //   //   }));\r\n    //   setOptions1(formattedOptions);\r\n    // } catch (error) {\r\n    //   console.error(\"Error fetching data:\", error);\r\n    // } finally {\r\n    // }\r\n  };\r\n  const handleInputChange = (newValue) => {\r\n    setSearchQuery(newValue); // بروزرسانی مقدار ورودی جستجو\r\n    handleSearch(newValue); // ارسال درخواست جستجو به سرور\r\n  };\r\n  const handleInputChange1 = (newValue) => {\r\n    setSearchQuery1(newValue); // بروزرسانی مقدار ورودی جستجو\r\n    handleSearch1(newValue); // ارسال درخواست جستجو به سرور\r\n  };\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [searchQuery1, setSearchQuery1] = useState(\"\");\r\n\r\n  const [selectedOptionmoney, setSelectedOptionmoney] = useState({ name: \"\" });\r\n  const algorithmmoney = (e) => {\r\n    if (e) {\r\n      setAddItem({\r\n        ...AddItem,\r\n        money: e.id,\r\n      });\r\n    }\r\n  };\r\n\r\n  const Deleteshopingcart = (e) => {\r\n    setupdate({\r\n      ...update,\r\n      belance:update.belance - e.qty * e.sell_price *e.weight\r\n    })\r\n    setTotalAmount((prev) => prev - e.qty * e.sell_price*e.weight);\r\n    setPaidAmount((prev) => prev - e.qty * e.sell_price*e.weight);\r\n    setshopingcart((prev) => prev.filter((pre) => pre.e_id !== e.e_id));\r\n  };\r\n  const buttonRef = useRef(null);\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      e.preventDefault();\r\n      if (buttonRef.current && AddSellModal) {\r\n        buttonRef.current.click();\r\n      }\r\n    }\r\n  };\r\n  const [PaidAmount, setPaidAmount] = useState(0);\r\n  const handlepaid = (e) => {\r\n    setPaidAmount(e.target.value);\r\n  };\r\n  // console.log(parseInt(AddItem.qty) + parseInt(ExestQty));\r\n  useEffect(() => {\r\n    if (!PaidAmount) {\r\n      setupdate((prevState) => ({\r\n        ...prevState,\r\n        belance: -TotalAmount,\r\n      }));\r\n    } else {\r\n      setupdate((prevState) => ({\r\n        ...prevState,\r\n        belance: PaidAmount - TotalAmount || 0,\r\n      }));\r\n    }\r\n\r\n    // }\r\n  }, [PaidAmount, TotalAmount, shopingcart]);\r\n  const [Exesting, setExesting] = useState(false);\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(`${Source.getAddress()}/api/customers`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n          },\r\n          params: { query:searchQuery ,do:'ok'}, // ارسال پارامتر جستجو به سرور\r\n        });\r\n        const data = response.data;\r\n        setOptions(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n  \r\n    if(searchQuery){\r\n      if (!searchQuery || searchQuery?.length < 3) {\r\n        setOptions([]);\r\n        return;\r\n      }else{\r\n    if (Exesting) {\r\n        fetchData();}\r\n      }\r\n    }\r\n  }, [searchQuery]); // اضافه کردن searchQuery به وابستگی‌های useEffect\r\n  return (<Box\r\n      dir={localStorage.getItem(\"language\") === \"en\" ? \"ltr\" : \"rtl\"}\r\n      sx={{\r\n        width: \"100%\",\r\n        maxWidth: 1200, // حداکثر عرض استاندارد برای فرم\r\n        overflowX: \"auto\",\r\n        overflowY: \"auto\",\r\n        height: \"75vh\",\r\n        bgcolor: \"#f8f9fa\",\r\n        p: 2,\r\n        borderRadius: 2,\r\n        mx: \"auto\", // مرکز کردن فرم\r\n      }}\r\n      className={`popup transition ${account && \"sellpurchase\"} ${  AddSellModal ? \"show\" : \"\"}`}\r\n    >\r\n      {/* Header */}\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mt={2} mb={2}>\r\n        <Typography\r\n          variant=\"h6\"\r\n          align=\"center\"\r\n          sx={{ bgcolor: \"info.main\", color: \"#fff\", p: 1, borderRadius: 1, flexGrow: 1, fontSize: \"1.1rem\" }}\r\n        >\r\n          <FormattedMessage id=\"Add Sell\" />\r\n        </Typography>\r\n        <IconButton onClick={close} aria-label=\"Close\" sx={{ ml: 2 }}>\r\n          <X size={24} />\r\n        </IconButton>\r\n      </Box>\r\n\r\n      {/* Customer Info Section */}\r\n      <Box boxShadow={2} p={2} borderRadius={2} mb={3}>\r\n        <Typography variant=\"subtitle1\" fontWeight=\"bold\" mb={2}>\r\n          <FormattedMessage id=\"Customer Info\" />\r\n        </Typography>\r\n        <Box\r\n          display=\"flex\"\r\n          flexDirection={{ xs: \"column\", md: \"row\" }}\r\n          gap={3}\r\n          alignItems=\"center\"\r\n          flexWrap=\"wrap\"\r\n        >\r\n          {/* Exesting Switch */}\r\n          <FormControlLabel\r\n            control={<Switch checked={Exesting} onChange={(e) => setExesting(e.target.checked)} />}\r\n            label={<FormattedMessage id=\"Exesting\" />}\r\n            sx={{ minWidth: 120 }}\r\n          />\r\n\r\n          {/* Customer Name Dropdown */}\r\n          <Box sx={{ flexGrow: 1, minWidth: 200 }}>\r\n            <Typography component=\"label\" fontWeight=\"bold\" fontSize=\"0.9rem\" mb={1} display=\"block\">\r\n              <FormattedMessage id=\"Customer Name\" />\r\n            </Typography>\r\n            <Combo_stock\r\n              name={<FormattedMessage id=\"Add Customer\" />}\r\n              setAddAccountModal={AddAccountModal}\r\n              type={Exesting}\r\n              searchQuery={searchQuery}\r\n              handleInputChange={handleInputChange}\r\n              setSelectedOption={setSelectedOption}\r\n              selectedOption={selectedOption}\r\n              options={options}\r\n              Onsearch={algorithm}\r\n              compactMode={true}\r\n            />\r\n          </Box>\r\n\r\n          {/* Currency Dropdown */}\r\n          <Box sx={{ flexGrow: 1, minWidth: 180 }}>\r\n            <Typography component=\"label\" fontWeight=\"bold\" fontSize=\"0.9rem\" mb={1} display=\"block\">\r\n              <FormattedMessage id=\"Currency\" />\r\n            </Typography>\r\n            <Combo_Customer\r\n              isEditable={account}\r\n              setSelectedOption={setSelectedOptionmoney}\r\n              selectedOption={selectedOptionmoney}\r\n              options={moneys}\r\n              Onsearch={algorithmmoney}\r\n              compactMode={true}\r\n            />\r\n          </Box>\r\n          {/* Datepicker */}\r\n          <Box sx={{ minWidth: 180 }}>\r\n            <Datepicker_Customer\r\n              default_value={EndDate}\r\n              handle_date={handle_date}\r\n              lebal={<FormattedMessage id=\"Date\" />}\r\n              setSelectedDay={setSelectedDay}\r\n              selectedDay={selectedDay}\r\n              compactMode={true}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n      {/* Item Info Section */}\r\n  <Box\r\n  display=\"flex\"\r\n  flexDirection={{ xs: \"column\", md: \"row\" }}\r\n  gap={2}\r\n  alignItems=\"flex-end\"\r\n  flexWrap=\"wrap\"\r\n  sx={{\r\n    p: 2,\r\n    backgroundColor: 'background.paper',\r\n    borderRadius: 2,\r\n    boxShadow: 1\r\n  }}\r\n>\r\n  {/* Item Name */}\r\n  <Box sx={{ minWidth: 240, flexGrow: 1 }}>\r\n    <Typography variant=\"subtitle2\" fontWeight=\"bold\" gutterBottom>\r\n      <FormattedMessage id=\"Item Name\" />\r\n    </Typography>\r\n    <Combo_stockps\r\n      searchQuery={searchQuery1}\r\n      setSearchQuery={setSearchQuery1}\r\n      handleInputChange={handleInputChange1}\r\n      handleSearch={handleSearch1}\r\n      setSelectedOption={algorithm1}\r\n      selectedOption={selectedOption1}\r\n      options={options1}\r\n      compactMode={true}\r\n      sx={{\r\n        '& .MuiOutlinedInput-root': {\r\n          height: 40\r\n        }\r\n      }}\r\n    />\r\n  </Box>\r\n\r\n  {/* Quantity */}\r\n  <Box sx={{ width: 120 }}>\r\n    <NumericFormat\r\n      onKeyDown={handleKeyDown}\r\n      onValueChange={(values) => {\r\n        handleItem({ target: { name: \"qty\", value: values.value } });\r\n      }}\r\n      value={AddItem.qty}\r\n      customInput={TextField}\r\n      label={<FormattedMessage id=\"Quantity\" />}\r\n      size=\"small\"\r\n      fullWidth\r\n      thousandSeparator\r\n      allowNegative={false}\r\n      decimalScale={0}\r\n      InputProps={{\r\n        sx: { height: 40 }\r\n      }}\r\n    />\r\n  </Box>\r\n\r\n  {/* Weight (Gold only) */}\r\n  {sidebars[0].type === \"gold\" && (\r\n    <Box sx={{ width: 160 }}>\r\n      <NumericFormat\r\n        value={AddItem.weight}\r\n        thousandSeparator=\",\"\r\n        decimalSeparator=\".\"\r\n        decimalScale={3}\r\n        name=\"weight\"\r\n        onValueChange={(values) => {\r\n          handleItem({ target: { name: \"weight\", value: values.value } });\r\n        }}\r\n        customInput={TextField}\r\n        label={<FormattedMessage id=\"Weight\" />}\r\n        size=\"small\"\r\n        fullWidth\r\n        allowNegative={false}\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\" sx={{ color: \"text.secondary\" }}>\r\n              Gram\r\n            </InputAdornment>\r\n          ),\r\n          sx: { height: 40 }\r\n        }}\r\n      />\r\n    </Box>\r\n  )}\r\n\r\n  {/* Purchase Price */}\r\n  <Box sx={{ width: 140 }}>\r\n    <NumericFormat\r\n      onKeyDown={handleKeyDown}\r\n      onValueChange={(values) => {\r\n        handleItem({ target: { name: \"sell_price\", value: values.value } });\r\n      }}\r\n      value={AddItem.sell_price}\r\n      customInput={TextField}\r\n      label={<FormattedMessage id=\"Sell Price\" />}\r\n      size=\"small\"\r\n      fullWidth\r\n      thousandSeparator\r\n      decimalScale={2}\r\n      allowNegative={false}\r\n      InputProps={{\r\n        startAdornment: (\r\n          <InputAdornment position=\"start\" sx={{ color: \"text.secondary\" }}>\r\n            $\r\n          </InputAdornment>\r\n        ),\r\n        sx: { height: 40 }\r\n      }}\r\n    />\r\n  </Box>\r\n\r\n  {/* Total Amount */}\r\n  <Box sx={{ width: 160 }}>\r\n    <NumericFormat\r\n      value={AddItem.qty * AddItem.sell_price * (AddItem.weight || 1)}\r\n      customInput={TextField}\r\n      label={<FormattedMessage id=\"Total Amount\" />}\r\n      size=\"small\"\r\n      fullWidth\r\n      thousandSeparator\r\n      decimalScale={2}\r\n      InputProps={{ \r\n        readOnly: true,\r\n        startAdornment: (\r\n          <InputAdornment position=\"start\" sx={{ color: \"text.secondary\" }}>\r\n            $\r\n          </InputAdornment>\r\n        ),\r\n        sx: { \r\n          height: 40,\r\n          backgroundColor: 'action.selected' \r\n        }\r\n      }}\r\n    />\r\n  </Box>\r\n\r\n  {/* Existing Quantity */}\r\n  <Box sx={{ width: 140 }}>\r\n    <NumericFormat\r\n      value={selectedOption1 ? (selectedOption1.qty ? parseInt(AddItem.qty || 0) + parseInt(selectedOption1.qty) : \"\") : \"\"}\r\n      customInput={TextField}\r\n      label={<FormattedMessage id=\"Exest QTY\" />}\r\n      size=\"small\"\r\n      fullWidth\r\n      thousandSeparator\r\n      decimalScale={0}\r\n      InputProps={{ \r\n        readOnly: true,\r\n        sx: { \r\n          height: 40,\r\n          backgroundColor: 'action.selected' \r\n        }\r\n      }}\r\n    />\r\n  </Box>\r\n\r\n  {/* Description */}\r\n  <Box sx={{ flexGrow: 1, minWidth: 240 }}>\r\n    <TextField\r\n      name=\"description\"\r\n      multiline\r\n      minRows={2}\r\n      value={AddItem.description}\r\n      onChange={handleItem}\r\n      label={<FormattedMessage id=\"Description\" />}\r\n      size=\"small\"\r\n      fullWidth\r\n      InputProps={{\r\n        sx: { \r\n          alignItems: 'flex-start',\r\n          height: 'auto'\r\n        }\r\n      }}\r\n    />\r\n  </Box>\r\n\r\n  {/* Add Button */}\r\n  <Button\r\n    onClick={() => AddtoTable()}\r\n    variant=\"contained\"\r\n    color=\"primary\"\r\n    size=\"medium\"\r\n    startIcon={<Plus size={18} />}\r\n    sx={{ \r\n      height: 40,\r\n      minWidth: 120,\r\n      fontWeight: 'bold',\r\n      textTransform: 'none',\r\n      boxShadow: 'none',\r\n      '&:hover': {\r\n        boxShadow: 'none'\r\n      }\r\n    }}\r\n  >\r\n    <FormattedMessage id=\"Add\" />\r\n  </Button>\r\n</Box>\r\n\r\n      {/* Bottom Section */}\r\n      <Box display=\"flex\" flexDirection={{ xs: \"column\", md: \"row\" }} gap={3}>\r\n        <Box flex={2} pr={{ md: 2 }}>\r\n          <Typography\r\n            variant=\"subtitle1\"\r\n            sx={{ bgcolor: \"info.main\", color: \"#fff\", p: 1, borderRadius: 1, fontSize: \"1rem\", mb: 1 }}\r\n            align=\"center\"\r\n          >\r\n            <FormattedMessage id=\"Purchase stocks\" />\r\n          </Typography>\r\n          <TableContainer component={Paper} sx={{ maxHeight: 320 }}>\r\n            <Table size=\"small\" stickyHeader>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell sx={{ width: \"5%\" }}><FormattedMessage id=\"ID\" /></TableCell>\r\n                  <TableCell sx={{ width: \"20%\" }}><FormattedMessage id=\"Name\" /></TableCell>\r\n                  <TableCell sx={{ width: \"10%\" }}><FormattedMessage id=\"Quantity\" /></TableCell>\r\n                                   {sidebars[0].type==='gold' && <TableCell sx={{ width: \"10%\" }}><FormattedMessage id=\"weight\" /></TableCell>}\r\n                  <TableCell sx={{ width: \"10%\" }}><FormattedMessage id=\"Price\" /></TableCell>\r\n                  <TableCell sx={{ width: \"10%\" }}><FormattedMessage id=\"Total\" /></TableCell>\r\n                  <TableCell sx={{ width: \"30%\" }}><FormattedMessage id=\"Description\" /></TableCell>\r\n                  <TableCell sx={{ width: \"5%\" }}><FormattedMessage id=\"Delete\" /></TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {shopingcart && shopingcart.map((row, idx) => (\r\n                  <TableRow key={idx}>\r\n                    <TableCell>{row.e_id}</TableCell>\r\n                    <TableCell>{row.stock.name}</TableCell>\r\n                    <TableCell>{row.qty}</TableCell>\r\n                                        {sidebars[0].type==='gold'&&< TableCell>{row.weight}</TableCell>}\r\n                    <TableCell>{row.purchase_price}</TableCell>\r\n                    <TableCell>{row.purchase_price * row.qty}</TableCell>\r\n                    <TableCell>{row.description}</TableCell>\r\n                    <TableCell>\r\n                      <IconButton onClick={() => Deleteshopingcart(row)}>\r\n                        <Trash2 size={18} />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Box>\r\n\r\n        <Box flex={1} pl={{ md: 2 }}>\r\n          <TextField\r\n            value={TotalAmount}\r\n            label={<FormattedMessage id=\"Total Amount\" />}\r\n            InputProps={{ readOnly: true }}\r\n            size=\"small\"\r\n            fullWidth\r\n            sx={{ mb: 1 }}\r\n          />\r\n          <TextField\r\n            value={PaidAmount}\r\n            onChange={handlepaid}\r\n            InputProps={{ readOnly: !Exesting }}\r\n            label={<FormattedMessage id=\"Paid Amount\" />}\r\n            size=\"small\"\r\n            fullWidth\r\n            sx={{ mb: 1 }}\r\n          />\r\n          <TextField\r\n            value={update.belance}\r\n            InputProps={{ readOnly: true }}\r\n            label={<FormattedMessage id=\"Remain Balance\" />}\r\n            size=\"small\"\r\n            fullWidth\r\n            sx={{ mb: 2 }}\r\n          />\r\n\r\n          <Box display=\"flex\" justifyContent=\"center\" gap={2}>\r\n            <Button variant=\"outlined\" color=\"error\" size=\"medium\" onClick={close}>\r\n              <FormattedMessage id=\"Cancel\" />\r\n            </Button>\r\n            <Button variant=\"contained\" color=\"success\" size=\"medium\" onClick={() => Sumbit(false)}>\r\n              <FormattedMessage id=\"Submit\" />\r\n            </Button>\r\n            <Button variant=\"contained\" color=\"success\" size=\"medium\" onClick={() => Sumbit(true)}>\r\n              <FormattedMessage id=\"Print And Save\" />\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>);\r\n}"],"names":["AddSell","_ref","AddSellModal","close","records","setRecords","moneys","belance","setbelance","setAddBalanceModal","options1","setOptions1","showAlert","useShowAlert","dispatch","useDispatch","settings","errors","statuss","useSelector","state","sidebars","useEffect","lenght","getSettings","items","errori","formatMessage","useIntl","selectedDay","setSelectedDay","useState","moment","selectedOption","setSelectedOption","selectedOption1","setSelectedOption1","EndDate","setEndDate","account","setaccount","update","setupdate","id","selectedOptionAccount","setSelectedOptionAccount","ExestQty","setExestQty","AddItem","setAddItem","item_id","qty","weight","dateInsert","Date","toISOString","rate","user_id","localStorage","getItem","purchase_price","description","sell_price","expiry_date","accounts_id","money","stock","name","e_id","shopingcart","setshopingcart","TotalAmount","setTotalAmount","primari","setprimari","Sumbit","flag","BillId","Exesting","position","icon","title","_jsx","FormattedMessage","showConfirmButton","timer","selectedOptionmoney","length","arr","forEach","key","push","bill_id","add","axios","post","Source","getAddress","headers","Authorization","concat","params","PaidAmount","CustomerName","DateInsert","then","res","_settings$","dateObj","formattedDate","getFullYear","String","getMonth","padStart","getDate","hours","getHours","minutes","getMinutes","formattedHours","formattedMinutes","aa","date","format","imageUrl","company_pic","imageSrc","fileName","split","pop","invoiceHTML","company_name","text","toLowerCase","map","word","charAt","toUpperCase","slice","join","row","index","address","phone","email","printWindow","window","open","document","write","onload","focus","print","alert","generateInvoicePDF","data","bill","sells","type","measuring","stocks_id","setSearchQuery","setSearchQuery1","setSelectedOptionmoney","setPaidAmount","catch","err","handleItem","e","_objectSpread","target","value","options","setOptions","handleSearch1","async","searchQuery","searchQuery1","buttonRef","useRef","handleKeyDown","preventDefault","current","click","prevState","setExesting","get","query","do","error","fetchData","_jsxs","Box","dir","sx","width","maxWidth","overflowX","overflowY","height","bgcolor","p","borderRadius","mx","className","children","display","justifyContent","alignItems","mt","mb","Typography","variant","align","color","flexGrow","fontSize","IconButton","onClick","ml","X","size","boxShadow","fontWeight","flexDirection","xs","md","gap","flexWrap","FormControlLabel","control","Switch","checked","onChange","label","minWidth","component","Combo_stock","setAddAccountModal","customer","handleInputChange","newValue","temp_customer","handleSearch","Onsearch","compactMode","Combo_Customer","isEditable","Datepicker_Customer","default_value","handle_date","jalaliDate","year","month","day","now","jalaali","t","isoString","lebal","backgroundColor","gutterBottom","Combo_stockps","NumericFormat","onKeyDown","onValueChange","values","customInput","TextField","fullWidth","thousandSeparator","allowNegative","decimalScale","InputProps","decimalSeparator","startAdornment","InputAdornment","readOnly","parseInt","multiline","minRows","Button","AddtoTable","sellPrice","parseFloat","addto","item","prev","startIcon","Plus","textTransform","flex","pr","TableContainer","Paper","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","idx","Deleteshopingcart","filter","pre","Trash2","pl"],"sourceRoot":""}