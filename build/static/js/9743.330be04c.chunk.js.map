{"version":3,"file":"static/js/9743.330be04c.chunk.js","mappings":"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","sources":["pages/Transactions/AllTransactions.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { gregorianToJalali } from \"shamsi-date-converter\";\r\nimport Alert from \"../forms/Alert\";\r\nimport Datepicker from \"../forms/Datepicker\";\r\nimport Datepicker_Customer from \"../forms/Datepicker_customer\";\r\nimport Datepicker_start from \"../forms/Datepicker_start\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport axios from \"axios\";\r\nimport AccountEdit from \"../CustomersEdit\";\r\nimport Add from \"../../assets/icon/add.png\";\r\nimport Trash from \"../../assets/icon/trash.png\";\r\nimport { useRef } from \"react\";\r\nimport Belance from \"../forms/Belance\";\r\nimport AddAccount from \"../AddAccount\";\r\nimport ComboBox from \"../forms/ComboBox\";\r\nimport Source from \"../../Source\";\r\nimport Swal from \"sweetalert2\";\r\nimport moment from \"moment-jalaali\";\r\nimport jalaali from \"jalaali-js\";\r\nimport Edit_deposite from \"../Edit_deposite\";\r\nimport { Calendar } from \"react-modern-calendar-datepicker\";\r\nimport * as shamsi from \"shamsi-date-converter\";\r\n// import DatePicker from \"react-modern-calendar-datepicker\";\r\nimport { NumericFormat } from \"react-number-format\";\r\nimport { utils } from \"react-modern-calendar-datepicker\";\r\nconst formatNumber = (number) => {\r\n  return number.toLocaleString(); // Formats number with thousand separators\r\n};\r\n\r\nexport default function AllTransactions({\r\n  user,\r\n  settings,\r\n}) {\r\n  const [  accounts,setAccounts]=useState([]);\r\n  const [  money,setmoney]=useState([]);\r\n  const [  Cash,setCash]=useState([]);\r\n  const [  belance,  setbelance]=useState([]);\r\n  const [deposite,setdeposite]=useState([]);\r\n  const [selectedDay, setSelectedDay] = useState(moment());\r\n\r\n  const [open, setopen] = useState(true);\r\n  const [alert, setalert] = useState(false);\r\n  const [records, setRecords] = useState([]);\r\n  const persianToday = utils(\"fa\").getToday();\r\n  const [Ddate, setDdate] = useState(null);\r\n  const [de_id, setde_id] = useState(0);\r\n  const [OpenEdit, setOpenEdit] = useState(false);\r\n  const [EditDeposit, setEditDeposit] = useState({\r\n    id: 2,\r\n    account: 0,\r\n    date: \"\",\r\n    amount: 0,\r\n    discription: \"\",\r\n    type: \"\",\r\n    customer: \"\",\r\n    moneyType: \"\",\r\n    cash: 0,\r\n    isdelete: false,\r\n    user: 0,\r\n    user_name: \"\",\r\n    moneyid: 0,\r\n  });\r\n  const [cashreport, setcashreport] = useState(0);\r\n  const [report_delete, Setreport_delete] = useState({\r\n    account: 15,\r\n    date: \"2024-05-15T15:41:44.888608Z\",\r\n    amount: 0,\r\n    discription: \"\",\r\n    type: \"deposite\",\r\n    cash: 0,\r\n    isdelete: \"True\",\r\n  });\r\n  const delete_report = async (row) => {\r\n    setOpenEdit(false);\r\n    const swalWithBootstrapButtons = Swal.mixin({\r\n      customClass: {\r\n        confirmButton: \"btn btn-success\",\r\n        cancelButton: \"btn btn-danger\",\r\n      },\r\n      buttonsStyling: false,\r\n    });\r\n  \r\n    const result = await swalWithBootstrapButtons.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You won't be able to revert this!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonText: \"Yes, delete it!\",\r\n      cancelButtonText: \"No, cancel!\",\r\n      reverseButtons: true,\r\n    });\r\n  \r\n    if (result.isConfirmed) {\r\n      try {\r\n        let amount_delete = parseInt(row.amount);\r\n        let belacne_delete_primary_response = await axios.get(\r\n          Source.getAddress() + `/api/belance/${row.account}`\r\n          ,{headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n          },}\r\n        );\r\n        const belacne_delete_primary = belacne_delete_primary_response.data;\r\n        let belance_amount = parseInt(belacne_delete_primary.belance);\r\n        let belance_delete = {\r\n          belance: String(belance_amount - amount_delete),\r\n        };\r\n  \r\n        let money_delete_primary_response = await axios.get(\r\n          Source.getAddress() + `/api/money/${belacne_delete_primary.moneyId}`\r\n        ,{ headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n          // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n        },}\r\n        );\r\n  \r\n        const money_delete_primary = money_delete_primary_response.data;\r\n        let cash_primary = parseInt(money_delete_primary.cach);\r\n        let money_delete = {\r\n          cach: parseInt(cash_primary - amount_delete),\r\n        };\r\n  \r\n        await axios.put(\r\n          Source.getAddress() + `/api/belance/${belacne_delete_primary.id}`,\r\n          belance_delete,{ headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n            // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n          },}\r\n        );\r\n  \r\n        belacne_delete_primary.belance = belance_delete.belance;\r\n        belacne_delete_primary.isdelete = belance_delete.isdelete;\r\n  \r\n        setbelance((prevBelance) =>\r\n          prevBelance.map((a) =>\r\n            a.id === belacne_delete_primary.id ? belacne_delete_primary : a\r\n          )\r\n        );\r\n  \r\n        // Update the money\r\n        await axios.put(\r\n          Source.getAddress() + `/api/money/${money_delete_primary.id}`,\r\n          money_delete,{ headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n            // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n          },}\r\n        );\r\n  \r\n        money_delete_primary.cach = money_delete.cach;\r\n        setCash((prevCash) =>\r\n          prevCash.map((a) =>\r\n            a.id === money_delete_primary.id ? money_delete_primary : a\r\n          )\r\n        );\r\n  \r\n        // Update the report to mark it as deleted\r\n        let update = {\r\n          isdelete: 1,\r\n        };\r\n  \r\n        await axios.put(Source.getAddress() + `/api/report/${row.id}`, update,{ headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n          // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n        },});\r\n        setRecords((prevRecords) =>\r\n          prevRecords.filter((record) => record.id !== row.id)\r\n        );\r\n        Swal.fire({\r\n          position: \"center\",\r\n          icon: \"success\",\r\n          title: \"Deposite record successfully deleted !\",\r\n          showConfirmButton: false,\r\n          timer: 600,\r\n        });\r\n      } catch (err) {\r\n        Swal.fire({\r\n          position: \"center\",\r\n          icon: \"error\",\r\n          title: \"Deposite record not deleted\",\r\n          showConfirmButton: false,\r\n          timer: 600,\r\n        });\r\n      }\r\n    } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n      Swal.fire({\r\n        position: \"center\",\r\n        icon: \"error\",\r\n        text: \"Your Deposite record is safe :)\",\r\n        showConfirmButton: false,\r\n        timer: 600,\r\n      });\r\n    }\r\n  };\r\n  \r\n\r\n  const [moneytype, setmoneytype] = useState(0);\r\n  const [EndDateE, setEndDateE] = useState(null);\r\n  const [idbelance, setidbelance] = useState(0);\r\n  const [selectedBelance, setselectedBelance] = useState({\r\n    id: 0,\r\n    account_name: \"\",\r\n    moneyType: \"\",\r\n    account: 0,\r\n    moneyId: 0,\r\n    user: 0,\r\n    type: 0,\r\n    belance: 0,\r\n    date_created: \"\",\r\n  });\r\n  const [openBelance, setOpenBelance] = useState(false);\r\n  const [edit, setEdit] = useState(false);\r\n  const [editAccount, setEditAccount] = useState(null);\r\n  const [id, setId] = useState(\"\");\r\n  const [addAccountModal, setAddAccountModal] = useState(false);\r\n  const [StartDate, setStartDate] = useState(\"\");\r\n  const [EndDate, setEndDate] = useState(\"\");\r\n  const [username, setusername] = useState(\"\");\r\n  const [moneyname, setmoneyname] = useState(\"\");\r\n  const [AddDeposite, setAddDeposite] = useState({\r\n    user: 0,\r\n    discription: \"\",\r\n    amount: \"\",\r\n    date: null,\r\n    account: 0,\r\n    type: \"deposite\",\r\n    cash: 0,\r\n    isdelete: \"False\",\r\n  });\r\n  const filterDeposite = () => {\r\n    // console.log(StartDate);    2024-05-29\r\n    const startDate = new Date(\r\n      `${StartDate.year}-${StartDate.month}-${StartDate.day}`\r\n    ); // Start date\r\n    const endDate = new Date(`${EndDate.year}-${EndDate.month}-${EndDate.day}`); // End date\r\n    endDate.setDate(endDate.getDate() + 2);\r\n    const type = \"deposite\";\r\n    axios\r\n      .get(Source.getAddress() + \"/api/report\", {\r\n        params: {\r\n          startDate: startDate,\r\n          endDate: endDate,\r\n          type: type,\r\n          delete: \"False\",\r\n        },headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('access')}`\r\n  }})\r\n      .then((res) => {\r\n        Swal.fire({\r\n          position: \"top-end\",\r\n          icon: \"success\",\r\n          title: \"Deposite Table filterd successfully\",\r\n          showConfirmButton: false,\r\n          timer: 1500,\r\n        });\r\n        setRecords(res.data); // This will contain filtered data from the server\r\n        // console.log(res.data);\r\n      })\r\n      .catch((err) => {\r\n        Swal.fire({\r\n          position: \"top-end\",\r\n          icon: \"error\",\r\n          title: \"Something went wrong !\",\r\n          showConfirmButton: false,\r\n          timer: 1500,\r\n        });\r\n      });\r\n  };\r\n  const primary = () => {\r\n    if (selectedBelance.belance === \"0\") {\r\n      return AddDeposite.amount;\r\n    } else {\r\n      let primar = parseInt(selectedBelance.belance);\r\n      primar += parseInt(AddDeposite.amount);\r\n      return primar;\r\n    }\r\n  };\r\n  const updatemoney = () => {\r\n    const record = Cash.find((item) => item.id === moneytype);\r\n    if (record) {\r\n      let money = parseInt(AddDeposite.amount);\r\n      let primmoney = parseInt(record.cach);\r\n      let sum = primmoney + money;\r\n      return { name: record.name, cash: sum, user: record.user };\r\n    } else {\r\n      // Handle the case when record is undefined\r\n      return { name: \"\", cash: 0 };\r\n    }\r\n  };\r\n\r\n  const primary1 = () => {\r\n    // const record= Cash.filter((item)=>{item.id==moneytype});\r\n    if (selectedBelance.belance === \"0\") {\r\n      return -parseInt(AddDeposite.amount);\r\n    } else {\r\n      let money = parseInt(AddDeposite.amount);\r\n      let primar = parseInt(selectedBelance.belance);\r\n      let sum = primar - money;\r\n      return sum;\r\n    }\r\n  };\r\n\r\n  const updatemoney1 = () => {\r\n    const record = Cash.find((item) => item.id === moneytype);\r\n    if (record) {\r\n      let money = parseInt(AddDeposite.amount);\r\n      let primmoney = parseInt(record.cach);\r\n      let sum = primmoney - money;\r\n      return { name: record.name, cash: sum, user: record.user };\r\n    } else {\r\n      // Handle the case when record is undefined\r\n      return { name: \"\", cash: 0 };\r\n    }\r\n  };\r\n\r\n  const SumbitReport = () => {\r\n    if (AddDeposite.amount !== 0 && AddDeposite.account !== 0) {\r\n        if(AddDeposite.type==='deposite') {\r\n      let newId = 1;\r\n      // ? Math.max(...records.map((record) => record.id)) + 1\r\n    //   axios\r\n    //     .get(\"http://127.0.0.1:8000/api/report/get_last_report_id/\",{headers: {\r\n    //       'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //       // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    // }})\r\n        // .then((res) => (newId = res.data.last_report_id + 1))\r\n        // .catch((err) => {});\r\n      let dd = new Date();\r\n      const pri = primary();\r\n      const moneyinsert = updatemoney();\r\n      const uploadDatamoney = {\r\n        cash:String(moneyinsert.cash),\r\n        ontransaction:1\r\n      }\r\n      \r\n      // uploadDatamoney.append(\"name\", moneyinsert.name);\r\n      // uploadDatamoney.append(\"cach\", moneyinsert.cash);\r\n      // uploadDatamoney.append(\"delete\", \"False\");\r\n      // uploadDatamoney.append(\"user\", moneyinsert.user);\r\n      // uploadDatamoney.append(\"ontransaction\",\"True\");\r\n      const uploadData ={\r\n        belance:String(pri),\r\n        ontransaction:1\r\n      }\r\n      // uploadData.append(\"type\", selectedBelance.type);\r\n      // uploadData.append(\"belance\", pri);\r\n      // uploadData.append(\"account\", selectedBelance.account);\r\n      // uploadData.append(\"date_created\", selectedBelance.date_created);\r\n      // uploadData.append(\"user\", selectedBelance.user);\r\n      // uploadData.append(\"isdelete\", \"False\");\r\n      // uploadData.append('ontransaction',\"True\");\r\n      let add_deposite = {\r\n        user_id: 0,\r\n        discription: \"\",\r\n        amount: 0,\r\n        date: null,\r\n        account_id: 0,\r\n        type: \"deposite\",\r\n        cash: 0,\r\n        isdelete: 0,\r\n      };\r\n      add_deposite.user_id = AddDeposite.user;\r\n      add_deposite.amount = AddDeposite.amount;\r\n      add_deposite.discription = AddDeposite.discription;\r\n      add_deposite.date = AddDeposite.date;\r\n      add_deposite.account_id = AddDeposite.account;\r\n      add_deposite.type = AddDeposite.type;\r\n      add_deposite.cash =parseInt(moneyinsert.cash);\r\n      add_deposite.isdelete = 0;\r\n      axios\r\n        .post(`${Source.getAddress()}/api/report`, add_deposite,{headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n          // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    }},)\r\n        .then((response) => {\r\n          let add = {\r\n            id: 0,\r\n            user_name: \"\",\r\n            moneyType: \"\",\r\n            customer: \"\",\r\n            user: 0,\r\n            discription: \"\",\r\n            amount: 0,\r\n            date: null,\r\n            account: 0,\r\n            type: \"deposite\",\r\n            cash: 0,\r\n            isdelete: \"False\",\r\n            account: 0,\r\n            moneyId:0,\r\n          };\r\n          add.id =response.data.report;\r\n          axios.put(Source.getAddress() + \"/api/belance/\" + `${idbelance}`,uploadData,{\r\n            headers: {\r\n              'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n                        \r\n               // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n            }\r\n          })\r\n          // fetch(Source.getAddress() + \"/api/belance/\" + `${idbelance}/`, {\r\n          //   method: \"PUT\",\r\n            // headers: {\r\n            //   'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n                        \r\n            //    // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n            // },\r\n          //   body: uploadData,\r\n          // })\r\n            .then((res) => {\r\n              axios.put(Source.getAddress() + \"/api/money/\" + `${moneytype}`,uploadDatamoney,{\r\n                headers: {\r\n                  'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n                  // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n                },\r\n              })\r\n              // fetch(Source.getAddress() + \"/api/money/\" + `${moneytype}/`, {\r\n              //   method: \"PUT\",\r\n              //   headers: {\r\n              //     'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n              //     // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n              //   },\r\n              //   body: uploadDatamoney,\r\n              // })\r\n                .then((res) => {\r\n                  add.account = AddDeposite.account;\r\n                  add.user = localStorage.getItem(\"userTokenid\");\r\n                  add.discription = AddDeposite.discription;\r\n                  add.amount = AddDeposite.amount;\r\n                  add.date = AddDeposite.date;\r\n                  add.account = AddDeposite.account;\r\n                  add.type = AddDeposite.type;\r\n                  add.cash = moneyinsert.cash;\r\n                  add.isdelete = AddDeposite.isdelete;\r\n                  add.customer = username;\r\n                  add.user_name = localStorage.getItem(\"userToken\");\r\n                  add.moneyType = moneyname;\r\n                  setRecords([add, ...records]);\r\n                  Swal.fire({\r\n                    position: \"top-end\",\r\n                    icon: \"success\",\r\n                    title: \"Your record has been added !\",\r\n                    showConfirmButton: false,\r\n                    timer: 1000,\r\n                  });\r\n                  setSelectedOption(\"\");\r\n                  let datetime = new Date();\r\n                  const jalaliDate12 = {\r\n                    year: datetime.getFullYear(),\r\n                    month: datetime.getMonth() + 1,\r\n                    day: datetime.getDay(),\r\n                  };\r\n                  const { year, month, day } = jalaliDate12;\r\n                  const t = new Date();\r\n                  const date = new Date();\r\n                  const isoString = date.toISOString();\r\n                  setAddDeposite({\r\n                    ...AddDeposite,\r\n                    user: 0,\r\n                    discription: \"\",\r\n                    amount: 0,\r\n                    date: isoString,\r\n                    account: 0,\r\n                    type: \"deposite\",\r\n                    cash: 0,\r\n                    isdelete: 0,\r\n                  });\r\n                  setFormattedValue(\"\");\r\n                  setSelectedDay(moment());\r\n                  let add_cash = {\r\n                    id: 0,\r\n                    account_name: \"\",\r\n                    moneyType: \"\",\r\n                    account: 0,\r\n                    moneyId: 0,\r\n                    type: 0,\r\n                    belance: 0,\r\n                    date_created: \"\",\r\n                    user: 0,\r\n                  };\r\n                  add_cash.id = selectedBelance.id;\r\n                  add_cash.account_name = selectedBelance.account_name;\r\n                  add_cash.moneyId = selectedBelance.moneyId;\r\n                  add_cash.moneyType = selectedBelance.moneyType;\r\n                  add_cash.account = selectedBelance.account;\r\n                  add_cash.type = selectedBelance.type;\r\n                  add_cash.belance = pri;\r\n                  add_cash.date_created = selectedBelance.date_created;\r\n                  add_cash.user = selectedBelance.user;\r\n                  setbelance(\r\n                    belance.map((a) => (a.id === add_cash.id ? add_cash : a))\r\n                  );\r\n                  let update_money = {\r\n                    name: \"sefide\",\r\n                    user: 1,\r\n                    existense: false,\r\n                    cach: 0,\r\n                    user_name: \"\",\r\n                    id: 0,\r\n                  };\r\n                  update_money.name = moneyinsert.name;\r\n                  update_money.id = moneytype;\r\n                  update_money.cach = moneyinsert.cash;\r\n                  update_money.user = moneyinsert.user;\r\n                  setCash(\r\n                    Cash.map((a) => (a.id === moneytype ? update_money : a))\r\n                  );\r\n                })\r\n                .catch((err) => {\r\n                  Swal.fire({\r\n                    position: \"top-end\",\r\n                    icon: \"error\",\r\n                    title: \"Your cache not updated !\",\r\n                    showConfirmButton: false,\r\n                    timer: 1000,\r\n                  });\r\n                });\r\n            })\r\n            .catch((error) => {\r\n              Swal.fire({\r\n                position: \"top-end\",\r\n                icon: \"error\",\r\n                title: \"Account and cache not updated !\",\r\n                showConfirmButton: false,\r\n                timer: 1000,\r\n              });\r\n            });\r\n        })\r\n        .catch((error) => {\r\n          Swal.fire({\r\n            position: \"top-end\",\r\n            icon: \"error\",\r\n            title: \"Not working ,please try again !\",\r\n            showConfirmButton: false,\r\n            timer: 1500,\r\n          });\r\n        });\r\n    }else{\r\n        let dd = new Date();\r\n        let pri = primary1();\r\n        // setselectedBelance({\r\n        //   ...selectedBelance,\r\n        //   belance: pri,\r\n        // });\r\n        const moneyinsert = updatemoney1();\r\n        const uploadData = {\r\n          belance:String(pri),\r\n          ontransaction:1\r\n        };\r\n        const uploadDatamoney = {\r\n          ontransaction:1,\r\n          cach:parseInt(moneyinsert.cash)\r\n        }\r\n        // uploadDatamoney.append(\"name\", moneyinsert.name);\r\n        // uploadDatamoney.append(\"cach\", moneyinsert.cash);\r\n        // uploadDatamoney.append(\"isdelete\", \"False\");\r\n        // uploadDatamoney.append(\"user\", moneyinsert.user);\r\n        // uploadDatamoney.append('ontransaction','True');\r\n\r\n        // uploadData.append(\"type\", selectedBelance.type);\r\n        // uploadData.append(\"belance\", pri);\r\n        // uploadData.append('ontransaction','True');\r\n        // uploadData.append(\"account\", selectedBelance.account);\r\n        // uploadData.append(\"date_created\", selectedBelance.date_created);\r\n        // uploadData.append(\"user\", selectedBelance.user);\r\n        // uploadData.append(\"isdelete\", \"False\");\r\n        let add_deposite = {\r\n          user_id: 0,\r\n          discription: \"\",\r\n          amount: 0,\r\n          date: null,\r\n          account_id: 0,\r\n          type: \"deposite\",\r\n          cash: 0,\r\n          isdelete: 0,\r\n        };\r\n        add_deposite.user_id = AddDeposite.user;\r\n        add_deposite.amount = AddDeposite.amount;\r\n        add_deposite.discription = AddDeposite.discription;\r\n        add_deposite.date = AddDeposite.date;\r\n        add_deposite.account_id = AddDeposite.account;\r\n        add_deposite.type = AddDeposite.type;\r\n        add_deposite.cash = moneyinsert.cash;\r\n        // add_deposite.isdelete = 0;\r\n        axios\r\n          .post(`${Source.getAddress()}/api/report`, add_deposite,{ headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem('access')}`,\r\n          },})\r\n          .then((response) => {\r\n            let add = {\r\n              id: 0,\r\n              user_name: \"\",\r\n              moneyType: \"\",\r\n              customer: \"\",\r\n              user: 0,\r\n              discription: \"\",\r\n              amount: 0,\r\n              date: null,\r\n              account: 0,\r\n              type: \"deposite\",\r\n              cash: 0,\r\n              isdelete: \"False\",\r\n              account: 0,\r\n              moneyId:0,\r\n            };\r\n            add.id = response.data.report;\r\n            axios.put(Source.getAddress() + \"/api/belance/\" + `${idbelance}`,uploadData,{\r\n              headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n                // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n              },\r\n            })\r\n            // fetch(Source.getAddress() + \"/api/belance/\" + `${idbelance}/`, {\r\n            //   method: \"PUT\",\r\n            //   headers: {\r\n            //     'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n            //     // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n            //   },\r\n            //   body: uploadData,\r\n            // })\r\n              .then((res) => {\r\n                axios.put(Source.getAddress() + \"/api/money/\" + `${moneytype}`,uploadDatamoney,{\r\n                  headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n                    // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n                  },\r\n                })\r\n                // fetch(Source.getAddress() + \"/api/money/\" + `${moneytype}/`, {\r\n                //   method: \"PUT\",\r\n                //   headers: {\r\n                //     'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n                //     // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n                //   },\r\n                //   body: uploadDatamoney,\r\n                // })\r\n                  .then((res) => {\r\n                    add.account = AddDeposite.account;\r\n                    add.user = localStorage.getItem(\"userTokenid\");\r\n                    add.discription = AddDeposite.discription;\r\n                    add.amount = AddDeposite.amount;\r\n                    add.date = AddDeposite.date;\r\n                    add.account = AddDeposite.account;\r\n                    add.type = AddDeposite.type;\r\n                    add.cash = moneyinsert.cash;\r\n                    add.isdelete = AddDeposite.isdelete;\r\n                    add.customer = username;\r\n                    add.user_name = localStorage.getItem(\"userToken\");\r\n                    add.moneyType = moneyname;\r\n                    setRecords(prevRecords => [add, ...prevRecords]);\r\n                    setSelectedDay(moment());\r\n                    let datetime = new Date();\r\n                    // console.log();\r\n                    // const handl={year:date._a[0],month:date._a[1]+1,day:date._a[2]}\r\n                    const jalaliDate12 = {\r\n                      year: datetime.getFullYear(),\r\n                      month: datetime.getMonth() + 1,\r\n                      day: datetime.getDay(),\r\n                    };\r\n                    const { year, month, day } = jalaliDate12;\r\n                    // Create the ISO date string\r\n                    const t = new Date();\r\n                    const date = new Date();\r\n                    const isoString = date.toISOString();\r\n                    setAddDeposite({\r\n                      user: localStorage.getItem(\"userTokenid\"),\r\n                      isdelete: 0,\r\n                      discription: \"\",\r\n                      amount: 0,\r\n                      date: isoString,\r\n                      account: 0,\r\n                      type: \"withdraw\",\r\n                      cash: 0,\r\n                    });\r\n                    setFormattedValue(\"\");\r\n                    setSelectedOption(\"\");\r\n                    let add_cash = {\r\n                      id: 0,\r\n                      account_name: \"\",\r\n                      moneyType: \"\",\r\n                      account: 0,\r\n                      moneyId: 0,\r\n                      type: 0,\r\n                      belance: 0,\r\n                      date_created: \"\",\r\n                      user: 0,\r\n                    };\r\n                    add_cash.user = selectedBelance.user;\r\n                    add_cash.id = selectedBelance.id;\r\n                    add_cash.account_name = selectedBelance.account_name;\r\n                    add_cash.moneyId = selectedBelance.moneyId;\r\n                    add_cash.moneyType = selectedBelance.moneyType;\r\n                    add_cash.account = selectedBelance.account;\r\n                    add_cash.type = selectedBelance.type;\r\n                    add_cash.belance = pri;\r\n                    add_cash.date_created = selectedBelance.date_created;\r\n                    setbelance(prevBelance =>\r\n                      prevBelance.map(item => (item.id === add_cash.id ? add_cash : item))\r\n                    );\r\n                    \r\n                    let update_money = {\r\n                      name: \"sefide\",\r\n                      user: 1,\r\n                      existense: false,\r\n                      cach: 0,\r\n                      user_name: \"\",\r\n                      id: 0,\r\n                    };\r\n                    update_money.name = moneyinsert.name;\r\n                    update_money.id = moneytype;\r\n                    update_money.cach = moneyinsert.cash;\r\n                    setCash(prevcash=>\r\n                      prevcash.map((a) => (a.id === moneytype ? update_money : a))\r\n                    );\r\n                    Swal.fire({\r\n                      position: \"top-end\",\r\n                      icon: \"success\",\r\n                      title: \"Your record has been added !\",\r\n                      showConfirmButton: false,\r\n                      timer: 1000,\r\n                    });\r\n                  })\r\n                  .catch((err) => {\r\n                    Swal.fire({\r\n                      position: \"top-end\",\r\n                      icon: \"error\",\r\n                      title: \"Your cache not updated !\",\r\n                      showConfirmButton: false,\r\n                      timer: 1000,\r\n                    });\r\n                  });\r\n              })\r\n              .catch((error) => {\r\n                Swal.fire({\r\n                  position: \"top-end\",\r\n                  icon: \"error\",\r\n                  title: \"Account and cache not updated !\",\r\n                  showConfirmButton: false,\r\n                  timer: 1000,\r\n                });\r\n              });\r\n          })\r\n          .catch((error) => {\r\n            Swal.fire({\r\n              position: \"top-end\",\r\n              icon: \"error\",\r\n              title: \"Not working ,please try again !\",\r\n              showConfirmButton: false,\r\n              timer: 1500,\r\n            });\r\n          });\r\n      \r\n    }\r\n      // console.log(AddDeposite);\r\n    } else {\r\n      // setError(true);\r\n      Swal.fire({\r\n        position: \"top-end\",\r\n        icon: \"error\",\r\n        title: \"You must fill Customer name and Amount input !\",\r\n        showConfirmButton: false,\r\n        timer: 1500,\r\n      });\r\n    }\r\n  };\r\n\r\n  const convertToKabulTime = (dateStr) => {\r\n    const dateObj = new Date(dateStr);\r\n\r\n    // Set the time zone to Kabul (UTC+4:30)\r\n    dateObj.setMinutes(dateObj.getMinutes() + 540); // Kabul is UTC+4:30\r\n\r\n    // Format the date object into the desired string format\r\n    const formattedDateStr = dateObj.toISOString().slice(0, 16);\r\n\r\n    return formattedDateStr;\r\n  };\r\n  const handle_date = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n\r\n      // const date = new Date(jalaliDate.year, jalaliDate.month - 1, jalaliDate.day);\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      // setIsoDate(isoString);\r\n      setAddDeposite({\r\n        ...AddDeposite,\r\n        date: isoString,\r\n      });\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n\r\n  // const [str,setstr]=useState('');\r\n\r\n  const [formattedValue, setFormattedValue] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    const formattedValue = e.target.value;\r\n    // Remove the thousand separators (commas)\r\n    const unformattedValue = formattedValue.replace(/,/g, \"\").replace(\"$\", \"\");\r\n    setFormattedValue(formattedValue);\r\n    setAddDeposite({\r\n      ...AddDeposite,\r\n      amount: unformattedValue,\r\n      user: localStorage.getItem(\"userTokenid\"),\r\n    });\r\n  };\r\n  const handleDeposite = (e) => {\r\n    setAddDeposite({\r\n      ...AddDeposite,\r\n      [e.target.name]: e.target.value,\r\n      user: localStorage.getItem(\"userTokenid\"),\r\n    });\r\n  };\r\n\r\n  const [Popup, setPopup] = useState(false);\r\n  // const [Settings, setSettings] = useState([]);\r\n  const res = useMemo((result) => {\r\n    if (window.innerWidth > 768) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  });\r\n  // useEffect(()=>{\r\n  //   axios.get(Source.getAddress()+'api/settings').then((res)=>setSettings(res.data)).catch((err)=>console.error(err));\r\n  // })\r\n  useEffect(() => {\r\n    axios.get(Source.getAddress() + '/api/customers', {\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('access')}`,\r\n      },params: {\r\n        delete: 'False',\r\n      },\r\n    }).then((res)=>{\r\n      setAccounts(res.data);\r\n    }).catch((err)=>{\r\n      console.log(err);\r\n    });\r\n  },[]);\r\n  useEffect(()=>{\r\n    axios.get(Source.getAddress() + '/api/money', {\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('access')}`,\r\n      },params: {\r\n        delete: 'False',\r\n      },\r\n    }).then((res)=>{\r\n      setmoney(res.data);\r\n      setCash(res.data);\r\n    }).catch((err)=>{\r\n      console.log(err);\r\n    });\r\n  },[]);\r\n  useEffect(()=>{\r\n    axios.get(Source.getAddress() + '/api/belance', {\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('access')}`,\r\n      },params: {\r\n        delete: 'False',\r\n      },\r\n    }).then((res)=>{\r\n      setbelance(res.data);\r\n    }).catch((err)=>{\r\n      console.log(err);\r\n    });\r\n   },[]); \r\n  // useEffect(() => {\r\n  //   const startDate = new Date();\r\n  //       const endDate = new Date();\r\n  //       startDate.setDate(startDate.getDate() - 30);\r\n  //       endDate.setDate(endDate.getDate() + 1);\r\n  //     axios.get(Source.getAddress() + '/api/report/', {\r\n  //       headers:{\r\n  //         Authorization: `Bearer ${localStorage.getItem('access')}`,\r\n  //       },\r\n  //       params: {\r\n  //         delete:'False',\r\n  //         startDate: startDate.toISOString(),\r\n  //         endDate: endDate.toISOString(), \r\n  //       },\r\n  //     }).then((res)=>{\r\n  //       setRecords(res.data);\r\n  //       setdeposite(res.data);\r\n  //     }).catch((res)=>{\r\n  //       console.log(res);\r\n  //     });\r\n\r\n\r\n  //   let news = new Date();\r\n  //   let mmm = news.toISOString().slice(0, 16);\r\n  //   let to = convertToKabulTime(mmm);\r\n  //   const jalaliDate1 = jalaali.toJalaali(\r\n  //     news.getFullYear(),\r\n  //     news.getMonth() + 1,\r\n  //     news.getDate()\r\n  //   );\r\n\r\n  //   news.setDate(news.getDate() - 1);\r\n  //   const jalaliDate = jalaali.toJalaali(\r\n  //     news.getFullYear(),\r\n  //     news.getMonth() + 1,\r\n  //     news.getDate()\r\n  //   );\r\n\r\n  //   if (settings[0].date === \"Persian\") {\r\n  //     setStartDate(\r\n  //       moment({\r\n  //         day: jalaliDate1.jd,\r\n  //         month: jalaliDate1.jm,\r\n  //         year: jalaliDate1.jy,\r\n  //       })\r\n  //     );\r\n  //     setEndDate(\r\n  //       moment({\r\n  //         day: jalaliDate.jd,\r\n  //         month: jalaliDate.jm,\r\n  //         year: jalaliDate.jy,\r\n  //       })\r\n  //     );\r\n  //   } else {\r\n  //     setStartDate(\r\n  //       moment({\r\n  //         day: String(news.getDate()).padStart(2, \"0\"),\r\n  //         month: String(news.getMonth() + 1).padStart(2, \"0\"),\r\n  //         year: news.getFullYear(),\r\n  //       })\r\n  //     );\r\n  //     setEndDate(moment(news));\r\n  //   }\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    let datetime = new Date();\r\n    const t = new Date();\r\n    const date = new Date();\r\n    const isoString = date.toISOString();\r\n\r\n    setAddDeposite({\r\n      ...AddDeposite,\r\n      date: isoString,\r\n    });\r\n  }, [setAddDeposite]);\r\n\r\n  const handleRowClick = (row) => {\r\n    setEditAccount(row);\r\n    setEdit(true);\r\n  };\r\n  const date = (d) => {\r\n\r\n    const date = new Date(d);\r\n  \r\n    let formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, \"0\")}-${String(date.getDate()).padStart(2, \"0\")}`;\r\n    const hours = date.getHours();\r\n    const minutes = date.getMinutes();\r\n    const ampm = hours >= 12 ? \"pm\" : \"am\";\r\n    let aa = ampm;\r\n    const formattedHours = hours % 12 || 12;\r\n    const formattedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    if (localStorage.getItem('date') === \"Persian\") {\r\n      moment.locale('fa'); // تنظیم لوکال به فارسی\r\n      aa = hours >= 12 ? \"ب.ظ\" : \"ق.ظ\";\r\n      formattedDate = moment(d).format('jYYYY-jMM-jDD');\r\n    } else {\r\n      moment.locale('en'); // تنظیم لوکال به انگلیسی\r\n    }\r\n  \r\n    return `${formattedDate} ${formattedHours}:${formattedMinutes} ${aa}`;\r\n  };\r\n\r\n  const handleViewBelance = (row) => {\r\n    const filteredBelance = belance.filter((item) => item.account === row.id);\r\n    setEditAccount(filteredBelance);\r\n    setId(row.id);\r\n    setOpenBelance(true);\r\n  };\r\n\r\n  const handleFilter = (e) => {\r\n    // console.log(accounts);\r\n    const newData = deposite.filter((row) => {\r\n      if (typeof row.customer === \"string\") {\r\n        if (\r\n          row.customer.toLowerCase().includes(e.target.value.toLowerCase()) ||\r\n          row.moneyType.toLowerCase().includes(e.target.value.toLowerCase()) ||\r\n          row.amount === e.target.value\r\n        ) {\r\n          return row.customer;\r\n        }\r\n      }\r\n      return false;\r\n    });\r\n    setRecords(newData);\r\n  };\r\n\r\n  const convertToHijriShamsi = (gregorianDate) => {\r\n    const [jalaliYear, jalaliMonth, jalaliDay] = gregorianToJalali(\r\n      new Date(gregorianDate)\r\n    );\r\n\r\n    const hijriShamsiDate = `${jalaliYear}/${jalaliMonth}/${jalaliDay}`;\r\n\r\n    return hijriShamsiDate;\r\n  };\r\n  const columnsDesktopsimple = [\r\n    {\r\n      name: <strong style={{ width: \"1px\" }}>ID</strong>,\r\n      selector: (row) => row.id,\r\n      //  sortable: true\r\n      style: {\r\n        width: \"1px\",\r\n        minWidth: \"10px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: <strong>Customer Name</strong>,\r\n      selector: (row) => row.customer,\r\n      style: {\r\n        padding: \"0px 20px\",\r\n        justifyContent: \"left\",\r\n        textAlign: \"center\",\r\n      },\r\n      // sortable: true\r\n    },\r\n    {\r\n      name: (\r\n        <strong\r\n          style={{ minWidth: \"200px\", maxWidth: \"240px\", width: \"240px\" }}\r\n        >\r\n          Date Created\r\n        </strong>\r\n      ),\r\n      selector: (row) => date(row.date),\r\n      style: {\r\n        minWidth: \"190px!important\", // Adjust this value as needed\r\n        maxWidth: \"200px\", // Adjust this value as needed\r\n        // margin:'0px'\r\n        // Width: '600px',    // Set a specific width\r\n      },\r\n      // sortable: true,\r\n    },\r\n    // { name: <strong>Time Created</strong>, selector: (row) => time(row.date_created),\r\n    // //  sortable: true\r\n    // },\r\n    {\r\n      name: <strong>Money Type</strong>,\r\n      selector: (row) => row.moneyType,\r\n      //  sortable: true\r\n    },\r\n    {\r\n      name: <strong className=\"w-50 text-center\">Amount</strong>,\r\n      selector: (row) => formatNumber(row.amount),\r\n      //  sortable: true\r\n      style: {\r\n        textAlign: \"center\",\r\n        // minWidth:'100px',\r\n      },\r\n    },\r\n    {\r\n      name: <strong>Description</strong>,\r\n      selector: (row) => row.discription,\r\n    },\r\n    {\r\n      name: <strong>Cash Belance</strong>,\r\n      selector: (row) => formatNumber(row.cash),\r\n    },\r\n  ];\r\n  const ShowDeposit = (type) => {\r\n    return (\r\n      <p\r\n        className={`text-capitalize position-static p-2 mb-0 ${\r\n          type === \"deposite\" ? \"bg-success\" : \"bg-danger\"\r\n        } rounded text-light text-center `}\r\n        style={{ width: \"75px\" }}\r\n      >\r\n        {type}\r\n      </p>\r\n    );\r\n  };\r\n\r\n  const columnsDesktop = [\r\n    {\r\n      name: <strong style={{ width: \"1px\" }}>ID</strong>,\r\n      selector: (row) => row.id,\r\n      //  sortable: true\r\n      style: {\r\n        width: \"1px\",\r\n        minWidth: \"10px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: <strong>Customer Name</strong>,\r\n      selector: (row) => row.customer,\r\n      style: {\r\n        padding: \"0px 20px\",\r\n        justifyContent: \"left\",\r\n        textAlign: \"center\",\r\n      },\r\n      // sortable: true\r\n    },\r\n    {\r\n      name: (\r\n        <strong\r\n          style={{ minWidth: \"170px\", maxWidth: \"200px\", width: \"200px\" }}\r\n        >\r\n          Date Created\r\n        </strong>\r\n      ),\r\n      selector: (row) => date(row.date),\r\n      style: {\r\n        minWidth: \"170px\", // Adjust this value as needed\r\n        maxWidth: \"200px\", // Adjust this value as needed\r\n        // Width: '600px',    // Set a specific width\r\n      },\r\n      // sortable: true,\r\n    },\r\n    {\r\n      name: <strong>Money Type</strong>,\r\n      selector: (row) => row.moneyType,\r\n      //  sortable: true\r\n    },\r\n    {\r\n      name: <strong className=\"w-50 text-center\">Amount</strong>,\r\n      selector: (row) => formatNumber(row.amount),\r\n      //  sortable: true\r\n      style: {\r\n        textAlign: \"left\",\r\n        // minWidth:'100px',\r\n      },\r\n    },\r\n    {\r\n      name: <strong>Transaction</strong>,\r\n      selector: (row) => ShowDeposit(row.type),\r\n    },\r\n    {\r\n      name: <strong>Description</strong>,\r\n      selector: (row) => row.discription,\r\n    },\r\n    // {\r\n    //   name: <strong>Cash Belance</strong>,\r\n    //   selector: (row) => formatNumber(row.cash),\r\n    // },\r\n    {\r\n      name: <strong>Added by </strong>,\r\n      selector: (row) => row.user_name,\r\n    },\r\n    {\r\n      name: (\r\n        <strong\r\n          style={{\r\n            textAlign: \"center\",\r\n            backgroundColor: \"tranceparent\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          Delete\r\n        </strong>\r\n      ),\r\n      selector: (row) => (\r\n        <button\r\n          onClick={() => {\r\n            delete_report(row);\r\n            // setEdit(row);\r\n            // setUpdate(true);\r\n            // seTtitle('Edit Type Money');\r\n          }}\r\n          style={{\r\n            border: \"none\",\r\n            backgroundColor: \"transparent\",\r\n            height: \"100%\",\r\n          }}\r\n        >\r\n          {row.cach}\r\n          <img\r\n            height={\"15%\"}\r\n            width={\"15%\"}\r\n            src={Trash}\r\n            style={{ backgroundColor: \"tranceparent\" }}\r\n          />\r\n        </button>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const columnsTablet = [\r\n    // { name: \"Id\", selector: (row) => row.id, sortable: true },\r\n    {\r\n      name: <strong>Customer</strong>,\r\n      selector: (row) => row.customer,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: <strong>Money Type</strong>,\r\n      selector: (row) => row.moneyType,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: <strong>Amount</strong>,\r\n      selector: (row) => row.amount,\r\n    },\r\n    // {\r\n    //   name: \"Date Created\",\r\n    //   selector: (row) => date(row.date),\r\n    //   sortable: true,\r\n    // },\r\n    // { name: \"belance\", selector: (row) => row.belance, sortable: true },\r\n    // { name: \"discription\", selector: (row) => row.discription, sortable: true },\r\n    ,\r\n  ];\r\n  const [value, setValue] = useState(\"\");\r\n  const onChange = (row) => {\r\n    setPopup(true);\r\n    setValue(row.target.value);\r\n  };\r\n\r\n  const Onsearch = (row) => {\r\n    // This gives you the ISO string in UTC\r\n    // setIsoDate(isoString);\r\n\r\n    if (row) {\r\n      setmoneyname(row.moneyType);\r\n      setusername(row.account_name);\r\n      setmoneytype(row.moneyId);\r\n      setidbelance(row.id);\r\n      setselectedBelance((prevState) => ({\r\n        ...prevState,\r\n        id: row.id,\r\n        moneyId: row.moneyId,\r\n        user: row.user,\r\n        moneyType: row.moneyType,\r\n        account: row.account,\r\n        account_name: row.account_name,\r\n        type: row.type,\r\n        belance: row.belance, // Assuming 'belance' is correct, it seems like a typo\r\n        date_created: row.date_created,\r\n      }));\r\n      let belanceName = row.account_name + \" \" + row.moneyType;\r\n      setAddDeposite({\r\n        ...AddDeposite,\r\n        account: row.id,\r\n        // date:isoString,\r\n      });\r\n      setPopup(false);\r\n      // console.log(belanceName)\r\n      setValue(belanceName);\r\n      // console.log('s  earch ',row);\r\n    }\r\n  };\r\n  const [select_user, setselect_user] = useState(\"\");\r\n  const ChangeUser = (e) => {\r\n    if (e.target.value !== \"all users\") {\r\n      const newData = deposite.filter((row) => {\r\n        if (typeof row.user_name === \"string\") {\r\n          return row.user_name\r\n            .toLowerCase()\r\n            .includes(e.target.value.toLowerCase());\r\n        }\r\n        return false;\r\n      });\r\n      setRecords(newData);\r\n    } else {\r\n      setRecords(deposite);\r\n    }\r\n    setselect_user(e.target.value);\r\n  };\r\n  // console.log(AddDeposite)\r\n  const [selectedOption, setSelectedOption] = useState();\r\n\r\n  const buttonRef = useRef(null);\r\n  const filterRef = useRef(null);\r\n\r\n  const [selectedDayE, setSelectedDayE] = useState();\r\n\r\n  const [Diversity, setDiversity] = useState();\r\n  const [account, setAccount] = useState();\r\n  const editeRef=useRef(null);\r\n  const handleshow = (row) => {\r\n    editeRef.current.select();\r\n    setAccount(row.account);\r\n    setSelectedDayE(moment(row.date));\r\n    let edit = {\r\n      account_name: row.customer,\r\n      moneyType: row.moneyType,\r\n    };\r\n    setSelectedOption1(edit);\r\n    setDiversity(row.amount);\r\n    let news;\r\n    try {\r\n      news = new Date(row.date);\r\n      if (isNaN(news.getTime())) {\r\n        throw new Error(\"Invalid date\");\r\n      }\r\n    } catch (error) {\r\n      // console.error('Invalid date format:', row.date);\r\n      return;\r\n    }\r\n    news.setDate(news.getDate());\r\n\r\n    const jalaliDate = jalaali.toJalaali(\r\n      news.getFullYear(),\r\n      news.getMonth() + 1,\r\n      news.getDate()\r\n    );\r\n    const gregorianMoment = moment(news);\r\n    setSelectedDayE(gregorianMoment);\r\n    setEditDeposit(row);\r\n    setOpenEdit(prev=> !prev);\r\n  };\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      // Check if the Enter key was pressed\r\n      e.preventDefault(); // Prevent default action if needed\r\n      if (buttonRef.current) {\r\n        buttonRef.current.click(); // Programmatically click the button\r\n      }\r\n    }\r\n  };\r\n  const Hanlderef = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      // Check if the Enter key was pressed\r\n      e.preventDefault(); // Prevent default action if needed\r\n      if (filterRef.current) {\r\n        filterRef.current.click(); // Programmatically click the button\r\n      }\r\n    }\r\n  };\r\n\r\n  const inputRef = useRef(null); // Create a ref for the input field\r\n\r\n  useEffect(() => {\r\n    const inputElement = document.querySelector(\".form-control\"); // Use the class or other selector\r\n    if (inputElement) {\r\n      setTimeout(() => {\r\n        inputElement.focus(); // Focus the input field\r\n        inputElement.select(); // Select the text in the input field\r\n      }, 0);\r\n    }\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n\r\n  // }, [Edit_Deposit.date, settings, setEndDate]);\r\n\r\n  const [isDesktop, setIsDesktop] = useState(window.innerWidth > 768);\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setIsDesktop(window.innerWidth > 768);\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n  const columns = useMemo(() => {\r\n    if (isDesktop) {\r\n      return localStorage.getItem(\"userTokenname\") === \"admin\"\r\n        ? columnsDesktop\r\n        : columnsDesktopsimple;\r\n    }\r\n    return columnsTablet;\r\n  }, [isDesktop]);\r\n  const [selectedOption1, setSelectedOption1] = useState();\r\n\r\n\r\n  \r\n  const handlePerRowsChange = async (newPerPage, page) => {\r\n    setPerPage(newPerPage);\r\n    setCurrentPage(page);\r\n  };\r\n  const [data, setData] = useState([]);\r\n  const [totalRows, setTotalRows] = useState(0); // تعداد کل ردیف‌ها\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);  // صفحه فعلی\r\n  const [perPage, setPerPage] = useState(10); // تعداد آیتم‌ها در هر صفحه\r\n\r\n  // دریافت داده‌ها از سرور\r\n  const fetchData = async (page, pageSize) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.get(Source.getAddress()+'/api/report', {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('access')}`,\r\n        },\r\n        params: {\r\n          page: page,\r\n          perPage: pageSize,\r\n          delete:0,\r\n          type:\"all\"\r\n        },\r\n      });\r\n      console.log(response);\r\n      setRecords(response.data.data); // داده‌های صفحه جاری\r\n      setTotalRows(response.data.total); // تعداد کل ردیف‌ها\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching data', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // فراخوانی داده‌ها هنگام بارگذاری صفحه یا تغییر صفحه\r\n  useEffect(() => {\r\n    fetchData(currentPage, perPage);\r\n  }, [currentPage, perPage]);\r\n\r\n  // مدیریت تغییر صفحه\r\n  const handlePageChange = page => {\r\n    setCurrentPage(page); // برو به صفحه جدید\r\n  };\r\n\r\n\r\n  return (\r\n    <div\r\n      className=\"container mt-5 w-100 h-100\"\r\n      onClick={(e) => {\r\n        if (\r\n          e.target.className === \"container mt-5 w-100 h-100\" ||\r\n          e.target.className ===\r\n            \"col-12 w-100 row rounded-3 m-3 pe-5 p-1 bg-transparent\"\r\n        ) {\r\n          setOpenEdit(false);\r\n          setPopup(false);\r\n        }\r\n      }}\r\n    >\r\n      <form class=\"row w-100 rounded-3 m-3 p-1 bg-transparent\">\r\n        <div class=\"col-lg-2 col-md-3 col-sm-6 m-1 mt-3\">\r\n          <label for=\"category\">Customer</label>\r\n          <ComboBox\r\n            setSelectedOption={setSelectedOption}\r\n            selectedOption={selectedOption}\r\n            options={belance}\r\n            Onsearch={Onsearch}\r\n            onKeyDown={handleKeyDown}\r\n          />\r\n        </div>\r\n        <div class=\"col-lg-2 col-md-3 col-sm-6 m-0 mb-3 mt-3 ms-3 p-0 pe-4\">\r\n          <label for=\"price\">Amount</label>\r\n          <NumericFormat\r\n            ref={inputRef}\r\n            onKeyDown={handleKeyDown}\r\n            thousandSeparator={true}\r\n            name=\"amount\"\r\n            className=\"form-control\"\r\n            value={formattedValue}\r\n            placeholder=\"0\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div class=\"col-lg-3 col-md-6 col-sm-12 m-2 mt-3 ps-2 p-0 pe-3\">\r\n          <div class=\"form-floating\">\r\n            <textarea\r\n              onKeyDown={handleKeyDown}\r\n              name=\"discription\"\r\n              class=\"form-control h-50\"\r\n              placeholder=\"Leave a comment here\"\r\n              id=\"floatingTextarea2\"\r\n              value={AddDeposite.discription}\r\n              onChange={handleDeposite}\r\n            ></textarea>\r\n            <label for=\"floatingTextarea2\">Discription</label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-lg-3 col-md-6 col-sm-12  mt-3 ps-3 p-0\">\r\n        <label htmlFor=\"category\">Type</label>\r\n            <select\r\n              name=\"type\"\r\n              id=\"category\"\r\n              onChange={handleDeposite}\r\n              value={AddDeposite.type}\r\n              className=\"form-select w-50\"\r\n            >\r\n              <option value=\"deposite\">Deposite</option>\r\n              <option value=\"withdraw\">Withdraw</option>\r\n            </select>\r\n        </div>\r\n        <div\r\n          class=\"col-lg-1 col-md-3 col-sm-6 p-0 ps-0 ms-0\"\r\n          style={{ marginTop: \"2.3rem\" }}\r\n        >\r\n          <button\r\n            onClick={() => {\r\n              SumbitReport();\r\n            }}\r\n            ref={buttonRef}\r\n            type=\"button\"\r\n            class=\"btn btn-success w-100\"\r\n          >\r\n            ADD\r\n          </button>\r\n        </div>\r\n      </form>\r\n\r\n      <div\r\n        className=\"bg-light d-flex flex-column flex-lg-row justify-content-lg-between align-items-start align-items-lg-center\"\r\n        style={{ borderTop: \"5px solid #4a5cf2\" }}\r\n      >\r\n        <h2 className=\"m-2 fw-bold mb-4\">All Transactions</h2>\r\n        <div className=\"d-flex flex-column flex-lg-row align-items-start align-items-lg-center\">\r\n          <div className=\"mb-2 mb-lg-0 me-lg-2\">\r\n            <Datepicker\r\n              onKeyDown={Hanlderef}\r\n              default_value={StartDate}\r\n              settings={settings}\r\n              handle_date={(e) => setStartDate(e)}\r\n              lebal={\"Start\"}\r\n            />\r\n          </div>\r\n          <div className=\"mb-2 mb-lg-0 me-lg-2\">\r\n            <Datepicker\r\n              onKeyDown={Hanlderef}\r\n              default_value={EndDate}\r\n              settings={settings}\r\n              handle_date={(e) => setEndDate(e)}\r\n              lebal={\"End\"}\r\n            />\r\n          </div>\r\n          <button\r\n            ref={filterRef}\r\n            onClick={() => {\r\n              filterDeposite();\r\n            }}\r\n            type=\"button\"\r\n            className=\"btn btn-success mb-2 mb-lg-0 w-100 w-lg-50 h-50\"\r\n            style={{ marginTop: \"2rem\" }}\r\n          >\r\n            Filter\r\n          </button>\r\n\r\n          <select\r\n            id=\"\"\r\n            name=\"gender\"\r\n            className=\"form-select mb-2 mb-lg-0 ms-lg-5 mt-4\"\r\n            style={{ width: \"100%\", maxWidth: \"200px\" }}\r\n            value={select_user}\r\n            onChange={ChangeUser}\r\n          >\r\n            <option value={\"all users\"} style={{ height: \"100px\" }} selected>\r\n              All Users\r\n            </option>\r\n            {user.map((item) => (\r\n              <option value={item.name} key={item.name}>\r\n                <p> {item.name}</p>\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <input\r\n          className=\"form-control m-2 mb-2 mt-4\"\r\n          style={{ width: \"100%\", maxWidth: \"200px\" }}\r\n          type=\"search\"\r\n          onChange={handleFilter}\r\n          placeholder=\"Search\"\r\n          aria-label=\"Search\"\r\n        />\r\n      </div>\r\n\r\n      {/* <DataTable\r\n        onRowClicked={handleshow}\r\n        columns={columns}\r\n        data={records}\r\n        striped\r\n        responsive\r\n        highlightOnHover\r\n        pagination\r\n      /> */}\r\n            <DataTable\r\n      // title=\"Server Side Data Table\"\r\n      columns={columns}\r\n      data={records}\r\n      progressPending={loading}\r\n      onRowClicked={handleshow}\r\n        striped\r\n        responsive\r\n        highlightOnHover\r\n      pagination\r\n      paginationServer // فعال‌سازی صفحه‌بندی سرور ساید\r\n      paginationTotalRows={totalRows} // تعداد کل ردیف‌ها\r\n      onChangePage={handlePageChange} // تغییر صفحه\r\n      onChangeRowsPerPage={handlePerRowsChange} // تغییر تعداد ردیف‌ها در صفحه\r\n    />\r\n \r\n      <Edit_deposite\r\n        useRef1={editeRef}\r\n        setSelectedOption={setSelectedOption1}\r\n        selectedOption={selectedOption1}\r\n        money={money}\r\n        accounts={accounts}\r\n        setAccounts={setAccounts}\r\n        records={records}\r\n        setRecords={setRecords}\r\n        handleKeyDown={handleKeyDown}\r\n        setCash={setCash}\r\n        Cash={Cash}\r\n        belance={belance}\r\n        setbelance={setbelance}\r\n        account={account}\r\n        setAccount={setAccount}\r\n        Diversity={Diversity}\r\n        setDiversity={setDiversity}\r\n        selectedDay={selectedDayE}\r\n        setselectedDay={setSelectedDayE}\r\n        EndDate={EndDateE}\r\n        Edit_Deposit={EditDeposit}\r\n        setEditDeposit={setEditDeposit}\r\n        settings={settings}\r\n        handle_date={handle_date}\r\n        // lebal={\"Date\"}\r\n        setSelectedDay={setSelectedDayE}\r\n        open={OpenEdit}\r\n        closeEdit={() => setOpenEdit(false)}\r\n      />\r\n      {/* {edit && (\r\n        <AccountEdit\r\n          close={() => setEdit(false)}\r\n          account={editAccount}\r\n          setAccount={setEditAccount}\r\n        />\r\n      )} */}\r\n\r\n      {/* <img style={{height:'6%',width:'6%'}} className=\"p-0\" src={Add}/> */}\r\n      {/* {(\r\n        <Belance\r\n          close={() => setOpenBelance(false)}\r\n          id={id}\r\n          accountbelance={editAccount}\r\n        />\r\n      )} */}\r\n      {addAccountModal && (\r\n        <AddAccount close={() => setAddAccountModal(false)} />\r\n      )}\r\n      {alert && <Alert />}\r\n    </div>\r\n  );\r\n}\r\n"],"names":["formatNumber","number","toLocaleString","AllTransactions","_ref","user","settings","accounts","setAccounts","useState","money","setmoney","Cash","setCash","belance","setbelance","deposite","setdeposite","selectedDay","setSelectedDay","moment","open","setopen","alert","setalert","records","setRecords","Ddate","setDdate","utils","getToday","de_id","setde_id","OpenEdit","setOpenEdit","EditDeposit","setEditDeposit","id","account","date","amount","discription","type","customer","moneyType","cash","isdelete","user_name","moneyid","cashreport","setcashreport","report_delete","Setreport_delete","moneytype","setmoneytype","EndDateE","setEndDateE","idbelance","setidbelance","selectedBelance","setselectedBelance","account_name","moneyId","date_created","openBelance","setOpenBelance","edit","setEdit","editAccount","setEditAccount","setId","addAccountModal","setAddAccountModal","StartDate","setStartDate","EndDate","setEndDate","username","setusername","moneyname","setmoneyname","AddDeposite","setAddDeposite","SumbitReport","Date","pri","primary","primar","parseInt","moneyinsert","updatemoney","record","find","item","sum","cach","name","uploadDatamoney","String","ontransaction","uploadData","add_deposite","user_id","account_id","axios","post","concat","Source","getAddress","headers","localStorage","getItem","then","response","add","data","report","put","res","Swal","position","icon","title","showConfirmButton","timer","setSelectedOption","datetime","jalaliDate12","year","getFullYear","month","getMonth","day","getDay","isoString","toISOString","_objectSpread","setFormattedValue","add_cash","map","a","update_money","existense","catch","err","error","primary1","updatemoney1","prevRecords","prevBelance","prevcash","formattedValue","handleDeposite","e","target","value","Popup","setPopup","useMemo","result","window","innerWidth","useEffect","get","params","delete","d","formattedDate","padStart","getDate","hours","getHours","minutes","getMinutes","aa","formattedHours","formattedMinutes","format","columnsDesktopsimple","_jsx","style","width","children","selector","row","minWidth","padding","justifyContent","textAlign","maxWidth","className","columnsDesktop","ShowDeposit","backgroundColor","_jsxs","onClick","async","swalWithBootstrapButtons","customClass","confirmButton","cancelButton","buttonsStyling","fire","text","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","isConfirmed","amount_delete","belacne_delete_primary","belance_amount","belance_delete","money_delete_primary","cash_primary","money_delete","prevCash","update","filter","dismiss","cancel","delete_report","border","height","src","Trash","columnsTablet","sortable","setValue","select_user","setselect_user","selectedOption","buttonRef","useRef","filterRef","selectedDayE","setSelectedDayE","Diversity","setDiversity","setAccount","editeRef","handleKeyDown","key","preventDefault","current","click","Hanlderef","inputRef","inputElement","document","querySelector","setTimeout","focus","select","isDesktop","setIsDesktop","handleResize","addEventListener","removeEventListener","columns","selectedOption1","setSelectedOption1","setData","totalRows","setTotalRows","loading","setLoading","currentPage","setCurrentPage","perPage","setPerPage","page","pageSize","total","fetchData","class","for","ComboBox","options","Onsearch","prevState","belanceName","onKeyDown","NumericFormat","ref","thousandSeparator","placeholder","onChange","unformattedValue","replace","htmlFor","marginTop","borderTop","Datepicker","default_value","handle_date","lebal","filterDeposite","startDate","endDate","setDate","newData","toLowerCase","includes","selected","DataTable","progressPending","onRowClicked","news","isNaN","getTime","Error","jalaali","gregorianMoment","prev","striped","responsive","highlightOnHover","pagination","paginationServer","paginationTotalRows","onChangePage","onChangeRowsPerPage","newPerPage","Edit_deposite","useRef1","setselectedDay","Edit_Deposit","jalaliDate","now","t","closeEdit","AddAccount","close","Alert"],"sourceRoot":""}