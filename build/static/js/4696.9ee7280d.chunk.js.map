{"version":3,"file":"static/js/4696.9ee7280d.chunk.js","mappings":"2gBAqCA,MAAMA,EAAgBC,GACbA,aAAM,EAANA,EAAQC,iBAGF,SAASC,EAAQC,GAG5B,IAH6B,KAC/BC,GAEDD,EACC,MAAME,GAAYC,EAAAA,EAAAA,MA+BZ,SAAEC,EAAQ,QAAEC,IAAYC,EAAAA,EAAAA,IAAaC,GAAUA,EAAMH,WACpDI,EAAcC,IAAmBC,EAAAA,EAAAA,aAClC,MAAEC,EAAK,QAAEC,IAAYN,EAAAA,EAAAA,IAAaC,GAAUA,EAAMI,QACjDE,EAAYC,IAAiBJ,EAAAA,EAAAA,aAC7BK,EAAYC,IAAiBN,EAAAA,EAAAA,aAC7BO,EAAUC,IAAeR,EAAAA,EAAAA,aAyDzBS,EAASC,IAAcV,EAAAA,EAAAA,UAAS,KAChCW,EAAUC,IAAeZ,EAAAA,EAAAA,UAAS,KAClCa,EAAUC,IAAed,EAAAA,EAAAA,UAAS,KAClCe,EAAaC,IAAkBhB,EAAAA,EAAAA,UAASiB,QACxCC,EAAMC,IAAWnB,EAAAA,EAAAA,WAAS,IAC1BoB,EAAOC,IAAYrB,EAAAA,EAAAA,WAAS,IAC5BsB,EAASC,IAAcvB,EAAAA,EAAAA,UAAS,KAEhCwB,EAAOC,KADOC,EAAAA,EAAAA,IAAM,MAAMC,YACP3B,EAAAA,EAAAA,UAAS,QAC5B4B,GAAOC,KAAY7B,EAAAA,EAAAA,UAAS,IAC5B8B,GAAUC,KAAe/B,EAAAA,EAAAA,WAAS,IAClCgC,GAAaC,KAAkBjC,EAAAA,EAAAA,UAAS,CAC7CkC,GAAI,EACJC,QAAS,EACTC,KAAM,GACNC,OAAQ,EACRC,YAAa,GACbC,KAAM,GACNC,SAAU,GACVC,UAAW,GACXC,KAAM,EAENC,QAASC,aAAaC,QAAQ,eAC9BC,UAAW,GACXC,QAAS,KAEJC,GAAYC,KAAiBjD,EAAAA,EAAAA,UAAS,IACtCkD,GAAeC,KAAoBnD,EAAAA,EAAAA,UAAS,CACjDmC,QAAS,GACTC,KAAM,8BACNC,OAAQ,EACRC,YAAa,GACbC,KAAM,WACNG,KAAM,IAMFU,IAAOC,EAAAA,EAAAA,KAEPC,GAAgBC,UACpBxB,IAAY,GACZ,MAAMyB,EAA2BC,IAAAA,MAAW,CAC1CC,YAAa,CACXC,cAAe,kBACfC,aAAc,kBAEhBC,gBAAgB,IAGZC,QAAeN,EAAyBO,KAAK,CACjDC,MAAOZ,GAAKa,cAAc,CAAC/B,GAAG,kBAEtBgC,KAAKd,GAAKa,cAAc,CAAC/B,GAAG,sCAE5BiC,KAAM,UACNC,kBAAkB,EAClBC,kBAAmBjB,GAAKa,cAAc,CAAC/B,GAAG,oBAE1CoC,iBAAkBlB,GAAKa,cAAc,CAAC/B,GAAG,gBAEzCqC,gBAAgB,IAG1B,GAAIT,EAAOU,YAAa,CACtB,MAAMC,EAAa,IAAIC,SACvBD,EAAWE,OAAO,UAAW,OAC7BF,EAAWE,OAAO,WAAW,GAE7BC,EAAAA,EACGC,KAAKC,EAAAA,EAAOC,aAAY,eAAAC,OAAkBC,EAAI/C,IAAMuC,EAAY,CAC/DS,OAAQ,CAAE3C,KAAM,UAChB4C,QAAS,CACPC,cAAc,UAADJ,OAAYpC,aAAaC,QAAQ,cAIjDwC,KAAMC,IAEL7B,IAAAA,KAAU,CACR8B,SAAU,SACVpB,KAAM,UAENH,MAAM,WAADgB,OACM5B,GAAKa,cAAc,CAAC/B,GAAG,kCAElCsD,mBAAmB,EACnBC,MAAO,MAGTlE,EAAYmE,GACVA,EAAYC,OAAQC,GAAWA,EAAO1D,KAAO+C,EAAI/C,KAMnDxB,EAAYmF,GACVA,EAAYC,IAAKC,GACfA,EAAE7D,KAAOoD,EAAIU,KAAKvF,QAAQyB,GAAKoD,EAAIU,KAAKvF,QAAUsF,MAOvDE,MAAOC,IAENzC,IAAAA,KAAU,CACR8B,SAAU,SACVpB,KAAM,QACNH,MAAOZ,GAAKa,cAAc,CAAC/B,GAAG,yBAE9BsD,mBAAmB,EACnBC,MAAO,OAKf,MAAW3B,EAAOqC,UAAY1C,IAAAA,cAAmB2C,QAC/C3C,IAAAA,KAAU,CACR8B,SAAU,SACVpB,KAAM,QACND,KAAKd,GAAKa,cAAc,CAAC/B,GAAG,2BAC5BsD,mBAAmB,EACnBC,MAAO,QAKNY,GAAWC,KAAgBtG,EAAAA,EAAAA,UAAS,IACpCuG,GAAUC,KAAexG,EAAAA,EAAAA,UAAS,OAClCyG,GAAWC,KAAgB1G,EAAAA,EAAAA,UAAS,IACpC2G,GAAiBC,KAAsB5G,EAAAA,EAAAA,UAAS,CACrDkC,GAAI,EACJ2E,aAAc,GACdpE,UAAW,GACXqE,WAAY,EACZC,QAAS,EACTpE,QAAS,EACTJ,KAAM,EACN9B,QAAS,EACTuG,aAAc,MAETC,GAAaC,KAAkBlH,EAAAA,EAAAA,WAAS,IACxCmH,GAAMC,KAAWpH,EAAAA,EAAAA,WAAS,IAC1BqH,GAAaC,KAAkBtH,EAAAA,EAAAA,UAAS,OACxCkC,GAAIqF,KAASvH,EAAAA,EAAAA,UAAS,KACtBwH,GAAiBC,KAAsBzH,EAAAA,EAAAA,WAAS,IAChD0H,GAAWC,KAAgB3H,EAAAA,EAAAA,UAAS,KACpC4H,GAASC,KAAc7H,EAAAA,EAAAA,UAAS,KAChC8H,GAAUC,KAAe/H,EAAAA,EAAAA,UAAS,KAClCgI,GAAWC,KAAgBjI,EAAAA,EAAAA,UAAS,KACpCkI,GAAQC,KAAanI,EAAAA,EAAAA,UAAS,UAC9BoI,GAAaC,KAAkBrI,EAAAA,EAAAA,UAAS,CAC7C2C,QAASC,aAAaC,QAAQ,eAC9BP,YAAa,GACbD,OAAQ,GACRD,MAAM,IAAIkG,MAAOC,cACjBzB,WAAY,EACZvE,KAAM,WACNG,KAAM,KAQD8F,GAAWC,KAAgBzI,EAAAA,EAAAA,UAAS,IACpC0I,GAASC,KAAc3I,EAAAA,EAAAA,WAAS,IAChC4I,GAAaC,KAAkB7I,EAAAA,EAAAA,UAAS,IACxC8I,GAASC,KAAc/I,EAAAA,EAAAA,UAAS,KA+BvCgJ,EAAAA,EAAAA,WAAU,KA5BQzF,OAAO0F,EAAMC,KAC7BP,IAAW,GACX,IACE,MAAMQ,QAAiBvE,EAAAA,EAAMwE,IAAItE,EAAAA,EAAOC,aAAe,cAAe,CACpEI,QAAS,CACPC,cAAc,UAADJ,OAAYpC,aAAaC,QAAQ,YAEhDqC,OAAQ,CACNvC,QAAS7C,EAAaoC,GACtB+G,KAAMA,EACNH,QAASI,EACTG,OAAQ,EACR3B,UAAWA,IAAarH,EACxBuH,QAASA,IAAWrH,EACpB2H,OAAQ/H,SAAAA,EAAYmJ,OAASnJ,EAAa,QAC1CoC,KAAM,cAGVhB,EAAW4H,EAASnD,KAAKA,MACzByC,GAAaU,EAASnD,KAAKuD,OAC3BZ,IAAW,EACb,CAAE,MAAOa,GAEPb,IAAW,EACb,GAKAc,CAAUb,GAAaE,KACtB,CAACF,GAAaE,GAASlB,GAASF,GAAW5H,EAAcK,IAG5D,MAgMOuJ,GAAgBC,KAAqB3J,EAAAA,EAAAA,UAAS,KAqB9C4J,GAAOC,KAAY7J,EAAAA,EAAAA,WAAS,GA6H7BoC,KA3HM0H,EAAAA,EAAAA,SAAShG,GACfiG,OAAOC,WAAa,KA0HZC,IACZ,MAAM7H,EAAOnB,IAAAA,IAAWgJ,GACxB,IAAIC,EAAa,GAAAlF,OAAM5C,EAAK+H,OAAM,KAAAnF,OAAIoF,OAAOhI,EAAKiI,QAAU,GAAGC,SAC7D,EACA,KACD,KAAAtF,OAAIoF,OAAOhI,EAAKA,QAAQkI,SAAS,EAAG,MACrC,MAAMC,EAAQnI,EAAKmI,QACbC,EAAUpI,EAAKoI,UAErB,IAAIC,EADSF,GAAS,GAAK,KAAO,KAElC,MAAMG,EAAiBH,EAAQ,IAAM,GAC/BI,EAAmBH,EAAU,GAAK,IAAMA,EAAUA,EAUxD,MARyB,YAArB9K,EAAS,GAAG0C,MACdnB,IAAAA,OAAc,MACdwJ,EAAKF,GAAS,GAAK,MAAQ,MAC3BL,EAAgBjJ,IAAAA,IAAWgJ,GAAGW,OAAO,kBAErC3J,IAAAA,OAAc,MAGV,GAAN+D,OAAUkF,EAAa,KAAAlF,OAAI0F,EAAc,KAAA1F,OAAI2F,EAAgB,KAAA3F,OAAIyF,KAqC7DI,GAAuB,CAC3B,CACEC,MAAMC,EAAAA,EAAAA,KAAA,UAAQC,MAAO,CAAEC,MAAO,OAAQC,SAAC,OACvCC,SAAWlG,GAAQA,EAAI/C,GAEvB8I,MAAO,CACLC,MAAO,MACPG,SAAU,SAId,CACEN,MAAMC,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,kBACdC,SAAWlG,GAAQA,EAAIzC,SACvBwI,MAAO,CACLK,QAAS,WACTC,eAAgB,OAChBC,UAAW,WAIf,CACET,MACEC,EAAAA,EAAAA,KAAA,UACEC,MAAO,CAAEI,SAAU,QAASI,SAAU,QAASP,MAAO,SAAUC,SACjE,iBAIHC,SAAWlG,GAAQ7C,GAAK6C,EAAI7C,MAC5B4I,MAAO,CACLI,SAAU,kBACVI,SAAU,UASd,CACEV,MAAMC,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,eACdC,SAAWlG,GAAQA,EAAIxC,WAGzB,CACEqI,MAAMC,EAAAA,EAAAA,KAAA,UAAQU,UAAU,mBAAkBP,SAAC,WAC3CC,SAAWlG,GAAQ/F,EAAa+F,EAAI5C,QAEpC2I,MAAO,CACLO,UAAW,WAIf,CACET,MAAMC,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,gBACdC,SAAWlG,GAAQA,EAAI3C,aAEzB,CACEwI,MAAMC,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,iBACdC,SAAWlG,GAAQ/F,EAAa+F,EAAIvC,QAIlCgJ,GAAiB,CACrB,CACEZ,MAAMC,EAAAA,EAAAA,KAAA,UAAQC,MAAO,CAAEC,MAAO,OAAQC,SAAC,OACvCC,SAAWlG,GAAQA,EAAI/C,GAEvB8I,MAAO,CACLC,MAAO,MACPG,SAAU,SAId,CACEN,MAAMC,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,kBACdC,SAAWlG,GAAQA,EAAIzC,SACvBwI,MAAO,CACLK,QAAS,WACTC,eAAgB,OAChBC,UAAW,WAIf,CACET,MACEC,EAAAA,EAAAA,KAAA,UACEC,MAAO,CAAEI,SAAU,QAASI,SAAU,QAASP,MAAO,SAAUC,SACjE,iBAIHC,SAAWlG,GAAQ7C,GAAK6C,EAAI7C,MAC5B4I,MAAO,CACLI,SAAU,QACVI,SAAU,UAQd,CACEV,MAAMC,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,eACdC,SAAWlG,GAAQA,EAAIxC,WAGzB,CACEqI,MAAMC,EAAAA,EAAAA,KAAA,UAAQU,UAAU,mBAAkBP,SAAC,WAC3CC,SAAWlG,GAAQ/F,EAAa+F,EAAI5C,QAEpC2I,MAAO,CACLO,UAAW,WAIf,CACET,MAAMC,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,gBACdC,SAAWlG,GAAQA,EAAI3C,aAMzB,CACEwI,MAAMC,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,cACdC,SAAWlG,GAAQA,EAAInC,WAEzB,CACEgI,MACEC,EAAAA,EAAAA,KAAA,UACEC,MAAO,CACLO,UAAW,SACXI,gBAAiB,eACjBV,MAAO,QACPC,SACH,WAIHC,SAAWlG,IACT8F,EAAAA,EAAAA,KAAA,UACEa,QAASA,KACPtI,GAAc2B,IAKhB+F,MAAO,CACLa,OAAQ,OACRF,gBAAiB,cACjBG,OAAQ,QACRZ,UAEFH,EAAAA,EAAAA,KAAA,OACEe,OAAQ,MACRb,MAAO,MACPc,IAAKC,EACLhB,MAAO,CAAEW,gBAAiB,sBAM9BM,GAAW,CASf,CACEnB,MACEC,EAAAA,EAAAA,KAAA,UACEC,MAAO,CACLO,UAAW,SACXI,gBAAiB,eACjBV,MAAO,QACPC,UAEFH,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,aAGzBiJ,SAAWlG,IACT8F,EAAAA,EAAAA,KAAA,UACEa,QAASA,KACPtI,GAAc2B,IAKhB+F,MAAO,CACLa,OAAQ,OACRF,gBAAiB,cACjBG,OAAQ,QACRZ,UAEFH,EAAAA,EAAAA,KAAA,OACEe,OAAQ,MACRb,MAAO,MACPc,IAAKC,EACLhB,MAAO,CAAEW,gBAAiB,qBAKlC,CACEb,MACEqB,EAAAA,EAAAA,MAAA,UAAAjB,SAAA,CACG,KACDH,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,cAGzBiJ,SAAWlG,GAAQA,EAAInC,WAGzB,CACEgI,MACEC,EAAAA,EAAAA,KAAA,UAAAG,UACEH,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,kBAGzBiJ,SAAWlG,GAAQA,EAAI3C,aAGzB,CACEwI,MACEC,EAAAA,EAAAA,KAAA,UAAQU,UAAU,mBAAkBP,UAClCH,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,aAGzBiJ,SAAWlG,GAAQ/F,EAAa+F,EAAI5C,QAEpC2I,MAAO,CACLO,UAAW,WAKf,CACET,MACEC,EAAAA,EAAAA,KAAA,UAAAG,UACEH,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,eAGzBiJ,SAAWlG,GAAQA,EAAIxC,WAGzB,CACEqI,MACEC,EAAAA,EAAAA,KAAA,UACEC,MAAO,CAAEI,SAAU,QAASI,SAAU,QAASP,MAAO,SAAUC,UAEhEH,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,mBAGzBiJ,SAAWlG,GAAQ7C,GAAK6C,EAAI7C,MAC5B4I,MAAO,CACLI,SAAU,QACVI,SAAU,UAMd,CACEV,MACEqB,EAAAA,EAAAA,MAAA,UAAAjB,SAAA,CACG,KACDH,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,qBAGzBiJ,SAAWlG,GAAQA,EAAIzC,SACvBwI,MAAO,CACLK,QAAS,WACTC,eAAgB,OAChBC,UAAW,WAKf,CACET,MACEC,EAAAA,EAAAA,KAAA,UAAQC,MAAO,CAAEC,MAAO,OAAQC,UAC9BH,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,SAGzBiJ,SAAWlG,GAAQA,EAAI/C,GAEvB8I,MAAO,CACLC,MAAO,MACPG,SAAU,UAIVgB,GAAgB,CAEpB,CACEtB,MAAMC,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,aACdC,SAAWlG,GAAQA,EAAIzC,SACvB6J,UAAU,GAEZ,CACEvB,MAAMC,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,eACdC,SAAWlG,GAAQA,EAAIxC,UACvB4J,UAAU,GAEZ,CACEvB,MAAMC,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,WACdC,SAAWlG,GAAQA,EAAI5C,QAQzB,IAGKiK,GAAOC,KAAYvM,EAAAA,EAAAA,UAAS,KAwC5BwM,GAAaC,KAAkBzM,EAAAA,EAAAA,UAAS,KAkBxC0M,GAAgBC,KAAqB3M,EAAAA,EAAAA,YAEtC4M,IAAYC,EAAAA,EAAAA,QAAO,OAGlBC,GAAcC,MAFHF,EAAAA,EAAAA,QAAO,OAEe7M,EAAAA,EAAAA,cAEjCgN,GAAWC,KAAgBjN,EAAAA,EAAAA,aAC3BmC,GAAS+K,KAAclN,EAAAA,EAAAA,YACxBmN,IAAWN,EAAAA,EAAAA,QAAO,MAoClBO,GAAeC,IACnB,GAAIA,EAAY,CACd,MAAM,KAAElD,EAAI,MAAEE,EAAK,IAAEiD,GAAQD,EAEvBE,GADgBC,IAAAA,YAAoBrD,EAAME,EAAOiD,GAC3C,IAAIhF,MAGVmF,GAFQrD,OAAOmD,EAAIG,YAAYpD,SAAS,EAAG,KACjCF,OAAOmD,EAAII,cAAcrD,SAAS,EAAG,KAC3C,IAAIhC,MAQRsF,EAPO,IAAItF,KACf+E,EAAWlD,KACXkD,EAAWhD,MAAQ,EACnBgD,EAAWC,IACXG,EAAEC,WACFD,EAAEE,cAEmBpF,cACvBF,IAAcwF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACXzF,IAAW,IACdhG,KAAMwL,IAEV,GAEIE,GAAiB5H,IACP,UAAVA,EAAE6H,MAEJ7H,EAAE8H,iBACEpB,GAAUqB,SACZrB,GAAUqB,QAAQC,UAclBC,IAAWtB,EAAAA,EAAAA,QAAO,OAExB7D,EAAAA,EAAAA,WAAU,KACR,MAAMoF,EAAeC,SAASC,cAAc,iBACxCF,GACFG,WAAW,KACTH,EAAaI,QACbJ,EAAaK,UACZ,IAEJ,IAMH,MAAOC,GAAWC,KAAgB3O,EAAAA,EAAAA,UAAS+J,OAAOC,WAAa,MAC/DhB,EAAAA,EAAAA,WAAU,KACR,MAAM4F,EAAeA,KACnBD,GAAa5E,OAAOC,WAAa,MAInC,OADAD,OAAO8E,iBAAiB,SAAUD,GAC3B,IAAM7E,OAAO+E,oBAAoB,SAAUF,IACjD,IAEH,MAAMG,IAAUjF,EAAAA,EAAAA,SAAQ,IAEiB,OAArClH,aAAaC,QAAQ,aACgB,OAArCD,aAAaC,QAAQ,YAEdoJ,GAAS+C,UAEdN,GAC+C,UAA1C9L,aAAaC,QAAQ,iBACxB6I,GACAb,GAECuB,GACN,CAACsC,MACGO,GAAiBC,KAAsBlP,EAAAA,EAAAA,aACvCmP,GAAeC,KAAoBpP,EAAAA,EAAAA,aAK1CgJ,EAAAA,EAAAA,WAAU,MAwBHmG,IAAiBA,GAAc7F,OAAS,EAC3C5I,EAAW,IAxBK6C,WAChB,IACE,MAAM4F,QAAiBvE,EAAAA,EAAMwE,IAAI,GAADpE,OAAIF,EAAAA,EAAOC,aAAY,gBAAgB,CACrEI,QAAS,CACPC,cAAc,UAADJ,OAAYpC,aAAaC,QAAQ,YAEhDqC,OAAQ,CAAEmK,MAAOF,GAAeG,GAAI,QAEtC5O,EAAWyI,EAASnD,MACPmD,EAASnD,IAQxB,CAAE,MAAOwD,GAET,GAQAC,IAGD,CAAC0F,KACJ,MAAM,cAAElL,KAAkBZ,EAAAA,EAAAA,KACpBkM,GAAe,CACnBC,WAAY,CAERC,aAAY1E,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,mBACnCwN,UAAU3E,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,aAC/ByN,MAAM5E,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,SAC3B+G,MAAM8B,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,WAmB/B,OACEiK,EAAAA,EAAAA,MAAA,OACEV,UAAU,6BACVG,QAAU1F,IAEiB,+BAAvBA,EAAE0J,OAAOnE,WAEP,2DADFvF,EAAE0J,OAAOnE,YAGT1J,IAAY,GACZ8H,IAAS,KAEXqB,SAAA,EAEFiB,EAAAA,EAAAA,MAAA,QACI0D,IAA0C,OAArCjN,aAAaC,QAAQ,YAAuB,MAAQ,MAC7DiN,MAAM,6CAA4C5E,SAAA,EAChDiB,EAAAA,EAAAA,MAAA,OAAK2D,MAAM,sCAAqC5E,SAAA,EAE9CH,EAAAA,EAAAA,KAAA,SAAOgF,IAAI,WAAU7E,UACnBH,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,gBAEvB6I,EAAAA,EAAAA,KAACiF,EAAAA,EAAgB,CACfC,YAAad,GACbe,eAAgBd,GAChBe,kBAvFmBC,IAC3BhB,GAAiBgB,IAwFTzD,kBAAmBA,GACnBD,eAAgBA,GAChB2D,QAAS5P,EACT6P,SAhRQrL,IAKhB,GAJAmK,GAAiBnK,GAIbA,EAAK,CACPgD,GAAahD,EAAIxC,WACjBsF,GAAY9C,EAAI4B,cAChBP,GAAarB,EAAI8B,SACjBL,GAAazB,EAAI/C,IACjB0E,GAAoB2J,IAAS1C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACxB0C,GAAS,IACZrO,GAAI+C,EAAI/C,GACR6E,QAAS9B,EAAI8B,QACbpE,QAASsC,EAAI1F,KACbkD,UAAWwC,EAAIxC,UACfqE,WAAY7B,EAAI9C,QAChB0E,aAAc5B,EAAI4B,aAClBtE,KAAM0C,EAAI1C,KACV9B,QAASwE,EAAIxE,QACbuG,aAAc/B,EAAI+B,gBAEpB,IAAIwJ,EAAcvL,EAAI4B,aAAe,IAAM5B,EAAIxC,UAC/C4F,IAAcwF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACXzF,IAAW,IACdjG,QAAS8C,EAAI/C,MAGf2H,IAAS,GAET0C,GAASiE,EAEX,SAmPIrE,EAAAA,EAAAA,MAAA,OAAK2D,MAAM,yDAAwD5E,SAAA,EACjEH,EAAAA,EAAAA,KAAA,SAAOgF,IAAI,QAAO7E,UAChBH,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,cAEvB6I,EAAAA,EAAAA,KAAC0F,EAAAA,GAAa,CACZC,IAAKvC,GACLwC,UAAW7C,GACX8C,mBAAmB,EACnB9F,KAAK,SACLW,UAAU,oBACVa,MAAO5C,GACPmH,YAAY,IACZC,SApzBY5K,IACpB,MAAMwD,EAAiBxD,EAAE0J,OAAOtD,MAE1ByE,EAAmBrH,EAAesH,QAAQ,KAAM,IAAIA,QAAQ,IAAK,IACvErH,GAAkBD,GAClBrB,IAAcwF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACXzF,IAAW,IACd/F,OAAQ0O,EACRxR,KAAMqD,aAAaC,QAAQ,yBA+yBzBkI,EAAAA,EAAAA,KAAA,OAAK+E,MAAM,qDAAoD5E,UAC7DiB,EAAAA,EAAAA,MAAA,OAAK2D,MAAM,gBAAe5E,SAAA,EACxBH,EAAAA,EAAAA,KAAA,YACE4F,UAAW7C,GACXxB,MAAOlE,GAAY9F,YACnBwO,SAjzBY5K,IACtBmC,IAAcwF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACXzF,IAAW,IACd,CAAClC,EAAE0J,OAAO9E,MAAO5E,EAAE0J,OAAOtD,MAC1B/M,KAAMqD,aAAaC,QAAQ,mBA8yBnBiI,KAAK,cACLgF,MAAM,oBACNe,YAAY,uBACZ3O,GAAG,uBAEL6I,EAAAA,EAAAA,KAAA,SAAOgF,IAAI,oBAAmB7E,UAC5BH,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,wBAI3B6I,EAAAA,EAAAA,KAAA,OAAK+E,MAAM,6CAA4C5E,UACrDH,EAAAA,EAAAA,KAACkG,EAAAA,EAAmB,CAClBN,UAAW7C,GACXoD,cAAetJ,GACflI,SAAUA,EACV0N,YAAaA,GACb+D,OAAOpG,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,SAC5BlB,eAAgBA,EAChBD,YAAaA,OAGjBgK,EAAAA,EAAAA,KAAA,OACE+E,MAAM,2CACN9E,MAAO,CAAEoG,UAAW,UAAWlG,UAE/BH,EAAAA,EAAAA,KAAA,UACEa,QAASA,KAjgCEyF,MAInB,GAA2B,IAAvBjJ,GAAY/F,QAAwC,IAAxB+F,GAAYjG,QAAe,CAYzD,IAAImP,EAAe,CACjB3O,QAASC,aAAaC,QAAQ,eAC9BP,YAAa,GACbD,OAAQ,EACR2E,aAAc,KACdF,WAAY,EACZvE,KAAM,WACNG,KAAM,GAKR4O,EAAajP,OAAS+F,GAAY/F,OAClCiP,EAAahP,YAAc8F,GAAY9F,YACvCgP,EAAatK,aAAeoB,GAAYhG,KACxCkP,EAAaxK,WAAasB,GAAYjG,QACtCmP,EAAa/O,KAAO6F,GAAY7F,KAEhC,MACMqL,GADO,IAAItF,MACMC,cACvB+I,EAAaC,SAAW,EACxB,IAAIC,EAAiBpJ,GACrBC,GAAe,CACb1F,QAASC,aAAaC,QAAQ,eAC9BP,YAAa,GACbD,OAAQ,GACRD,KAAMwL,EACN9G,WAAY,EACZvE,KAAM,WACNG,KAAM,IAGRkC,EAAAA,EACGC,KAAK,GAADG,OAAIF,EAAAA,EAAOC,aAAY,eAAeuM,EAAc,CACvDnM,QAAS,CACPC,cAAc,UAADJ,OAAYpC,aAAaC,QAAQ,cAIjDwC,KAAM8D,IACL,IAAIsI,EAAM,CACRvP,GAAI,EACJY,UAAW,GACXL,UAAW,GACXD,SAAU,GACVG,QAAS,EACTL,YAAa,GACbD,OAAQ,EACR2E,aAAc,KACdF,WAAY,EACZvE,KAAM,WACNG,KAAM,EAENoE,WAAY,EACZC,QAAS,GAEX0K,EAAIvP,GAAKiH,EAASnD,KAAK0L,OAEvBD,EAAItP,QAAUqP,EAAerP,QAC7BsP,EAAI9O,QAAUC,aAAaC,QAAQ,eACnC4O,EAAInP,YAAckP,EAAelP,YACjCmP,EAAIpP,OAASmP,EAAenP,OAC5BoP,EAAIrP,KAAOoP,EAAepP,KAC1BqP,EAAItP,QAAUqP,EAAerP,QAC7BsP,EAAIlP,KAAOiP,EAAejP,KAG1BkP,EAAIjP,SAAWsF,GACf2J,EAAI3O,UAAYF,aAAaC,QAAQ,aACrC4O,EAAIhP,UAAYuF,GAChBzG,EAAW,CAACkQ,KAAQnQ,IACpB9B,EAAU,CACR+F,SAAU,UACVpB,KAAM,UACNH,OAAO+G,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,gCAC5BsD,mBAAmB,EACnBC,MAAO,MAETkH,GAAkB,IAYlBhD,GAAkB,IAClB3I,EAAeC,OACf,IAAI0Q,EAAWxI,EAASnD,KAAKvF,QAU7BC,EAAWD,EAAQqF,IAAKC,GAAOA,EAAE7D,KAAOyP,EAASzP,GAAKyP,EAAW5L,IAG9CoD,EAASnD,KAAK4L,SAWlC3L,MAAOuD,IAENhK,EAAU,CACR+F,SAAU,UACVpB,KAAM,QACNH,OAAO+G,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,mCAE5BsD,mBAAmB,EACnBC,MAAO,QAKf,MAEEjG,EAAU,CACR+F,SAAU,UACVpB,KAAM,QACNH,OAAO+G,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,kDAC5BsD,mBAAmB,EACnBC,MAAO,QA02BD4L,IAEFX,IAAK9D,GACLrK,KAAK,SACLuN,MAAM,wBAAuB5E,UAE7BH,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,gBAK3BiK,EAAAA,EAAAA,MAAA,OACI0D,IAA0C,OAArCjN,aAAaC,QAAQ,YAAuB,MAAQ,MAC3D4I,UAAU,6GACVT,MAAO,CAAE6G,UAAW,qBAAsB3G,SAAA,EAE1CH,EAAAA,EAAAA,KAAA,MAAIU,UAAU,mBAAkBP,UAACH,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,gBAEtDiK,EAAAA,EAAAA,MAAA,OAAKV,UAAU,yEAAwEP,SAAA,EACrFH,EAAAA,EAAAA,KAAA,OAAKU,UAAU,6BAA4BP,UACzCH,EAAAA,EAAAA,KAACkG,EAAAA,EAAmB,CAClBC,cAAexJ,GACf0F,YAzzCeC,IACzB,GAAIA,EAAY,CACd,MAAM,KAAElD,EAAI,MAAEE,EAAK,IAAEiD,GAAQD,EAGvBE,GAFgBC,IAAAA,YAAoBrD,EAAME,EAAOiD,GAE3C,IAAIhF,MACF8B,OAAOmD,EAAIG,YAAYpD,SAAS,EAAG,KACjCF,OAAOmD,EAAII,cAAcrD,SAAS,EAAG,KAGrD,MAAMmD,EAAI,IAAInF,KAURsF,EATO,IAAItF,KACf+E,EAAWlD,KACXkD,EAAWhD,MAAQ,EACnBgD,EAAWC,IACXG,EAAEC,WACFD,EAAEE,cAImBpF,cAEvBjI,EAAcsN,EAEhB,GAkyCUuD,OAAOpG,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,UAC5BlB,eAAgB2G,GAChB5G,YAAa2G,QAGjBqD,EAAAA,EAAAA,KAAA,OAAKU,UAAU,4BAA2BP,UACxCH,EAAAA,EAAAA,KAACkG,EAAAA,EAAmB,CAClBC,cAAetJ,GACfwF,YAxyCaC,IACvB,GAAIA,EAAY,CACd,MAAM,KAAElD,EAAI,MAAEE,EAAK,IAAEiD,GAAQD,EAGvBE,GAFgBC,IAAAA,YAAoBrD,EAAME,EAAOiD,GAE3C,IAAIhF,MACF8B,OAAOmD,EAAIG,YAAYpD,SAAS,EAAG,KACjCF,OAAOmD,EAAII,cAAcrD,SAAS,EAAG,KAGrD,MAAMmD,EAAI,IAAInF,KAURsF,EATO,IAAItF,KACf+E,EAAWlD,KACXkD,EAAWhD,MAAQ,EACnBgD,EAAWC,IACXG,EAAEC,WACFD,EAAEE,cAImBpF,cAEvB/H,EAAYoN,EAEd,GAixCUuD,OAAOpG,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,QAC5BlB,eAAgB6G,GAChB9G,YAAa6G,QAGjBmD,EAAAA,EAAAA,KAAC+G,EAAAA,EAAO,CACNzB,QAASpQ,EACTyM,eAAgB5M,EAChB6M,kBAAmB5M,QAGvBgL,EAAAA,EAAAA,KAAA,SACNU,UAAU,6BACVT,MAAO,CAAEC,MAAO,OAAQO,SAAU,SAClCjJ,KAAK,SACLuO,SA9xCoB5K,IAClB9F,EAAc8F,EAAE0J,OAAOtD,QA8xCzBA,MAAOnM,EACP0Q,YAAa5M,GAAc,CAAE/B,GAAI,WACjC,aAAW,eAGP6I,EAAAA,EAAAA,KAACgH,EAAAA,GACC,CACAC,aA5Tc/M,IAElBlD,IAAY,GACZoL,GAASc,QAAQQ,SACjBvB,GAAWjI,EAAI9C,SACf4K,GAAgB9L,IAAOgE,EAAI7C,OAC3B,IAMI6P,EANA9K,EAAO,CACTN,aAAc5B,EAAIzC,SAClBC,UAAWwC,EAAIxC,WAEjByM,GAAmB/H,GACnB8F,GAAahI,EAAI5C,QAEjB,IAEE,GADA4P,EAAO,IAAI3J,KAAKrD,EAAI7C,MAChB8P,MAAMD,EAAKE,WACb,MAAM,IAAIC,MAAM,eAEpB,CAAE,MAAO5I,GAEP,MACF,CACAyI,EAAKI,QAAQJ,EAAKK,WAEC9E,IAAAA,UACjByE,EAAKM,cACLN,EAAKO,WAAa,EAClBP,EAAKK,WAHP,MAKMG,EAAkBxR,IAAOgR,GAC/BlF,GAAgB0F,GAChBxQ,GAAegD,IA8RX8J,QAASA,GACT/I,KAAM1E,EACNoR,gBAAiBhK,GACjBiK,SAAO,EACPC,YAAU,EACVC,kBAAgB,EAChBrD,YAAU,EACVsD,kBAAgB,EAChBC,oBAAqBvK,GACrBwK,aA3lCoB/J,IACxBJ,GAAeI,IA2lCXgK,oBAxoCsB1P,MAAO2P,EAAYjK,KAC7CF,GAAWmK,GACXrK,GAAeI,IAuoCXsG,aAAcA,GACd4D,aApKe,CASnBC,UAAW,CACTpI,MAAO,CACLqI,WAAY,aA2JdtI,EAAAA,EAAAA,KAACuI,EAAAA,EAAa,CACZC,QAASpG,GACTR,kBAAmBuC,GACnBxC,eAAgBuC,GAIhB3N,QAASA,EACTC,WAAYA,EACZuM,cAAeA,GACfrN,QAASA,EACTC,WAAYA,EACZyB,QAASA,GACT+K,WAAYA,GACZF,UAAWA,GACXC,aAAcA,GACdlM,YAAa+L,GACb0G,eAAgBzG,GAChBnF,QAASrB,GACTkN,aAAczR,GACdC,eAAgBA,GAChBvC,SAAUA,EACV0N,YAAaA,GAEbpM,eAAgB+L,GAChB7L,KAAMY,GACN4R,UAAWA,IAAM3R,IAAY,KAkB9ByF,KACCuD,EAAAA,EAAAA,KAAC4I,EAAAA,EAAU,CAACC,MAAOA,IAAMnM,IAAmB,KAE7CrG,IAAS2J,EAAAA,EAAAA,KAAC8I,EAAAA,EAAK,MAGtB,C,iHCv+CA,MAAM/B,EAAUxS,IAMT,IANU,WACfwU,GAAa,EAAK,QAClBzD,EAAU,GAAE,eACZ3D,EAAc,kBACdC,EAAiB,MACjB1B,EAAQ,QACT3L,EACC,MAAM,cAAE2E,EAAa,OAAE8P,IAAW1Q,EAAAA,EAAAA,KAC5B2Q,EAAmB,OAAXD,EAERE,EAAiB,CACrBnJ,MAAMC,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,CAAChK,GAAG,cAC3BA,GAAI,GAGAgS,EAAiB,CAACD,KAAmB5D,IAE3CrH,EAAAA,EAAAA,WAAU,KACH0D,GACHC,EAAkBsH,IAEnB,CAACvH,EAAgBC,EAAmBsH,IAEvC,MAIMd,EAAe,CACnBgB,QAASA,CAACC,EAAMvU,KAAKgO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAChBuG,GAAI,IACPC,WAAiD,OAArCzR,aAAaC,QAAQ,aAAyB,4BAC1D8I,gBAAiB,OACjB2I,OAAQ,EACRC,aAAc,MACd1I,OAAQhM,EAAM2U,UAAY,oBAAsB,oBAChDC,UAAW5U,EAAM2U,UAAY,iCAAmC,OAChE,UAAW,CACT3I,OAAQ,qBAEV6I,UAAW,OACXrJ,QAAS,UACTE,UAAWyI,EAAQ,QAAU,OAC7BW,UAAWX,EAAQ,MAAQ,QAE7BY,KAAOR,IAAIvG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACNuG,GAAI,IACPC,WAAiD,OAArCzR,aAAaC,QAAQ,aAAyB,4BAC1D0R,aAAc,MACdE,UAAW,kCACXI,SAAU,SACVtJ,UAAWyI,EAAQ,QAAU,OAC7BW,UAAWX,EAAQ,MAAQ,QAE7Bc,OAAQA,CAACV,EAAIW,KAAA,IAAE,UAAEP,EAAS,WAAEQ,GAAYD,EAAA,OAAAlH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACnCuG,GAAI,IACPC,WAAiD,OAArCzR,aAAaC,QAAQ,aAAyB,4BAC1D8I,gBAAiBqJ,EAAa,UAAYR,EAAY,UAAY,OAClES,MAAOD,EAAa,OAAS,UAC7B3J,QAAS2I,EAAQ,qBAAuB,qBACxCkB,OAAQ,UACRC,SAAU,OACV5J,UAAWyI,EAAQ,QAAU,OAC7B,WAAY,CACVrI,gBAAiB,cAGrByJ,YAAchB,IAAIvG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACbuG,GAAI,IACPC,WAAiD,OAArCzR,aAAaC,QAAQ,aAAyB,4BAC1DwQ,WAAY,OACZ4B,MAAO,UACPE,SAAU,OACV5J,UAAWyI,EAAQ,QAAU,OAC7BW,UAAWX,EAAQ,MAAQ,QAE7BnD,YAAcuD,IAAIvG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACbuG,GAAI,IACPC,WAAiD,OAArCzR,aAAaC,QAAQ,aAAyB,4BAC1DsS,SAAU,OACVF,MAAO,UACP1J,UAAWyI,EAAQ,QAAU,OAC7BW,UAAWX,EAAQ,MAAQ,QAE7BqB,kBAAoBjB,IAAIvG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACnBuG,GAAI,IACPC,WAAgD,OAArCzR,aAAaC,QAAQ,aAAyB,4BACzDwI,QAAS,QAEXiK,WAAalB,IAAIvG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWuG,GAAI,IAAEE,OAAQ,MAC1CiB,MAAQnB,IAAIvG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACPuG,GAAI,IACPC,WAAgD,OAArCzR,aAAaC,QAAQ,aAAwB,4BACxD0I,UAAWyI,EAAQ,QAAU,UAIjC,OACEjJ,EAAAA,EAAAA,KAAA,OACEU,UAAS,OACTT,MAAO,CAAEC,SACT4E,IAAKmE,EAAQ,MAAQ,MAAM9I,UAE3BH,EAAAA,EAAAA,KAACyK,EAAAA,GAAM,CACLC,gBAAgB,gBAChBnJ,MAAOI,EACPoE,SAlFgBpE,IACpBC,EAAkBD,IAkFd2D,QAAS6D,EACTwB,eAAiBZ,GAAWA,EAAOhK,KACnC6K,eAAiBb,GAAWA,EAAO5S,GACnC2O,YAAa5M,EAAc,CAAE/B,GAAI,yBAA4B8R,EAAQ,iBAAmB,aACxF4B,aAAa,EACbC,cAAc,EACd/B,WAAYA,EACZgC,iBAAkBzH,SAAS0H,KAC3BC,OAAQ7C,EACR8C,WAAY,CACVC,kBAAmBC,IAAA,IAAC,WAAEC,GAAYD,EAAA,OAChCpL,EAAAA,EAAAA,KAAA,OAAA8C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAASuI,GAAU,IAAE3K,UAAWuI,EAAQ,qBAAuB,qBAAqB9I,UAClFH,EAAAA,EAAAA,KAACsL,EAAAA,EAAW,CAACC,KAAM,SAGvBC,eAAgB,WAoB1BzE,EAAQ0E,aAAe,CACrB1C,YAAY,EACZzD,QAAS,GACT3D,eAAgB,KAChBzB,MAAO,QAGT,S,8ECtJA,MA6DA,EA7DuB3L,IAShB,IATiB,WACtBmX,GAAa,EAAK,QAClBpG,EAAO,SACPC,EAAQ,eACR5D,EAAc,kBAEdC,EAAiB,YACjBsD,EAAW,kBACXE,GACD7Q,EACC,MAyBI,cAAE2E,IAAkBZ,EAAAA,EAAAA,KAExB,OACE0H,EAAAA,EAAAA,KAAA,OAAKU,UAAU,OAAMP,UACnBH,EAAAA,EAAAA,KAACyK,EAAAA,GAAM,CACLC,gBAAgB,gBAChBiB,WAAYzG,EACZ3D,MAAOI,EACPoE,SAjCgB6F,IACpBhK,EAAkBgK,GAClBrG,EAASqG,IAgCLtG,QAASA,EACTuG,cAAezG,EACfuF,eAAiBZ,IACb/J,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAE6L,QAAS,OAAQC,WAAY,UAAW5L,UACpDH,EAAAA,EAAAA,KAAA,QAAAG,SAAA,GAAAlG,OAAU8P,EAAOjO,aAAY,KAAA7B,OAAI8P,EAAOrS,eAE9CkT,eAAiBb,GAAM,GAAA9P,OAAQ8P,EAAOjO,aAAY,KAAA7B,OAAI8P,EAAOrS,WAE7DoO,YAAa5M,EAAc,CAAE/B,GAAI,cACjC0T,aAAW,EACXC,cAAY,EACZ/B,WAAY2C,M","sources":["pages/Deposite.js","pages/forms/ListBox.js","pages/Transformations/ComboBoxDeposite.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { gregorianToJalali } from \"shamsi-date-converter\";\r\nimport Swal from \"sweetalert2\";\r\nimport Alert from \"./forms/Alert\";\r\nimport Datepicker from \"./forms/Datepicker\";\r\nimport Datepicker_Customer from \"./forms/Datepicker_customer\";\r\nimport Datepicker_start from \"./forms/Datepicker_start\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport ReactDOMServer from \"react-dom/server\";\r\nimport axios from \"axios\";\r\nimport AccountEdit from \"./CustomersEdit\";\r\nimport Add from \"../assets/icon/add.png\";\r\nimport Trash from \"../assets/icon/trash.png\";\r\nimport { useRef } from \"react\";\r\nimport Belance from \"./forms/Belance\";\r\nimport AddAccount from \"./AddAccount\";\r\nimport ComboBox from \"./forms/ComboBox\";\r\nimport Source from \"../Source\";\r\nimport { showAlert } from \"../warrper\";\r\nimport moment from \"moment-jalaali\";\r\nimport jalaali from \"jalaali-js\";\r\nimport Edit_deposite from \"./Edit_deposite\";\r\nimport { Calendar } from \"react-modern-calendar-datepicker\";\r\nimport * as shamsi from \"shamsi-date-converter\";\r\n// import DatePicker from \"react-modern-calendar-datepicker\";\r\nimport { NumericFormat } from \"react-number-format\";\r\nimport { utils } from \"react-modern-calendar-datepicker\";\r\nimport { getReports, updateReportInCache } from \"./Redux/reportSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getBelances, updateBelanceInCache } from \"./Redux/belanceSlice\";\r\nimport { getMoneys, updateMoneyInCache } from \"./Redux/moneysSlice\";\r\nimport { getCustomers } from \"./Redux/customerSlice\";\r\nimport ComboBoxDeposite from \"./Transformations/ComboBoxDeposite\";\r\nimport ListBox from \"./forms/ListBox\";\r\n// import { FormattedMessage } from \"react-intl\";\r\nimport { FormattedMessage,useIntl } from \"react-intl\";\r\nimport { useShowAlert  } from \"../warrper\";\r\nconst formatNumber = (number) => {\r\n  return number?.toLocaleString(); // Formats number with thousand separators\r\n};\r\n\r\nexport default function Deposite({\r\n  user,\r\n  // settings\r\n}) {\r\n  const showAlert = useShowAlert(); \r\n  // const dispatch = useDispatch();\r\n  // const { belances, errorb, statusb } = useSelector((state) => state.belances);\r\n  // const { moneys, errorm, statusm } = useSelector((state) => state.moneys);\r\n  // const { customers, errorc, statusc } = useSelector((state) => state.customers);\r\n  // console.log(belances);\r\n  // dispatch(getBelances());\r\n  // useEffect(() => {\r\n  //   // بررسی و بارگذاری `belances`\r\n  //   // console.log(belances);\r\n  //   if (!statusb && !belances) {\r\n  //     console.log('hi')\r\n  //   }\r\n\r\n  //   // // بررسی و بارگذاری `moneys`\r\n  //   // if (statusm === 'idle' && !moneys) {\r\n  //   //   dispatch(getMoneys());\r\n  //   // }\r\n\r\n  //   // // بررسی و بارگذاری `customers`\r\n  //   // if (statusc === 'idle' && !customers) {\r\n  //   //   dispatch(getCustomers());\r\n  //   // }\r\n  // }, [dispatch, statusb]);\r\n  // console.log(statusb);\r\n  // console.log(belances);\r\n  // dispatch(getBelances());\r\n  // console.log(belances);\r\n\r\n  // const [money,setmoney]=useState(moneys);\r\n  // const [Cash,setCash]=useState(moneys);\r\n  const { settings, statuss } = useSelector((state) => state.settings);\r\n  const [selecteduser, setSelecteduser] = useState();\r\n  const { users, statusu } = useSelector((state) => state.users);\r\n  const [namesearch, setnameSearch] = useState();\r\n  const [Date_Start, setDate_start] = useState();\r\n  const [Date_End, setDate_end] = useState();\r\n  const handle_date_start = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n\r\n      // const date = new Date(jalaliDate.year, jalaliDate.month - 1, jalaliDate.day);\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      // setIsoDate(isoString);\r\n      setDate_start(isoString);\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n  const handle_date_end = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n\r\n      // const date = new Date(jalaliDate.year, jalaliDate.month - 1, jalaliDate.day);\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      // setIsoDate(isoString);\r\n      setDate_end(isoString);\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n  const handleName = (e) => {\r\n    setnameSearch(e.target.value);\r\n  };\r\n\r\n  const [belance, setbelance] = useState([]);\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [deposite, setdeposite] = useState([]);\r\n  const [selectedDay, setSelectedDay] = useState(moment());\r\n  const [open, setopen] = useState(true);\r\n  const [alert, setalert] = useState(false);\r\n  const [records, setRecords] = useState([]);\r\n  const persianToday = utils(\"fa\").getToday();\r\n  const [Ddate, setDdate] = useState(null);\r\n  const [de_id, setde_id] = useState(0);\r\n  const [OpenEdit, setOpenEdit] = useState(false);\r\n  const [EditDeposit, setEditDeposit] = useState({\r\n    id: 2,\r\n    account: 0,\r\n    date: \"\",\r\n    amount: 0,\r\n    discription: \"\",\r\n    type: \"\",\r\n    customer: \"\",\r\n    moneyType: \"\",\r\n    cash: 0,\r\n    // isdelete: false,\r\n    user_id: localStorage.getItem(\"userTokenid\"),\r\n    user_name: \"\",\r\n    moneyid: 0,\r\n  });\r\n  const [cashreport, setcashreport] = useState(0);\r\n  const [report_delete, Setreport_delete] = useState({\r\n    account: 15,\r\n    date: \"2024-05-15T15:41:44.888608Z\",\r\n    amount: 0,\r\n    discription: \"\",\r\n    type: \"deposite\",\r\n    cash: 0,\r\n    // isdelete: \"True\",\r\n  });\r\n  // const data = useSelector((state) => state.data.data); // داده‌ها\r\n  // const status = useSelector((state) => state.data.status); // وضعیت بارگذاری\r\n  // const error = useSelector((state) => state.data.error); // خطا\r\n  const intl = useIntl(); // استفاده از هوک useIntl برای دسترسی به ترجمه‌ها\r\n\r\n  const delete_report = async (row) => {\r\n    setOpenEdit(false);\r\n    const swalWithBootstrapButtons = Swal.mixin({\r\n      customClass: {\r\n        confirmButton: \"btn btn-success\",\r\n        cancelButton: \"btn btn-danger\",\r\n      },\r\n      buttonsStyling: false,\r\n    });\r\n\r\n    const result = await swalWithBootstrapButtons.fire({\r\n      title: intl.formatMessage({id:\"Are you sure?\"})\r\n              ,\r\n              text:intl.formatMessage({id:\"You won't be able to revert this!\"})\r\n              ,\r\n              icon: \"warning\",\r\n              showCancelButton: true,\r\n              confirmButtonText: intl.formatMessage({id:\"Yes, delete it!\"})\r\n              ,\r\n              cancelButtonText: intl.formatMessage({id:\"No, cancel!\"})\r\n              ,\r\n              reverseButtons: true,\r\n  });\r\n\r\n    if (result.isConfirmed) {\r\n      const uploadData = new FormData();\r\n      uploadData.append(\"_method\", \"PUT\");\r\n      uploadData.append(\"isdelete\",1);\r\n      \r\n      axios\r\n        .post(Source.getAddress() + `/api/report/${row.id}`, uploadData, {\r\n          params: { type: \"delete\" },\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"access\")}`, // Add the access token here\r\n            // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n          },\r\n        })\r\n        .then((res) => {\r\n          // console.log(res);\r\n          Swal.fire({\r\n            position: \"center\",\r\n            icon: \"success\",\r\n            // title: \"Deposite record successfully deleted !\",\r\n            title: \r\n            `Deposit ${intl.formatMessage({id:\"record successfully deleted!\"})}`\r\n            ,\r\n            showConfirmButton: false,\r\n            timer: 600,\r\n          });\r\n          // console.log(e);\r\n          setRecords((prevRecords) =>\r\n            prevRecords.filter((record) => record.id !== row.id)\r\n          );\r\n          // setCash((prevCash) =>\r\n          //   prevCash.map((a) =>\r\n          //     a.id === res.data.moneys.id ? res.data.moneys : a\r\n          //   ));\r\n          setbelance((prevBelance) =>\r\n            prevBelance.map((a) =>\r\n              a.id === res.data.belance.id ? res.data.belance : a\r\n            )\r\n          );\r\n          // dispatch(updateBelanceInCache(res.data.belance));\r\n          // dispatch(updateReportInCache(res.data.report_belance));\r\n          // dispatch(updateMoneyInCache(res.data.moneys));\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n          Swal.fire({\r\n            position: \"center\",\r\n            icon: \"error\",\r\n            title: intl.formatMessage({id:\"Somethin went wrong!\"})\r\n            ,\r\n            showConfirmButton: false,\r\n            timer: 600,\r\n          });\r\n        });\r\n      // } catch (err) {\r\n      // }\r\n    } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n      Swal.fire({\r\n        position: \"center\",\r\n        icon: \"error\",\r\n        text:intl.formatMessage({id:\"Your record is safe :)\"}) ,\r\n        showConfirmButton: false,\r\n        timer: 600,\r\n      });\r\n    }\r\n  };\r\nconsole.log(localStorage.getItem('access'));\r\n  const [moneytype, setmoneytype] = useState(0);\r\n  const [EndDateE, setEndDateE] = useState(null);\r\n  const [idbelance, setidbelance] = useState(0);\r\n  const [selectedBelance, setselectedBelance] = useState({\r\n    id: 0,\r\n    account_name: \"\",\r\n    moneyType: \"\",\r\n    account_id: 0,\r\n    moneyId: 0,\r\n    user_id: 0,\r\n    type: 0,\r\n    belance: 0,\r\n    date_created: \"\",\r\n  });\r\n  const [openBelance, setOpenBelance] = useState(false);\r\n  const [edit, setEdit] = useState(false);\r\n  const [editAccount, setEditAccount] = useState(null);\r\n  const [id, setId] = useState(\"\");\r\n  const [addAccountModal, setAddAccountModal] = useState(false);\r\n  const [StartDate, setStartDate] = useState(\"\");\r\n  const [EndDate, setEndDate] = useState(\"\");\r\n  const [username, setusername] = useState(\"\");\r\n  const [moneyname, setmoneyname] = useState(\"\");\r\n  const [search, setsearch] = useState(\"false\");\r\n  const [AddDeposite, setAddDeposite] = useState({\r\n    user_id: localStorage.getItem(\"userTokenid\"),\r\n    discription: \"\",\r\n    amount: \"\",\r\n    date: new Date().toISOString(),\r\n    account_id: 0,\r\n    type: \"deposite\",\r\n    cash: 0,\r\n    // isdelete: 0,\r\n  });\r\n  const handlePerRowsChange = async (newPerPage, page) => {\r\n    setPerPage(newPerPage);\r\n    setCurrentPage(page);\r\n  };\r\n  // const [data, setData] = useState([]);\r\n  const [totalRows, setTotalRows] = useState(0); // تعداد کل ردیف‌ها\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1); // صفحه فعلی\r\n  const [perPage, setPerPage] = useState(10); // تعداد آیتم‌ها در هر صفحه\r\n\r\n  // دریافت داده‌ها از سرور\r\n  const fetchData = async (page, pageSize) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.get(Source.getAddress() + \"/api/report\", {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n        },\r\n        params: {\r\n          user_id: selecteduser.id,\r\n          page: page,\r\n          perPage: pageSize,\r\n          delete: 0,\r\n          StartDate: StartDate && Date_Start,\r\n          EndDate: EndDate && Date_End,\r\n          search: namesearch?.length ? namesearch : \"false\",\r\n          type: \"deposite\",\r\n        },\r\n      });\r\n      setRecords(response.data.data); // داده‌های صفحه جاری\r\n      setTotalRows(response.data.total); // تعداد کل ردیف‌ها\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // فراخوانی داده‌ها هنگام بارگذاری صفحه یا تغییر صفحه\r\n  useEffect(() => {\r\n    fetchData(currentPage, perPage);\r\n  }, [currentPage, perPage, EndDate, StartDate, selecteduser, namesearch]);\r\n\r\n  // مدیریت تغییر صفحه\r\n  const handlePageChange = (page) => {\r\n    setCurrentPage(page); // برو به صفحه جدید\r\n  };\r\n  const filterDeposite = () => {};\r\n  // const primary = () => {\r\n  //   if (selectedBelance.belance === \"0\") {\r\n  //     return parseInt(AddDeposite.amount);\r\n  //   } else {\r\n  //     let primar = parseInt(selectedBelance.belance);\r\n  //     primar += parseInt(AddDeposite.amount);\r\n  //     return parseInt(primar);\r\n  //   }\r\n  // };\r\n  // const updatemoney = () => {\r\n  //   const record = Cash.find((item) => item.id === moneytype);\r\n  //   if (record) {\r\n  //     let money = parseInt(AddDeposite.amount);\r\n  //     let primmoney = parseInt(record.cach);\r\n  //     let sum = primmoney + money;\r\n  //     return { name: record.name, cash: sum, user: record.user };\r\n  //   } else {\r\n  //     return { name: \"\", cash: 0 };\r\n  //   }\r\n  // };\r\n  const SumbitReport = () => {\r\n    // dispatch(getReports());\r\n    // dispatch(getBelances());\r\n    // dispatch(getMoneys());\r\n    if (AddDeposite.amount !== 0 && AddDeposite.account !== 0) {\r\n      // let dd = new Date();\r\n      // const pri = primary();\r\n      // const moneyinsert = updatemoney();\r\n      // const uploadDatamoney ={\r\n      //   \"cach\":parseInt(moneyinsert.cash),\r\n      //   \"ontransaction\":1\r\n      // }\r\n      // const uploadData = {\r\n      //   belance:String(pri),\r\n      //   ontransaction:1\r\n      // }\r\n      let add_deposite = {\r\n        user_id: localStorage.getItem(\"userTokenid\"),\r\n        discription: \"\",\r\n        amount: 0,\r\n        date_created: null,\r\n        account_id: 0,\r\n        type: \"deposite\",\r\n        cash: 0,\r\n        // isdelete: 0,\r\n      };\r\n\r\n      // add_deposite.user_id = AddDeposite.user;\r\n      add_deposite.amount = AddDeposite.amount;\r\n      add_deposite.discription = AddDeposite.discription;\r\n      add_deposite.date_created = AddDeposite.date;\r\n      add_deposite.account_id = AddDeposite.account;\r\n      add_deposite.type = AddDeposite.type;\r\n      // add_deposite.cash = moneyinsert.cash;\r\n      const date = new Date();\r\n      const isoString = date.toISOString();\r\n      add_deposite.isdelete = 0;\r\n      let submitdeposite = AddDeposite;\r\n      setAddDeposite({\r\n        user_id: localStorage.getItem(\"userTokenid\"),\r\n        discription: \"\",\r\n        amount: \"\",\r\n        date: isoString,\r\n        account_id: 0,\r\n        type: \"deposite\",\r\n        cash: 0,\r\n        // isdelete: 0,\r\n      });\r\n      axios\r\n        .post(`${Source.getAddress()}/api/report`, add_deposite, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"access\")}`, // Add the access token here\r\n            // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n          },\r\n        })\r\n        .then((response) => {\r\n          let add = {\r\n            id: 0,\r\n            user_name: \"\",\r\n            moneyType: \"\",\r\n            customer: \"\",\r\n            user_id: 0,\r\n            discription: \"\",\r\n            amount: 0,\r\n            date_created: null,\r\n            account_id: 0,\r\n            type: \"deposite\",\r\n            cash: 0,\r\n            // isdelete: 0,\r\n            account_id: 0,\r\n            moneyId: 0,\r\n          };\r\n          add.id = response.data.report;\r\n\r\n          add.account = submitdeposite.account;\r\n          add.user_id = localStorage.getItem(\"userTokenid\");\r\n          add.discription = submitdeposite.discription;\r\n          add.amount = submitdeposite.amount;\r\n          add.date = submitdeposite.date;\r\n          add.account = submitdeposite.account;\r\n          add.type = submitdeposite.type;\r\n          // add.cash = moneyinsert.cash;\r\n          // add.isdelete = AddDeposite.isdelete;\r\n          add.customer = username;\r\n          add.user_name = localStorage.getItem(\"userToken\");\r\n          add.moneyType = moneyname;\r\n          setRecords([add, ...records]);\r\n          showAlert({\r\n            position: \"top-end\",\r\n            icon: \"success\",\r\n            title: <FormattedMessage id=\"Your record has been added!\" />,\r\n            showConfirmButton: false,\r\n            timer: 1000,\r\n          });\r\n          setSelectedOption(\"\");\r\n          // setAddDeposite({\r\n          //   ...AddDeposite,\r\n          //   user: 0,\r\n          //   discription: \"\",\r\n          //   amount: 0,\r\n          //   date: isoString,\r\n          //   account: 0,\r\n          //   type: \"deposite\",\r\n          //   cash: 0,\r\n          //   // isdelete: \"False\",\r\n          // });\r\n          setFormattedValue(\"\");\r\n          setSelectedDay(moment());\r\n          let add_cash = response.data.belance;\r\n          // add_cash.id = selectedBelance.id;\r\n          // add_cash.account_name = selectedBelance.account_name;\r\n          // add_cash.moneyId = selectedBelance.moneyId;\r\n          // add_cash.moneyType = selectedBelance.moneyType;\r\n          // add_cash.account = selectedBelance.account;\r\n          // add_cash.type = selectedBelance.type;\r\n          // add_cash.belance = pri;\r\n          // add_cash.date_created = selectedBelance.date_created;\r\n          // add_cash.user = selectedBelance.user;\r\n          setbelance(belance.map((a) => (a.id === add_cash.id ? add_cash : a)));\r\n          // dispatch(updateBelanceInCache(add_cash));\r\n          // dispatch(updateReportInCache(response.data.report_belance));\r\n          let update_money = response.data.moneys;\r\n          // update_money.name = moneyinsert.name;\r\n          // update_money.id = moneytype;\r\n          // update_money.cach = moneyinsert.cash;\r\n          // update_money.user = moneyinsert.user;\r\n          // setCash(\r\n          //   Cash.map((a) => (a.id === update_money.id ? update_money : a))\r\n          // );\r\n          // dispatch(updateMoneyInCache(update_money));\r\n          // fetch(Source.getAddress() + \"/api/belance/\" + `${idbelance}/`, {\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          showAlert({\r\n            position: \"top-end\",\r\n            icon: \"error\",\r\n            title: <FormattedMessage id=\"Not working ,please try again!\" />\r\n            ,\r\n            showConfirmButton: false,\r\n            timer: 1500,\r\n          });\r\n        });\r\n\r\n      // console.log(AddDeposite);\r\n    } else {\r\n      // setError(true);\r\n      showAlert({\r\n        position: \"top-end\",\r\n        icon: \"error\",\r\n        title: <FormattedMessage id=\"You must fill Customer name and Amount input!\" />,\r\n        showConfirmButton: false,\r\n        timer: 1500,\r\n      });\r\n    }\r\n  };\r\n\r\n  const convertToKabulTime = (dateStr) => {\r\n    const dateObj = new Date(dateStr);\r\n\r\n    // Set the time zone to Kabul (UTC+4:30)\r\n    dateObj.setMinutes(dateObj.getMinutes() + 540); // Kabul is UTC+4:30\r\n\r\n    // Format the date object into the desired string format\r\n    const formattedDateStr = dateObj.toISOString().slice(0, 16);\r\n\r\n    return formattedDateStr;\r\n  };\r\n  const [formattedValue, setFormattedValue] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    const formattedValue = e.target.value;\r\n    // Remove the thousand separators (commas)\r\n    const unformattedValue = formattedValue.replace(/,/g, \"\").replace(\"$\", \"\");\r\n    setFormattedValue(formattedValue);\r\n    setAddDeposite({\r\n      ...AddDeposite,\r\n      amount: unformattedValue,\r\n      user: localStorage.getItem(\"userTokenid\"),\r\n    });\r\n  };\r\n  const handleDeposite = (e) => {\r\n    setAddDeposite({\r\n      ...AddDeposite,\r\n      [e.target.name]: e.target.value,\r\n      user: localStorage.getItem(\"userTokenid\"),\r\n    });\r\n  };\r\n\r\n  const [Popup, setPopup] = useState(false);\r\n  // const [Settings, setSettings] = useState([]);\r\n  const res = useMemo((result) => {\r\n    if (window.innerWidth > 768) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  });\r\n  // useEffect(()=>{\r\n  //   axios.get(Source.getAddress() + '/api/money', {\r\n  //     headers: {\r\n  //       'Authorization': `Bearer ${localStorage.getItem('access')}`,\r\n  //     },params: {\r\n  //       delete: 0,\r\n  //     },\r\n  //   }).then((res)=>{\r\n  //     setmoney(res.data);\r\n  //     setCash(res.data);\r\n  //   }).catch((err)=>{\r\n  //     console.log(err);\r\n  //   });\r\n  // },[]);\r\n  // useEffect(()=>{\r\n  //   axios.get(Source.getAddress() + '/api/belance', {\r\n  //     headers: {\r\n  //       'Authorization': `Bearer ${localStorage.getItem('access')}`,\r\n  //     },\r\n  //   params: {\r\n  //       delete: 'False',\r\n  //     },\r\n  //   }).then((res)=>{\r\n  //     console.log('hi')\r\n  //     setbelance(res.data);\r\n  //   }).catch((err)=>{\r\n  //     console.log(err);\r\n  //   });\r\n  //  },[]);\r\n\r\n  // useEffect(() => {\r\n  //   axios.get(Source.getAddress() + '/api/customers', {\r\n  //     headers: {\r\n  //       'Authorization': `Bearer ${localStorage.getItem('access')}`,\r\n  //     },params: {\r\n  //       delete: 'False',\r\n  //     },\r\n  //   }).then((res)=>{\r\n  //     setAccounts(res.data);\r\n  //   }).catch((err)=>{\r\n  //     console.log(err);\r\n  //   });\r\n\r\n  // },[]);\r\n\r\n  // useEffect(() => {\r\n\r\n  //   const startDate = new Date();\r\n  //   const endDate = new Date();\r\n  //   startDate.setDate(startDate.getDate() - 30);\r\n  //   endDate.setDate(endDate.getDate() + 1);\r\n  //   axios.get(Source.getAddress() + '/api/report', {\r\n  //   headers:{\r\n  //     Authorization: `Bearer ${localStorage.getItem('access')}`,\r\n  //   },\r\n  //   // params: {\r\n  //   //   delete:'False',\r\n  //   //   startDate: startDate.toISOString(),\r\n  //   //   endDate: endDate.toISOString(),\r\n  //   //   type:'deposite'\r\n  //   // },\r\n  //   }).then((res)=>{\r\n  //   console.log(res);\r\n  //   // setRecords(res.data);\r\n  //   setdeposite(res.data);\r\n  //   }).catch((err)=>{\r\n  //   console.log(err);\r\n  //   })\r\n\r\n  //   let news = new Date();\r\n  //   let mmm = news.toISOString().slice(0, 16);\r\n  //   let to = convertToKabulTime(mmm);\r\n  //   const jalaliDate1 = jalaali.toJalaali(\r\n  //     news.getFullYear(),\r\n  //     news.getMonth() + 1,\r\n  //     news.getDate()\r\n  //   );\r\n\r\n  //   news.setDate(news.getDate() - 1);\r\n  //   const jalaliDate = jalaali.toJalaali(\r\n  //     news.getFullYear(),\r\n  //     news.getMonth() + 1,\r\n  //     news.getDate()\r\n  //   );\r\n\r\n  //   if (settings[0].date === \"Persian\") {\r\n  //     setStartDate(\r\n  //       moment({\r\n  //         day: jalaliDate1.jd,\r\n  //         month: jalaliDate1.jm,\r\n  //         year: jalaliDate1.jy,\r\n  //       })\r\n  //     );\r\n  //     setEndDate(\r\n  //       moment({\r\n  //         day: jalaliDate.jd,\r\n  //         month: jalaliDate.jm,\r\n  //         year: jalaliDate.jy,\r\n  //       })\r\n  //     );\r\n  //   } else {\r\n  //     setStartDate(\r\n  //       moment({\r\n  //         day: String(news.getDate()).padStart(2, \"0\"),\r\n  //         month: String(news.getMonth() + 1).padStart(2, \"0\"),\r\n  //         year: news.getFullYear(),\r\n  //       })\r\n  //     );\r\n  //     setEndDate(moment(news));\r\n  //   }\r\n  // }, []);\r\n\r\n  const handleRowClick = (row) => {\r\n    setEditAccount(row);\r\n    setEdit(true);\r\n  };\r\n  const date = (d) => {\r\n    const date = moment.utc(d); // تبدیل تاریخ بدون در نظر گرفتن تایم زون\r\n    let formattedDate = `${date.year()}-${String(date.month() + 1).padStart(\r\n      2,\r\n      \"0\"\r\n    )}-${String(date.date()).padStart(2, \"0\")}`;\r\n    const hours = date.hours();\r\n    const minutes = date.minutes();\r\n    const ampm = hours >= 12 ? \"pm\" : \"am\";\r\n    let aa = ampm;\r\n    const formattedHours = hours % 12 || 12;\r\n    const formattedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n\r\n    if (settings[0].date === \"Persian\") {\r\n      moment.locale(\"fa\"); // تنظیم لوکال به فارسی\r\n      aa = hours >= 12 ? \"ب.ظ\" : \"ق.ظ\";\r\n      formattedDate = moment.utc(d).format(\"jYYYY-jMM-jDD\");\r\n    } else {\r\n      moment.locale(\"en\");\r\n    }\r\n\r\n    return `${formattedDate} ${formattedHours}:${formattedMinutes} ${aa}`;\r\n  };\r\n\r\n  const handleViewBelance = (row) => {\r\n    const filteredBelance = belance.filter((item) => item.account === row.id);\r\n    setEditAccount(filteredBelance);\r\n    setId(row.id);\r\n    setOpenBelance(true);\r\n  };\r\n\r\n  const handleFilter = (e) => {\r\n    // console.log(accounts);\r\n    // const newData = deposite.filter((row) => {\r\n    //   if (typeof row.customer === \"string\") {\r\n    //     if (\r\n    //       row.customer.toLowerCase().includes(e.target.value.toLowerCase()) ||\r\n    //       row.moneyType.toLowerCase().includes(e.target.value.toLowerCase()) ||\r\n    //       row.amount === e.target.value\r\n    //     ) {\r\n    //       return row.customer;\r\n    //     }\r\n    //   }\r\n    //   return false;\r\n    // });\r\n    // setRecords(newData);\r\n    setsearch(e.target.value.toLowerCase());\r\n  };\r\n\r\n  const convertToHijriShamsi = (gregorianDate) => {\r\n    const [jalaliYear, jalaliMonth, jalaliDay] = gregorianToJalali(\r\n      new Date(gregorianDate)\r\n    );\r\n\r\n    const hijriShamsiDate = `${jalaliYear}/${jalaliMonth}/${jalaliDay}`;\r\n\r\n    return hijriShamsiDate;\r\n  };\r\n  const columnsDesktopsimple = [\r\n    {\r\n      name: <strong style={{ width: \"1px\" }}>ID</strong>,\r\n      selector: (row) => row.id,\r\n      //  sortable: true\r\n      style: {\r\n        width: \"1px\",\r\n        minWidth: \"10px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: <strong>Customer Name</strong>,\r\n      selector: (row) => row.customer,\r\n      style: {\r\n        padding: \"0px 20px\",\r\n        justifyContent: \"left\",\r\n        textAlign: \"center\",\r\n      },\r\n      // sortable: true\r\n    },\r\n    {\r\n      name: (\r\n        <strong\r\n          style={{ minWidth: \"200px\", maxWidth: \"240px\", width: \"240px\" }}\r\n        >\r\n          Date Created\r\n        </strong>\r\n      ),\r\n      selector: (row) => date(row.date),\r\n      style: {\r\n        minWidth: \"190px!important\", // Adjust this value as needed\r\n        maxWidth: \"200px\", // Adjust this value as needed\r\n        // margin:'0px'\r\n        // Width: '600px',    // Set a specific width\r\n      },\r\n      // sortable: true,\r\n    },\r\n    // { name: <strong>Time Created</strong>, selector: (row) => time(row.date_created),\r\n    // //  sortable: true\r\n    // },\r\n    {\r\n      name: <strong>Money Type</strong>,\r\n      selector: (row) => row.moneyType,\r\n      //  sortable: true\r\n    },\r\n    {\r\n      name: <strong className=\"w-50 text-center\">Amount</strong>,\r\n      selector: (row) => formatNumber(row.amount),\r\n      //  sortable: true\r\n      style: {\r\n        textAlign: \"center\",\r\n        // minWidth:'100px',\r\n      },\r\n    },\r\n    {\r\n      name: <strong>Description</strong>,\r\n      selector: (row) => row.discription,\r\n    },\r\n    {\r\n      name: <strong>Cash Belance</strong>,\r\n      selector: (row) => formatNumber(row.cash),\r\n    },\r\n  ];\r\n\r\n  const columnsDesktop = [\r\n    {\r\n      name: <strong style={{ width: \"1px\" }}>ID</strong>,\r\n      selector: (row) => row.id,\r\n      //  sortable: true\r\n      style: {\r\n        width: \"1px\",\r\n        minWidth: \"10px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: <strong>Customer Name</strong>,\r\n      selector: (row) => row.customer,\r\n      style: {\r\n        padding: \"0px 20px\",\r\n        justifyContent: \"left\",\r\n        textAlign: \"center\",\r\n      },\r\n      // sortable: true\r\n    },\r\n    {\r\n      name: (\r\n        <strong\r\n          style={{ minWidth: \"170px\", maxWidth: \"200px\", width: \"200px\" }}\r\n        >\r\n          Date Created\r\n        </strong>\r\n      ),\r\n      selector: (row) => date(row.date),\r\n      style: {\r\n        minWidth: \"170px\", // Adjust this value as needed\r\n        maxWidth: \"200px\", // Adjust this value as needed\r\n        // Width: '600px',    // Set a specific width\r\n      },\r\n      // sortable: true,\r\n    },\r\n    // { name: <strong>Time Created</strong>, selector: (row) => time(row.date_created),\r\n    // //  sortable: true\r\n    // },\r\n    {\r\n      name: <strong>Money Type</strong>,\r\n      selector: (row) => row.moneyType,\r\n      //  sortable: true\r\n    },\r\n    {\r\n      name: <strong className=\"w-50 text-center\">Amount</strong>,\r\n      selector: (row) => formatNumber(row.amount),\r\n      //  sortable: true\r\n      style: {\r\n        textAlign: \"center\",\r\n        // minWidth:'100px',\r\n      },\r\n    },\r\n    {\r\n      name: <strong>Description</strong>,\r\n      selector: (row) => row.discription,\r\n    },\r\n    // {\r\n    //   name: <strong>Cash Belance</strong>,\r\n    //   selector: (row) => formatNumber(row.cash),\r\n    // },\r\n    {\r\n      name: <strong>Added by </strong>,\r\n      selector: (row) => row.user_name,\r\n    },\r\n    {\r\n      name: (\r\n        <strong\r\n          style={{\r\n            textAlign: \"center\",\r\n            backgroundColor: \"tranceparent\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          Delete\r\n        </strong>\r\n      ),\r\n      selector: (row) => (\r\n        <button\r\n          onClick={() => {\r\n            delete_report(row);\r\n            // setEdit(row);\r\n            // setUpdate(true);\r\n            // seTtitle('Edit Type Money');\r\n          }}\r\n          style={{\r\n            border: \"none\",\r\n            backgroundColor: \"transparent\",\r\n            height: \"100%\",\r\n          }}\r\n        >\r\n          <img\r\n            height={\"15%\"}\r\n            width={\"15%\"}\r\n            src={Trash}\r\n            style={{ backgroundColor: \"tranceparent\" }}\r\n          />\r\n        </button>\r\n      ),\r\n    },\r\n  ];\r\n  const PDcolumn = [\r\n    // { name: <strong>Time Created</strong>, selector: (row) => time(row.date_created),\r\n    // //  sortable: true\r\n    // },\r\n\r\n    // {\r\n    //   name: <strong>Cash Belance</strong>,\r\n    //   selector: (row) => formatNumber(row.cash),\r\n    // },\r\n    {\r\n      name: (\r\n        <strong\r\n          style={{\r\n            textAlign: \"center\",\r\n            backgroundColor: \"tranceparent\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <FormattedMessage id=\"Delete\" />\r\n        </strong>\r\n      ),\r\n      selector: (row) => (\r\n        <button\r\n          onClick={() => {\r\n            delete_report(row);\r\n            // setEdit(row);\r\n            // setUpdate(true);\r\n            // seTtitle('Edit Type Money');\r\n          }}\r\n          style={{\r\n            border: \"none\",\r\n            backgroundColor: \"transparent\",\r\n            height: \"100%\",\r\n          }}\r\n        >\r\n          <img\r\n            height={\"15%\"}\r\n            width={\"15%\"}\r\n            src={Trash}\r\n            style={{ backgroundColor: \"tranceparent\" }}\r\n          />\r\n        </button>\r\n      ),\r\n    },\r\n    {\r\n      name: (\r\n        <strong>\r\n          {\" \"}\r\n          <FormattedMessage id=\"Add By\" />\r\n        </strong>\r\n      ),\r\n      selector: (row) => row.user_name,\r\n    },\r\n\r\n    {\r\n      name: (\r\n        <strong>\r\n          <FormattedMessage id=\"Description\" />\r\n        </strong>\r\n      ),\r\n      selector: (row) => row.discription,\r\n    },\r\n\r\n    {\r\n      name: (\r\n        <strong className=\"w-50 text-center\">\r\n          <FormattedMessage id=\"Amount\" />\r\n        </strong>\r\n      ),\r\n      selector: (row) => formatNumber(row.amount),\r\n      //  sortable: true\r\n      style: {\r\n        textAlign: \"center\",\r\n        // minWidth:'100px',\r\n      },\r\n    },\r\n\r\n    {\r\n      name: (\r\n        <strong>\r\n          <FormattedMessage id=\"Currency\" />\r\n        </strong>\r\n      ),\r\n      selector: (row) => row.moneyType,\r\n      //  sortable: true\r\n    },\r\n    {\r\n      name: (\r\n        <strong\r\n          style={{ minWidth: \"170px\", maxWidth: \"200px\", width: \"200px\" }}\r\n        >\r\n          <FormattedMessage id=\"Date Created\" />\r\n        </strong>\r\n      ),\r\n      selector: (row) => date(row.date),\r\n      style: {\r\n        minWidth: \"170px\", // Adjust this value as needed\r\n        maxWidth: \"200px\", // Adjust this value as needed\r\n        // Width: '600px',    // Set a specific width\r\n      },\r\n      // sortable: true,\r\n    },\r\n\r\n    {\r\n      name: (\r\n        <strong>\r\n          {\" \"}\r\n          <FormattedMessage id=\"Customer Name\" />\r\n        </strong>\r\n      ),\r\n      selector: (row) => row.customer,\r\n      style: {\r\n        padding: \"0px 20px\",\r\n        justifyContent: \"left\",\r\n        textAlign: \"center\",\r\n      },\r\n      // sortable: true\r\n    },\r\n\r\n    {\r\n      name: (\r\n        <strong style={{ width: \"1px\" }}>\r\n          <FormattedMessage id=\"ID\" />\r\n        </strong>\r\n      ),\r\n      selector: (row) => row.id,\r\n      //  sortable: true\r\n      style: {\r\n        width: \"1px\",\r\n        minWidth: \"10px\",\r\n      },\r\n    },\r\n  ];\r\n  const columnsTablet = [\r\n    // { name: \"Id\", selector: (row) => row.id, sortable: true },\r\n    {\r\n      name: <strong>Customer</strong>,\r\n      selector: (row) => row.customer,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: <strong>Money Type</strong>,\r\n      selector: (row) => row.moneyType,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: <strong>Amount</strong>,\r\n      selector: (row) => row.amount,\r\n    },\r\n    // {\r\n    //   name: \"Date Created\",\r\n    //   selector: (row) => date(row.date),\r\n    //   sortable: true,\r\n    // },\r\n    // { name: \"belance\", selector: (row) => row.belance, sortable: true },\r\n    // { name: \"discription\", selector: (row) => row.discription, sortable: true },\r\n    ,\r\n  ];\r\n  const [value, setValue] = useState(\"\");\r\n  const onChange = (row) => {\r\n    setPopup(true);\r\n    setValue(row.target.value);\r\n  };\r\n\r\n  const Onsearch = (row) => {\r\n    setSearchQueryTo(row);\r\n    // This gives you the ISO string in UTC\r\n    // setIsoDate(isoString);\r\n\r\n    if (row) {\r\n      setmoneyname(row.moneyType);\r\n      setusername(row.account_name);\r\n      setmoneytype(row.moneyId);\r\n      setidbelance(row.id);\r\n      setselectedBelance((prevState) => ({\r\n        ...prevState,\r\n        id: row.id,\r\n        moneyId: row.moneyId,\r\n        user_id: row.user,\r\n        moneyType: row.moneyType,\r\n        account_id: row.account,\r\n        account_name: row.account_name,\r\n        type: row.type,\r\n        belance: row.belance, // Assuming 'belance' is correct, it seems like a typo\r\n        date_created: row.date_created,\r\n      }));\r\n      let belanceName = row.account_name + \" \" + row.moneyType;\r\n      setAddDeposite({\r\n        ...AddDeposite,\r\n        account: row.id,\r\n        // date:isoString,\r\n      });\r\n      setPopup(false);\r\n      // console.log(belanceName)\r\n      setValue(belanceName);\r\n      // console.log('s  earch ',row);\r\n    }\r\n  };\r\n  const [select_user, setselect_user] = useState(\"\");\r\n  const ChangeUser = (e) => {\r\n    if (e.target.value !== \"all users\") {\r\n      const newData = deposite.filter((row) => {\r\n        if (typeof row.user_name === \"string\") {\r\n          return row.user_name\r\n            .toLowerCase()\r\n            .includes(e.target.value.toLowerCase());\r\n        }\r\n        return false;\r\n      });\r\n      setRecords(newData);\r\n    } else {\r\n      setRecords(deposite);\r\n    }\r\n    setselect_user(e.target.value);\r\n  };\r\n  // console.log(AddDeposite)\r\n  const [selectedOption, setSelectedOption] = useState();\r\n\r\n  const buttonRef = useRef(null);\r\n  const filterRef = useRef(null);\r\n\r\n  const [selectedDayE, setSelectedDayE] = useState();\r\n\r\n  const [Diversity, setDiversity] = useState();\r\n  const [account, setAccount] = useState();\r\n  const editeRef = useRef(null);\r\n  const handleshow = (row) => {\r\n    console.log(row);\r\n    setOpenEdit(true);\r\n    editeRef.current.select();\r\n    setAccount(row.account);\r\n    setSelectedDayE(moment(row.date));\r\n    let edit = {\r\n      account_name: row.customer,\r\n      moneyType: row.moneyType,\r\n    };\r\n    setSelectedOption1(edit);\r\n    setDiversity(row.amount);\r\n    let news;\r\n    try {\r\n      news = new Date(row.date);\r\n      if (isNaN(news.getTime())) {\r\n        throw new Error(\"Invalid date\");\r\n      }\r\n    } catch (error) {\r\n      // console.error('Invalid date format:', row.date);\r\n      return;\r\n    }\r\n    news.setDate(news.getDate());\r\n\r\n    const jalaliDate = jalaali.toJalaali(\r\n      news.getFullYear(),\r\n      news.getMonth() + 1,\r\n      news.getDate()\r\n    );\r\n    const gregorianMoment = moment(news);\r\n    setSelectedDayE(gregorianMoment);\r\n    setEditDeposit(row);\r\n    // EditDeposit.account_id=row.account;\r\n    // console.log(row);\r\n  };\r\n  const handle_date = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      setAddDeposite({\r\n        ...AddDeposite,\r\n        date: isoString,\r\n      });\r\n    }\r\n  };\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      // Check if the Enter key was pressed\r\n      e.preventDefault(); // Prevent default action if needed\r\n      if (buttonRef.current) {\r\n        buttonRef.current.click(); // Programmatically click the button\r\n      }\r\n    }\r\n  };\r\n  const Hanlderef = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      // Check if the Enter key was pressed\r\n      e.preventDefault(); // Prevent default action if needed\r\n      if (filterRef.current) {\r\n        filterRef.current.click(); // Programmatically click the button\r\n      }\r\n    }\r\n  };\r\n\r\n  const inputRef = useRef(null); // Create a ref for the input field\r\n\r\n  useEffect(() => {\r\n    const inputElement = document.querySelector(\".form-control\"); // Use the class or other selector\r\n    if (inputElement) {\r\n      setTimeout(() => {\r\n        inputElement.focus(); // Focus the input field\r\n        inputElement.select(); // Select the text in the input field\r\n      }, 0);\r\n    }\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n\r\n  // }, [Edit_Deposit.date, settings, setEndDate]);\r\n\r\n  const [isDesktop, setIsDesktop] = useState(window.innerWidth > 768);\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setIsDesktop(window.innerWidth > 768);\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  const columns = useMemo(() => {\r\n    if (\r\n      localStorage.getItem(\"language\") === \"pa\" ||\r\n      localStorage.getItem(\"language\") === \"da\"\r\n    ) {\r\n      return PDcolumn.reverse();\r\n    }\r\n    if (isDesktop) {\r\n      return localStorage.getItem(\"userTokenname\") === \"admin\"\r\n        ? columnsDesktop\r\n        : columnsDesktopsimple;\r\n    }\r\n    return columnsTablet;\r\n  }, [isDesktop]);\r\n  const [selectedOption1, setSelectedOption1] = useState();\r\n  const [SearchQueryTo, setSearchQueryTo] = useState();\r\n  const handleInputChangeTo = (newValue) => {\r\n    setSearchQueryTo(newValue); // بروزرسانی مقدار ورودی جستجو\r\n    // handleSearchTo(newValue); // ارسال درخواست جستجو به سرور\r\n  };\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(`${Source.getAddress()}/api/belance`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n          },\r\n          params: { query: SearchQueryTo, do: \"ok\" }, // ارسال پارامتر جستجو به سرور\r\n        });\r\n        setbelance(response.data);\r\n        const data = response.data;\r\n        console.log(data);\r\n\r\n        // if (data && data.length === 0) {\r\n        //   setSelectedOptionTo({ id: 0, name: searchQueryTo });\r\n        // } else {\r\n        //   setOptionsTo(data); // ذخیره داده‌ها برای نمایش در لیست\r\n        // }\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    // if(selectedOption){\r\n    if (!SearchQueryTo || SearchQueryTo.length < 3) {\r\n      setbelance([]);\r\n      return;\r\n    } else {\r\n      fetchData();\r\n    }\r\n    // }\r\n  }, [SearchQueryTo]); // اضافه کردن searchQuery به وابستگی‌های useEffect\r\n  const { formatMessage } = useIntl();\r\n  const localization = {\r\n    pagination: {\r\n        \r\n        rowsPerPage:<FormattedMessage id=\"AddrowsPerPage\"/> , // مثلا: \"تعداد ردیف‌ها\"\r\n      previous: <FormattedMessage id=\"previous\"/>, // مثلا: \"قبلی\"\r\n      next: <FormattedMessage id=\"next\"/>, // مثلا: \"بعدی\"\r\n      page: <FormattedMessage id=\"page\"/>, // مثلا: \"صفحه\"\r\n    },\r\n    // شما می‌توانید تنظیمات بیشتر برای متون مورد نظر اضافه کنید.\r\n  };\r\n  const customStyles = {\r\n    // headRow: {\r\n    //   style: {\r\n    //     backgroundColor: '#f8f9fa', // رنگ پس‌زمینه هدر\r\n        // fontWeight: 'bold', // ضخامت فونت\r\n        // fontSize: '16px', // اندازه فونت\r\n    //     borderBottom: '2px solid #dee2e6', // خط پایین هدر\r\n    //   },\r\n    // },\r\n    headCells: {\r\n      style: {\r\n        fontWeight: 'bold', // ضخامت فونت // اندازه فونت\r\n        },\r\n    },\r\n  };\r\n  return (\r\n    <div\r\n      className=\"container mt-5 w-100 h-100\"\r\n      onClick={(e) => {\r\n        if (\r\n          e.target.className === \"container mt-5 w-100 h-100\" ||\r\n          e.target.className ===\r\n            \"col-12 w-100 row rounded-3 m-3 pe-5 p-1 bg-transparent\"\r\n        ) {\r\n          setOpenEdit(false);\r\n          setPopup(false);\r\n        }\r\n      }}\r\n    >\r\n      <form \r\n          dir={localStorage.getItem(\"language\") === \"en\" ? \"ltr\" : \"rtl\"}\r\n      class=\"row w-100 rounded-3 m-3 p-1 bg-transparent\">\r\n        <div class=\"col-lg-2 col-md-3 col-sm-6 m-1 mt-3\" \r\n        >\r\n          <label for=\"category\">\r\n            <FormattedMessage id=\"Customer\" />\r\n          </label>\r\n          <ComboBoxDeposite\r\n            searchQuery={SearchQueryTo}\r\n            setSearchQuery={setSearchQueryTo}\r\n            handleInputChange={handleInputChangeTo}\r\n            // handleSearch={handleSearchTo}\r\n            setSelectedOption={setSelectedOption}\r\n            selectedOption={selectedOption}\r\n            options={belance}\r\n            Onsearch={Onsearch}\r\n          />\r\n        </div>\r\n        <div class=\"col-lg-2 col-md-3 col-sm-6 m-0 mb-3 mt-3 ms-3 p-0 pe-4\">\r\n          <label for=\"price\">\r\n            <FormattedMessage id=\"Amount\" />\r\n          </label>\r\n          <NumericFormat\r\n            ref={inputRef}\r\n            onKeyDown={handleKeyDown}\r\n            thousandSeparator={true}\r\n            name=\"amount\"\r\n            className=\"form-control h-50\"\r\n            value={formattedValue}\r\n            placeholder=\"0\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div class=\"col-lg-3 col-md-6 col-sm-12 m-2 mt-3 ps-2 p-0 pe-3\">\r\n          <div class=\"form-floating\">\r\n            <textarea\r\n              onKeyDown={handleKeyDown}\r\n              value={AddDeposite.discription}\r\n              onChange={handleDeposite}\r\n              name=\"discription\"\r\n              class=\"form-control h-50\"\r\n              placeholder=\"Leave a comment here\"\r\n              id=\"floatingTextarea2\"\r\n            ></textarea>\r\n            <label for=\"floatingTextarea2\">\r\n              <FormattedMessage id=\"Description\" />\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-lg-3 col-md-6 col-sm-12  mt-3 ps-3 p-0\">\r\n          <Datepicker_Customer\r\n            onKeyDown={handleKeyDown}\r\n            default_value={EndDate}\r\n            settings={settings}\r\n            handle_date={handle_date}\r\n            lebal={<FormattedMessage id=\"Date\" />}\r\n            setSelectedDay={setSelectedDay}\r\n            selectedDay={selectedDay}\r\n          ></Datepicker_Customer>\r\n        </div>\r\n        <div\r\n          class=\"col-lg-1 col-md-3 col-sm-6 p-0 ps-0 ms-0\"\r\n          style={{ marginTop: \"2.3rem\" }}\r\n        >\r\n          <button\r\n            onClick={() => {\r\n              SumbitReport();\r\n            }}\r\n            ref={buttonRef}\r\n            type=\"button\"\r\n            class=\"btn btn-success w-100\"\r\n          >\r\n            <FormattedMessage id=\"Add\" />\r\n          </button>\r\n        </div>\r\n      </form>\r\n\r\n      <div\r\n          dir={localStorage.getItem(\"language\") === \"en\" ? \"ltr\" : \"rtl\"}\r\n        className=\"bg-light d-flex flex-column flex-lg-row justify-content-lg-between align-items-start align-items-lg-center\"\r\n        style={{ borderTop: \"5px solid #4a5cf2\" }}\r\n      >\r\n        <h2 className=\"m-2 fw-bold mb-4\"><FormattedMessage id=\"Deposite\"/>\r\n        </h2>\r\n        <div className=\"d-flex flex-column flex-lg-row align-items-start align-items-lg-center\">\r\n          <div className=\"mb-1 mb-lg-0 me-lg-2 mt-1 \">\r\n            <Datepicker_Customer\r\n              default_value={StartDate}\r\n              handle_date={handle_date_start}\r\n              lebal={<FormattedMessage id=\"Start\"/>}\r\n              setSelectedDay={setStartDate}\r\n              selectedDay={StartDate}\r\n            ></Datepicker_Customer>\r\n          </div>\r\n          <div className=\"mb-1 mt-1 mb-lg-0 me-lg-2\">\r\n            <Datepicker_Customer\r\n              default_value={EndDate}\r\n              handle_date={handle_date_end}\r\n              lebal={<FormattedMessage id=\"End\"/>}\r\n              setSelectedDay={setEndDate}\r\n              selectedDay={EndDate}\r\n            ></Datepicker_Customer>\r\n          </div>\r\n          <ListBox\r\n            options={users}\r\n            selectedOption={selecteduser}\r\n            setSelectedOption={setSelecteduser}\r\n          />\r\n        </div>\r\n        <input\r\n  className=\"form-control m-2 mb-2 mt-4\"\r\n  style={{ width: \"100%\", maxWidth: \"200px\" }}\r\n  type=\"search\"\r\n  onChange={handleName}\r\n  value={namesearch}\r\n  placeholder={formatMessage({ id: \"Search\" })}\r\n  aria-label=\"Search\"\r\n/>\r\n      </div>\r\n      <DataTable\r\n        // title=\"Server Side Data Table\"\r\n        onRowClicked={handleshow}\r\n        columns={columns}\r\n        data={records}\r\n        progressPending={loading}\r\n        striped\r\n        responsive\r\n        highlightOnHover\r\n        pagination\r\n        paginationServer // فعال‌سازی صفحه‌بندی سرور ساید\r\n        paginationTotalRows={totalRows} // تعداد کل ردیف‌ها\r\n        onChangePage={handlePageChange} // تغییر صفحه\r\n        onChangeRowsPerPage={handlePerRowsChange} // تغییر تعداد ردیف‌ها در صفحه\r\n        localization={localization} // ارسال ترجمه‌ها\r\n        customStyles={customStyles}       \r\n      />\r\n      <Edit_deposite\r\n        useRef1={editeRef}\r\n        setSelectedOption={setSelectedOption1}\r\n        selectedOption={selectedOption1}\r\n        // money={money}\r\n        // accounts={accounts}\r\n        // setAccounts={setAccounts}\r\n        records={records}\r\n        setRecords={setRecords}\r\n        handleKeyDown={handleKeyDown}\r\n        belance={belance}\r\n        setbelance={setbelance}\r\n        account={account}\r\n        setAccount={setAccount}\r\n        Diversity={Diversity}\r\n        setDiversity={setDiversity}\r\n        selectedDay={selectedDayE}\r\n        setselectedDay={setSelectedDayE}\r\n        EndDate={EndDateE}\r\n        Edit_Deposit={EditDeposit}\r\n        setEditDeposit={setEditDeposit}\r\n        settings={settings}\r\n        handle_date={handle_date}\r\n        // lebal={\"Date\"}\r\n        setSelectedDay={setSelectedDayE}\r\n        open={OpenEdit}\r\n        closeEdit={() => setOpenEdit(false)}\r\n      />\r\n      {/* {edit && (\r\n        <AccountEdit\r\n          close={() => setEdit(false)}\r\n          account={editAccount}\r\n          setAccount={setEditAccount}\r\n        />\r\n      )} */}\r\n\r\n      {/* <img style={{height:'6%',width:'6%'}} className=\"p-0\" src={Add}/> */}\r\n      {/* {(\r\n        <Belance\r\n          close={() => setOpenBelance(false)}\r\n          id={id}\r\n          accountbelance={editAccount}\r\n        />\r\n      )} */}\r\n      {addAccountModal && (\r\n        <AddAccount close={() => setAddAccountModal(false)} />\r\n      )}\r\n      {alert && <Alert />}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Select from 'react-select';\r\nimport { ChevronDown } from 'lucide-react';\r\nimport { FormattedMessage, useIntl } from 'react-intl';\r\n\r\nconst ListBox = ({\r\n  isDisabled = false,\r\n  options = [],\r\n  selectedOption,\r\n  setSelectedOption,\r\n  width = '100%',\r\n}) => {\r\n  const { formatMessage, locale } = useIntl();\r\n  const isRTL = locale === 'fa'; // Assuming 'fa' is your Persian locale code\r\n  \r\n  const allUsersOption = { \r\n    name: <FormattedMessage id=\"All Users\" />, \r\n    id: 0 \r\n  };\r\n  \r\n  const updatedOptions = [allUsersOption, ...options];\r\n\r\n  useEffect(() => {\r\n    if (!selectedOption) {\r\n      setSelectedOption(allUsersOption);\r\n    }\r\n  }, [selectedOption, setSelectedOption, allUsersOption]);\r\n\r\n  const handleChange = (selectedOption) => {\r\n    setSelectedOption(selectedOption);\r\n  };\r\n\r\n  const customStyles = {\r\n    control: (base, state) => ({\r\n      ...base,\r\n      fontFamily: localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      backgroundColor: '#fff',\r\n      zIndex: 1,\r\n      borderRadius: '8px',\r\n      border: state.isFocused ? '2px solid #4f46e5' : '1px solid #d1d5db',\r\n      boxShadow: state.isFocused ? '0 0 5px rgba(79, 70, 229, 0.5)' : 'none',\r\n      '&:hover': {\r\n        border: '1px solid #4f46e5',\r\n      },\r\n      minHeight: '39px',\r\n      padding: '4px 8px',\r\n      textAlign: isRTL ? 'right' : 'left',\r\n      direction: isRTL ? 'rtl' : 'ltr',\r\n    }),\r\n    menu: (base) => ({\r\n      ...base,\r\n      fontFamily: localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      borderRadius: '8px',\r\n      boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.1)',\r\n      overflow: 'hidden',\r\n      textAlign: isRTL ? 'right' : 'left',\r\n      direction: isRTL ? 'rtl' : 'ltr',\r\n    }),\r\n    option: (base, { isFocused, isSelected }) => ({\r\n      ...base,\r\n      fontFamily: localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      backgroundColor: isSelected ? '#4f46e5' : isFocused ? '#e0e7ff' : '#fff',\r\n      color: isSelected ? '#fff' : '#111827',\r\n      padding: isRTL ? '12px 16px 12px 8px' : '12px 8px 12px 16px',\r\n      cursor: 'pointer',\r\n      fontSize: '14px',\r\n      textAlign: isRTL ? 'right' : 'left',\r\n      '&:active': {\r\n        backgroundColor: '#4338ca',\r\n      },\r\n    }),\r\n    singleValue: (base) => ({\r\n      ...base,\r\n      fontFamily: localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      fontWeight: 'bold',\r\n      color: '#4f46e5',\r\n      fontSize: '14px',\r\n      textAlign: isRTL ? 'right' : 'left',\r\n      direction: isRTL ? 'rtl' : 'ltr',\r\n    }),\r\n    placeholder: (base) => ({\r\n      ...base,\r\n      fontFamily: localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      fontSize: '14px',\r\n      color: '#6b7280',\r\n      textAlign: isRTL ? 'right' : 'left',\r\n      direction: isRTL ? 'rtl' : 'ltr',\r\n    }),\r\n    dropdownIndicator: (base) => ({\r\n      ...base,\r\n      fontFamily:localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      padding: '8px',\r\n    }),\r\n    menuPortal: (base) => ({ ...base, zIndex: 10000 }),\r\n    input: (base) => ({\r\n      ...base,\r\n      fontFamily:localStorage.getItem(\"language\") !== \"en\" && \"'CustomFont1', sans-serif\",\r\n      textAlign: isRTL ? 'right' : 'left',\r\n    }),\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className={`mt-3`} \r\n      style={{ width }}\r\n      dir={isRTL ? 'rtl' : 'ltr'}\r\n    >\r\n      <Select\r\n        classNamePrefix=\"custom-select\"\r\n        value={selectedOption}\r\n        onChange={handleChange}\r\n        options={updatedOptions}\r\n        getOptionLabel={(option) => option.name}\r\n        getOptionValue={(option) => option.id}\r\n        placeholder={formatMessage({ id: 'select.placeholder' }) || (isRTL ? 'انتخاب کنید...' : 'Select...')}\r\n        isClearable={false}\r\n        isSearchable={false}\r\n        isDisabled={isDisabled}\r\n        menuPortalTarget={document.body}\r\n        styles={customStyles}\r\n        components={{\r\n          DropdownIndicator: ({ innerProps }) => (\r\n            <div {...innerProps} className={isRTL ? 'pl-2 text-gray-500' : 'pr-2 text-gray-500'}>\r\n              <ChevronDown size={20} />\r\n            </div>\r\n          ),\r\n          ClearIndicator: null,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nListBox.propTypes = {\r\n  isDisabled: PropTypes.bool,\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n      name: PropTypes.node.isRequired,\r\n    })\r\n  ),\r\n  selectedOption: PropTypes.object,\r\n  setSelectedOption: PropTypes.func.isRequired,\r\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nListBox.defaultProps = {\r\n  isDisabled: false,\r\n  options: [],\r\n  selectedOption: null,\r\n  width: '100%',\r\n};\r\n\r\nexport default ListBox;","import React from 'react';\r\nimport Select, { components } from 'react-select';\r\nimport { FormattedMessage,useIntl } from \"react-intl\";\r\n\r\nconst Combo_Customer = ({ \r\n  isEditable = false, \r\n  options, \r\n  Onsearch, \r\n  selectedOption, \r\n  // readOnly, \r\n  setSelectedOption, \r\n  searchQuery, \r\n  handleInputChange \r\n}) => {\r\n  const handleChange = (sselectedOption) => {\r\n    setSelectedOption(sselectedOption);\r\n    Onsearch(sselectedOption);\r\n  };\r\n\r\n//   const CustomMenuList = (props) => (\r\n//     <components.MenuList {...props}>\r\n//       {props.children}\r\n//       {type && (\r\n//         <div\r\n//           style={{\r\n//             display: \"flex\",\r\n//             justifyContent: \"center\",\r\n//             padding: \"10px\",\r\n//             borderTop: \"1px solid #eaeaea\",\r\n//             cursor: \"pointer\",\r\n//             backgroundColor: \"#f9f9f9\",\r\n//           }}\r\n//           onClick={() => setAddAccountModal(searchQuery)}\r\n//         >\r\n//           <strong>{name}</strong>\r\n//         </div>\r\n//       )}\r\n//     </components.MenuList>\r\n//   );\r\nconst { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <div className=\"w-40\">\r\n      <Select\r\n        classNamePrefix=\"custom-select\"\r\n        inputValue={searchQuery}\r\n        value={selectedOption}\r\n        onChange={handleChange}\r\n        options={options}\r\n        onInputChange={handleInputChange}\r\n        getOptionLabel={(option) => (\r\n            <div style={{ display: 'flex', alignItems: 'center' }}>\r\n              <span>{`${option.account_name} ${option.moneyType}`}</span>\r\n            </div>)}\r\n        getOptionValue={(option) => `${option.account_name} ${option.moneyType}`}\r\n        // placeholder=\"Search...\"\r\n        placeholder={formatMessage({ id: \"Search...\" })}\r\n        isClearable\r\n        isSearchable\r\n        isDisabled={isEditable}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Combo_Customer;\r\n"],"names":["formatNumber","number","toLocaleString","Deposite","_ref","user","showAlert","useShowAlert","settings","statuss","useSelector","state","selecteduser","setSelecteduser","useState","users","statusu","namesearch","setnameSearch","Date_Start","setDate_start","Date_End","setDate_end","belance","setbelance","accounts","setAccounts","deposite","setdeposite","selectedDay","setSelectedDay","moment","open","setopen","alert","setalert","records","setRecords","Ddate","setDdate","utils","getToday","de_id","setde_id","OpenEdit","setOpenEdit","EditDeposit","setEditDeposit","id","account","date","amount","discription","type","customer","moneyType","cash","user_id","localStorage","getItem","user_name","moneyid","cashreport","setcashreport","report_delete","Setreport_delete","intl","useIntl","delete_report","async","swalWithBootstrapButtons","Swal","customClass","confirmButton","cancelButton","buttonsStyling","result","fire","title","formatMessage","text","icon","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","isConfirmed","uploadData","FormData","append","axios","post","Source","getAddress","concat","row","params","headers","Authorization","then","res","position","showConfirmButton","timer","prevRecords","filter","record","prevBelance","map","a","data","catch","e","dismiss","cancel","moneytype","setmoneytype","EndDateE","setEndDateE","idbelance","setidbelance","selectedBelance","setselectedBelance","account_name","account_id","moneyId","date_created","openBelance","setOpenBelance","edit","setEdit","editAccount","setEditAccount","setId","addAccountModal","setAddAccountModal","StartDate","setStartDate","EndDate","setEndDate","username","setusername","moneyname","setmoneyname","search","setsearch","AddDeposite","setAddDeposite","Date","toISOString","totalRows","setTotalRows","loading","setLoading","currentPage","setCurrentPage","perPage","setPerPage","useEffect","page","pageSize","response","get","delete","length","total","error","fetchData","formattedValue","setFormattedValue","Popup","setPopup","useMemo","window","innerWidth","d","formattedDate","year","String","month","padStart","hours","minutes","aa","formattedHours","formattedMinutes","format","columnsDesktopsimple","name","_jsx","style","width","children","selector","minWidth","padding","justifyContent","textAlign","maxWidth","className","columnsDesktop","backgroundColor","onClick","border","height","src","Trash","PDcolumn","FormattedMessage","_jsxs","columnsTablet","sortable","value","setValue","select_user","setselect_user","selectedOption","setSelectedOption","buttonRef","useRef","selectedDayE","setSelectedDayE","Diversity","setDiversity","setAccount","editeRef","handle_date","jalaliDate","day","now","jalaali","t","getHours","getMinutes","isoString","_objectSpread","handleKeyDown","key","preventDefault","current","click","inputRef","inputElement","document","querySelector","setTimeout","focus","select","isDesktop","setIsDesktop","handleResize","addEventListener","removeEventListener","columns","reverse","selectedOption1","setSelectedOption1","SearchQueryTo","setSearchQueryTo","query","do","localization","pagination","rowsPerPage","previous","next","target","dir","class","for","ComboBoxDeposite","searchQuery","setSearchQuery","handleInputChange","newValue","options","Onsearch","prevState","belanceName","NumericFormat","ref","onKeyDown","thousandSeparator","placeholder","onChange","unformattedValue","replace","Datepicker_Customer","default_value","lebal","marginTop","SumbitReport","add_deposite","isdelete","submitdeposite","add","report","add_cash","moneys","borderTop","ListBox","DataTable","onRowClicked","news","isNaN","getTime","Error","setDate","getDate","getFullYear","getMonth","gregorianMoment","progressPending","striped","responsive","highlightOnHover","paginationServer","paginationTotalRows","onChangePage","onChangeRowsPerPage","newPerPage","customStyles","headCells","fontWeight","Edit_deposite","useRef1","setselectedDay","Edit_Deposit","closeEdit","AddAccount","close","Alert","isDisabled","locale","isRTL","allUsersOption","updatedOptions","control","base","fontFamily","zIndex","borderRadius","isFocused","boxShadow","minHeight","direction","menu","overflow","option","_ref2","isSelected","color","cursor","fontSize","singleValue","dropdownIndicator","menuPortal","input","Select","classNamePrefix","getOptionLabel","getOptionValue","isClearable","isSearchable","menuPortalTarget","body","styles","components","DropdownIndicator","_ref3","innerProps","ChevronDown","size","ClearIndicator","defaultProps","isEditable","inputValue","sselectedOption","onInputChange","display","alignItems"],"sourceRoot":""}