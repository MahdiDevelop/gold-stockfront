{"version":3,"file":"static/js/6446.0cced193.chunk.js","mappings":"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","sources":["pages/SideOption/Sideoption.js"],"sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Source from \"../../Source\";\r\nimport { useShowAlert } from \"../../warrper\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getSettings, updateSettingInCache } from \"../Redux/settingSlice\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport Reset from \"../settings/Reset\";\r\nimport AddInfo from \"../forms/AddInfo\";\r\nimport AddDatabaseform from \"../forms/AddDatabase\";\r\nimport SidebarShow from \"../forms/SidebarShow\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Select,\r\n  MenuItem,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Paper,\r\n} from \"@mui/material\";\r\nimport { updateSidebarInCache } from \"../Redux/sidebarSlice\";\r\n\r\nconst transformOptions = (optionsObj) => {\r\n  return Object.keys(optionsObj).map((key) => ({\r\n    id: key,\r\n    label: key,\r\n    checked: optionsObj[key] === 1,\r\n  }));\r\n};\r\n\r\nexport default function Sideoption() {\r\n  const showAlert = useShowAlert();\r\n  const [showPopupReset, setShowPopupReset] = useState(false);\r\n  const [AddinfoModel, setAddinfoModel] = useState(false);\r\n  const [AddDatabase, setAddDatabase] = useState(false);\r\n  const [SidebarModel, setSidebarModel] = useState(false);\r\n  const [Settings, Setsettings] = useState([]);\r\n  const { settings, statuss } = useSelector((state) => state.settings);\r\n  // const { sidebars } = useSelector((state) => state.sidebars);\r\n  const dispatch = useDispatch();\r\n  const { sidebars} = useSelector((state) => state.sidebars);\r\n  useEffect(() => {\r\n    if (statuss === null) {\r\n      dispatch(getSettings());\r\n    }\r\n  }, [dispatch, statuss]);\r\n\r\n  useEffect(() => {\r\n    if (settings.length > 0) {\r\n      Setsettings(settings);\r\n    }\r\n  }, [settings]);\r\n\r\n  const handle = (e) => {\r\n  let data={type:e.target.value};\r\n      data._method='put';\r\n      console.log(data);\r\n    axios.post(Source.getAddress()+'/api/sidebar/1',data,{\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n      },\r\n  }).then((res)=>{\r\n  console.log(res)\r\n  showAlert({\r\n    position: \"top-end\",\r\n    icon: \"success\",\r\n    title: <FormattedMessage id=\"Transformation has been updated!\" />,\r\n    showConfirmButton: false,\r\n    timer: 1000,\r\n  });\r\n  let update={...sidebars[0]};\r\n  update.type=data.type;\r\n  dispatch(updateSidebarInCache(update));\r\n  }).catch((err)=>{\r\n    console.log(err);\r\n    showAlert({\r\n      position: \"top-end\",\r\n      icon: \"error\",\r\n      title: <FormattedMessage id=\"Something went wrong!\" />,\r\n      showConfirmButton: false,\r\n      timer: 1000,\r\n    });\r\n  })\r\n  \r\n};\r\n\r\n  const handleDatabase = () => setAddDatabase(true);\r\n// console.log(sidebars);\r\n  return (\r\n    <Box\r\n      dir={localStorage.getItem(\"language\") === \"en\" ? \"ltr\" : \"rtl\"}\r\n      sx={{ width: \"100%\", maxWidth: 600, mx: \"auto\", mt: 5 }}\r\n    >\r\n      <Paper elevation={3} sx={{ borderTop: \"5px solid #4a5cf2\", p: 2 }}>\r\n        <h2 className=\"m-2 fw-bold mb-4\"><FormattedMessage id=\"Settings\" /></h2>\r\n\r\n        <Table>\r\n          <TableBody>\r\n            {Settings.length > 0 ? (\r\n              <>\r\n                <TableRow>\r\n                  <TableCell align=\"right\">\r\n                    <Typography fontWeight=\"bold\" variant=\"h6\">\r\n                      <FormattedMessage id=\"System Type\" />\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <Select\r\n                      name=\"type\"\r\n                      value={sidebars[0].type}\r\n                      onChange={handle}\r\n                      size=\"small\"\r\n                      sx={{ minWidth: 150 }}\r\n                    >\r\n                      <MenuItem value=\"stock\">\r\n                        <FormattedMessage id=\"Stock Store\" />\r\n                      </MenuItem>\r\n                      <MenuItem value=\"gold\">\r\n                        <FormattedMessage id=\"Gold Store\" />\r\n                      </MenuItem>\r\n                    </Select>\r\n                  </TableCell>\r\n                </TableRow>\r\n\r\n                {/* Reset To Default */}\r\n                <TableRow>\r\n                  <TableCell colSpan={2}>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                      <Typography variant=\"h6\">\r\n                        <FormattedMessage id=\"Reset To Default\" />\r\n                      </Typography>\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        color=\"error\"\r\n                        onClick={() => setShowPopupReset(true)}\r\n                      >\r\n                        <FormattedMessage id=\"Reset\" />\r\n                      </Button>\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n\r\n                {/* Upload Database */}\r\n                <TableRow>\r\n                  <TableCell colSpan={2}>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                      <Typography variant=\"h6\">\r\n                        <FormattedMessage id=\"Upload Databse\" />\r\n                      </Typography>\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        onClick={handleDatabase}\r\n                      >\r\n                        <FormattedMessage id=\"Upload Databse\" />\r\n                      </Button>\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n                {/* Sidebar Option */}\r\n                <TableRow>\r\n                  <TableCell colSpan={2}>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                      <Typography variant=\"h6\">\r\n                        <FormattedMessage id=\"Sidebar Option\" />\r\n                      </Typography>\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        onClick={() => setSidebarModel(true)}\r\n                      >\r\n                        <FormattedMessage id=\"Change\" />\r\n                      </Button>\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </>\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell colSpan={2} align=\"center\">\r\n                  <FormattedMessage id=\"Loading...\" />\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n\r\n      {/* Modals */}\r\n      <SidebarShow\r\n        close={() => setSidebarModel(false)}\r\n        SidebarModel={SidebarModel}\r\n        options={transformOptions(sidebars[0])}\r\n      />\r\n\r\n      <Reset\r\n        addAccountModal={showPopupReset}\r\n        close={() => setShowPopupReset(false)}\r\n      />\r\n\r\n      <AddInfo\r\n        settings={Settings}\r\n        setsettings={Setsettings}\r\n        close={() => setAddinfoModel(false)}\r\n        addAccountModal={AddinfoModel}\r\n      />\r\n\r\n      <AddDatabaseform\r\n        setsettings={Setsettings}\r\n        settings={Settings}\r\n        close={() => setAddDatabase(false)}\r\n        addAccountModal={AddDatabase}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n"],"names":["transformOptions","optionsObj","Object","keys","map","key","id","label","checked","Sideoption","showAlert","useShowAlert","showPopupReset","setShowPopupReset","useState","AddinfoModel","setAddinfoModel","AddDatabase","setAddDatabase","SidebarModel","setSidebarModel","Settings","Setsettings","settings","statuss","useSelector","state","dispatch","useDispatch","sidebars","useEffect","getSettings","length","_jsxs","Box","dir","localStorage","getItem","sx","width","maxWidth","mx","mt","children","Paper","elevation","borderTop","p","_jsx","className","FormattedMessage","Table","TableBody","_Fragment","TableRow","TableCell","align","Typography","fontWeight","variant","Select","name","value","type","onChange","e","data","target","axios","post","Source","getAddress","headers","Authorization","concat","then","res","position","icon","title","showConfirmButton","timer","update","_objectSpread","updateSidebarInCache","catch","err","size","minWidth","MenuItem","colSpan","display","justifyContent","alignItems","Button","color","onClick","handleDatabase","SidebarShow","close","options","Reset","addAccountModal","AddInfo","setsettings","AddDatabaseform"],"sourceRoot":""}