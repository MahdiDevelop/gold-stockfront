{"version":3,"file":"static/js/6304.c1e8b9dd.chunk.js","mappings":"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","sources":["pages/Report/ShowProfit.js","pages/Report/BenefitReport.js","pages/forms/Datepicker.js","../node_modules/shamsi/index.js","pages/forms/ListBox.js","../node_modules/shamsi-date-converter/lib/index.js"],"sourcesContent":["import React, {useMemo, useEffect, useRef, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Source from \"../../Source\";\r\nimport Swal from \"sweetalert2\";\r\nimport Profile from \"../../assets/icon/profile.png\";\r\nimport IdNational from \"../../assets/icon/national_id.png\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { addCustomerToCache, getCustomers } from \"../Redux/customerSlice\";\r\nimport \"./style.css\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nconst formatNumber = (number) => {\r\n  return number?.toLocaleString(); // Formats number with thousand separators\r\n};\r\nexport default function ShowProfit({\r\n  close,\r\n  addAccountModal,\r\n  record,\r\n  setRecord,\r\n  accounts,\r\n  inputRef,\r\n  ShowBill,\r\n}) {\r\n  return (\r\n    <div\r\n      className={`container rounded-5 popup customer ${\r\n        addAccountModal ? \"show\" : \"\"\r\n      }`}\r\n      style={{\r\n        maxWidth: \"70%\",\r\n        overflowX: \"auto\",\r\n        overflowY: \"auto\",\r\n        height: \"80vh\",\r\n        backgroundColor: \"#f8f9fa\",\r\n        padding: \"20px\",\r\n        zIndex: \"10000\",\r\n      }}\r\n    >\r\n      <div\r\n        class=\"card card-body m-auto\"\r\n        style={{ borderTop: \"5px solid #4a5cf2\" }}\r\n      >\r\n        <div className=\"d-flex justify-content-end\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn-close p-3 m-1 mt-0 hover_btn\"\r\n            onClick={close}\r\n            aria-label=\"Close\"\r\n          ></button>\r\n        </div>\r\n        <h1 class=\"text-center rounded m-0 mb-2 p-4 text-light fw-bold bg-info\">\r\n          Tracking of profite\r\n        </h1>\r\n        <table class=\"table table-light table-striped\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">\r\n              <FormattedMessage id=\"No\"/>\r\n              </th>\r\n              <th scope=\"col\">\r\n              <FormattedMessage id=\"Source\"/>\r\n              </th>\r\n              <th scope=\"col\">              <FormattedMessage id=\"Profit\"/>\r\n              </th>\r\n              <th scope=\"col\">              <FormattedMessage id=\"Bill Number\"/>\r\n              </th>\r\n              <th scope=\"col\">              <FormattedMessage id=\"Currency\"/>\r\n              </th>\r\n              <th scope=\"col\">              <FormattedMessage id=\"Show\"/>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody class=\"table-group-divider\">\r\n            {record &&\r\n              record.map((row, idx) => {\r\n                return (\r\n                  <tr key={idx}>\r\n                    <th scope=\"row\">{idx + 1}</th>\r\n                    <td>\r\n                      {row.source === \"Report\" ? \"Transformations\" : row.source}\r\n                    </td>\r\n                    <td>{<span dir=\"ltr\">{formatNumber(row.profit)}</span>}</td>\r\n                    <td>\r\n                      {row.source === \"Report\"\r\n                        ? row.report_id + \" Number\"\r\n                        : row.bill_id}\r\n                    </td>\r\n                    <td>{row.money_type}</td>\r\n                    {/* <td>{row.money_type}</td> */}\r\n                    <td>\r\n                      {\" \"}\r\n                      {row.source !== \"Report\" && (\r\n                        <button\r\n                          onClick={() => {\r\n                            ShowBill(row.bill_id);\r\n                          }}\r\n                          type=\"button\"\r\n                          className=\"btn btn-outline-info rounded-4\"\r\n                          style={{ fontSize: \"0.6rem\" }}\r\n                        >\r\n                                        <FormattedMessage id=\"Veiw\"/>\r\n                        </button>\r\n                      )}\r\n                    </td>\r\n                    {/* <td style={{ width: \"5%\" }}>\r\n                             {!row.ontransaction && (\r\n                               <button\r\n                                 style={{\r\n                                   border: \"none\",\r\n                                   background: \"tranceparent\",\r\n                                 }}\r\n                                 onClick={() => Delete(row)}\r\n                               >\r\n                                 <img\r\n                                   height={\"50%\"}\r\n                                   width={\"50%\"}\r\n                                   src={Trash}\r\n                                   style={{\r\n                                     background: \"transparent\",\r\n                                   }}\r\n                                 />\r\n                               </button>\r\n                             )}\r\n                           </td>\r\n                           <td style={{ width: \"5%\" }}>\r\n                             {!row.ontransaction && (\r\n                               <button\r\n                                 onClick={() => {\r\n                                   setAdd(false);\r\n                                   setEdit(row);\r\n                                   setUpdate(true);\r\n                                   seTtitle(\"Edit Type Money\");\r\n                                   updateRef.current.select();\r\n                                 }}\r\n                                 style={{\r\n                                   border: \"none\",\r\n                                   backgroundColor: \"tranceparent!important\",\r\n                                 }}\r\n                               >\r\n                                 <img height={\"90%\"} width={\"90%\"} src={pencil} />\r\n                               </button>\r\n                             )}\r\n                           </td> */}\r\n                  </tr>\r\n                );\r\n              })}\r\n            {/* {source.length>=6 && <a o className=\"text-primary underlined text-center\">{text}</a>} */}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useRef,useMemo } from \"react\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport Source from \"../../Source\";\r\nimport jalaali from \"jalaali-js\";\r\nimport jsPDF from \"jspdf\";\r\nimport html2canvas from \"html2canvas\";\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\nimport { stringify } from \"qs\";\r\nimport moment from \"moment-jalaali\";\r\nimport { gregorianToJalali } from \"shamsi-date-converter\";\r\nimport \"../Report/report.css\";\r\nimport Datepicker from \"../forms/Datepicker.js\";\r\nimport Datepicker_Customer from \".././forms/Datepicker_customer\";\r\nimport { InputDatePicker } from \"jalaali-react-date-picker\";\r\n// import Swal from \"sweetalert2\";\r\nimport { showAlert } from \"../../warrper.js\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getCustomers } from \"../Redux/customerSlice\";\r\nimport { getSettings } from \"../Redux/settingSlice\";\r\nimport { RotateLoader } from \"react-spinners\";\r\nimport html2pdf from \"html2pdf.js\";\r\nimport Combo_Customer from \"../forms/Combo_Customer\";\r\nimport ListBox from \"../forms/ListBox\";\r\nimport ShowProfit from \"./ShowProfit.js\";\r\nimport EditSell from \"../Items/forms/EditSell.js\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { useShowAlert  } from \"../../warrper\";\r\n// import \"jspdf-rtl\";\r\nconst formatNumber = (number) => {\r\n  return number?.toLocaleString(); // Formats number with thousand separators\r\n};\r\nexport default function BenefitReport() {\r\n  // useEffect(() => {\r\n  const dispatch = useDispatch();\r\n  // const { customers, errorc, statusc } = useSelector(\r\n    //   (state) => state.customers\r\n    // );\r\n    const showAlert = useShowAlert(); \r\n  const { settings, errors, statuss } = useSelector((state) => state.settings);\r\n  const { users, statusu } = useSelector((state) => state.users);\r\n  const [customer, setcustomers] = useState([]);\r\n  const [accounts, setaccounts] = useState([]);\r\n  const [selectedDayStart, setselectedDayStart] = useState();\r\n  const [selectedDayEnd, setselectedDayEnd] = useState();\r\n  const [Date_Start, setDate_Start] = useState(\"\");\r\n  const [Date_End, setDate_End] = useState();\r\n    const [isDesktop, setIsDesktop] = useState(window.innerWidth > 768);\r\n  const [Records, setRecords] = useState([]);\r\n  const [setting, setsettings] = useState([\r\n    {\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      address: \"\",\r\n      description: \"\",\r\n    },\r\n  ]);\r\n  const [Settings, Setsettings] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState();\r\n  const [addAccountModal, setAddAccountModal] = useState(false);\r\n  useEffect(() => {\r\n    if (statuss !== \"succeeded\" && !settings) {\r\n      dispatch(getSettings());\r\n      console.log(\"SETTINGS\");\r\n    }\r\n  }, [dispatch, , settings, statuss]);\r\n  useEffect(() => {\r\n    if (settings?.length > 0) {\r\n      setsettings(settings);\r\n    }\r\n  }, [settings]);\r\n  const handleDateChangeStart = (date) => {\r\n    setselectedDayStart(date);\r\n    if (date) {\r\n      const handl = {\r\n        year: date._a[0],\r\n        month: date._a[1] + 1,\r\n        day: date._a[2],\r\n      };\r\n      handle_date(handl);\r\n    }\r\n  };\r\n  const handleDateChangeEnd = (date) => {\r\n    setselectedDayEnd(date);\r\n    if (date) {\r\n      const handl = {\r\n        year: date._a[0],\r\n        month: date._a[1] + 1,\r\n        day: date._a[2],\r\n      };\r\n      handle_dateEnd(handl);\r\n    }\r\n  };\r\n  const handle_date = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n\r\n      // const date = new Date(jalaliDate.year, jalaliDate.month - 1, jalaliDate.day);\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      setDate_Start(isoString);\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n  const handle_date_end = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day+1,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n\r\n      // const date = new Date(jalaliDate.year, jalaliDate.month - 1, jalaliDate.day);\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      setDate_End(isoString);\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n  const [TrackProfite, setTrackProfite] = useState([]);\r\n  const [selecteduser, setSelecteduser] = useState();\r\n  const handle_dateEnd = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n\r\n      // const date = new Date(jalaliDate.year, jalaliDate.month - 1, jalaliDate.day);\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      setDate_End(isoString);\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n\r\n  const onSelect = (selectedList, selectedItem) => {\r\n    setSelectedValues(selectedList);\r\n  };\r\n\r\n  const onRemove = (selectedList, removedItem) => {\r\n    setSelectedValues(selectedList);\r\n  };\r\n\r\n  const [selectedValues, setSelectedValues] = useState([]);\r\n  const [Belance, setBelance] = useState([]);\r\n  const [StartDate, setStartDate] = useState();\r\n  const [EndDate, setEndDate] = useState();\r\n  const fetchAccounts = async (customerid) => {\r\n    const token = localStorage.getItem(\"access\");\r\n    if (!token) return;\r\n    const fetchWithToken = async (token) => {\r\n      try {\r\n        const res = await axios.get(Source.getAddress() + \"/api/belance\", {\r\n          params: {\r\n            delete: \"False\",\r\n            CustomerId: customerid,\r\n          },\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        setaccounts(res.data);\r\n      } catch (error) {\r\n        if (error.response && error.response.status === 401) {\r\n          const refreshToken = localStorage.getItem(\"refresh\");\r\n          if (!refreshToken) return;\r\n\r\n          try {\r\n            const refreshResponse = await axios.post(\r\n              Source.getAddress() + \"/api/token/refresh\",\r\n              {\r\n                refresh: refreshToken,\r\n              }\r\n            );\r\n            const newAccessToken = refreshResponse.data.access;\r\n            localStorage.setItem(\"access\", newAccessToken);\r\n            await fetchWithToken(newAccessToken);\r\n          } catch (refreshError) {\r\n            console.error(\"Error refreshing access token:\", refreshError);\r\n          }\r\n        } else {\r\n          console.error(\"Error fetching accounts:\", error);\r\n        }\r\n      }\r\n    };\r\n\r\n    await fetchWithToken(token);\r\n  };\r\n  // const [Customer, setCustomer] = useState();\r\n  const [Report, SetReport] = useState([]);\r\n  const handleCustomer = (data) => {\r\n    setSearchQuery(data);\r\n  };\r\n  const Daterow = (d) => {\r\n    const date = new Date(d);\r\n\r\n    let formattedDate = `${date.getFullYear()}-${String(\r\n      date.getMonth() + 1\r\n    ).padStart(2, \"0\")}-${String(date.getDate()).padStart(2, \"0\")}`;\r\n    const hours = date.getHours();\r\n    const minutes = date.getMinutes();\r\n    const ampm = hours >= 12 ? \"pm\" : \"am\";\r\n    let aa = ampm;\r\n    const formattedHours = hours % 12 || 12;\r\n    const formattedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    if (settings[0].date === \"Persian\") {\r\n      moment.locale(\"fa\"); // تنظیم لوکال به فارسی\r\n      aa = hours >= 12 ? \"ب.ظ\" : \"ق.ظ\";\r\n      formattedDate = moment(d).format(\"jYYYY-jMM-jDD\");\r\n    } else {\r\n      moment.locale(\"en\"); // تنظیم لوکال به انگلیسی\r\n    }\r\n\r\n    return `${formattedDate} ${formattedHours}:${formattedMinutes} ${aa}`;\r\n  };\r\n  const date = (d) => {\r\n    const date = new Date(d);\r\n    let formattedDate = `${date.getFullYear()}-${String(\r\n      date.getMonth() + 1\r\n    ).padStart(2, \"0\")}-${String(date.getDate()).padStart(2, \"0\")}`;\r\n    const hours = date.getHours();\r\n    const minutes = date.getMinutes();\r\n    const ampm = hours >= 12 ? \"pm\" : \"am\";\r\n    const formattedHours = hours % 12 || 12;\r\n    const formattedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n\r\n    if (settings.length === 0) {\r\n      let settings1 = { language: \"English\" };\r\n      axios\r\n        .post(Source.getAddress() + \"/api/settings\", settings1)\r\n        .then((res) => {\r\n          console.log(res.data);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n    if (settings[0].date === \"Persian\") {\r\n      formattedDate = convertToHijriShamsi(\r\n        `${formattedDate}  ${formattedHours}:${formattedMinutes} ${ampm}`\r\n      );\r\n    }\r\n    return `${formattedDate}`;\r\n  };\r\n  const convertToHijriShamsi = (gregorianDate) => {\r\n    const [jalaliYear, jalaliMonth, jalaliDay] = gregorianToJalali(\r\n      new Date(gregorianDate)\r\n    );\r\n    return `${jalaliYear}/${jalaliMonth}/${jalaliDay}`;\r\n  };\r\n  const dateform = (d) => {\r\n    const date = new Date(d);\r\n\r\n    let formattedDate = `${date.getFullYear()}-${String(\r\n      date.getMonth() + 1\r\n    ).padStart(2, \"0\")}-${String(date.getDate()).padStart(2, \"0\")}`;\r\n    if (settings[0].date === \"Persian\") {\r\n      moment.locale(\"fa\"); // تنظیم لوکال به فارسی\r\n      formattedDate = moment(d).format(\"jYYYY-jMM-jDD\");\r\n    } else {\r\n      moment.locale(\"en\"); // تنظیم لوکال به انگلیسی\r\n    }\r\n    return `${formattedDate}`;\r\n  };\r\n  // import jsPDF from 'jspdf';\r\n  // import 'jspdf-autotable';\r\n\r\n  let img = null;\r\n  function fetchImageAndConvertToBase64(imageUrl) {\r\n    fetch(Source.getAddress() + \"/api/getImageBase64/\" + imageUrl)\r\n      .then((response) => response.json()) // واکشی داده‌ها از API\r\n      .then((data) => {\r\n        img = data.image;\r\n        console.log(data.image);\r\n      })\r\n      .catch((error) => console.error(\"Error fetching image:\", error));\r\n  }\r\n  // فراخوانی تابع با آدرس تصویر\r\n  // console.log(customers);\r\n  const containerRef = useRef();\r\n  const generatePDF = () => {\r\n    if (!customername) {\r\n      alert(\"Please select a customer!\");\r\n      return;\r\n    }\r\n    const element = containerRef.current;\r\n\r\n    // Configuration options for high-quality PDF rendering\r\n    const options = {\r\n      html2canvas: {\r\n        scale: 4, // Increase the scale for higher resolution\r\n        logging: false, // Optional: Disable logging for performance\r\n        useCORS: true, // Ensure cross-origin images are captured correctly\r\n        letterRendering: true, // Improve the rendering of letters and fonts\r\n      },\r\n      jsPDF: {\r\n        unit: \"mm\",\r\n        format: \"a4\",\r\n        orientation: \"portrait\",\r\n      },\r\n    };\r\n\r\n    // Generate and save the PDF\r\n    const imageUrl = settings[0]?.company_pic;\r\n\r\n    if (imageUrl) {\r\n      const fileName = imageUrl.split(\"/\").pop(); // تقسیم رشته و گرفتن آخرین بخش\r\n      const imageSrc = Source.getAddress() + \"/api/getImage/\" + fileName;\r\n      // استفاده از html2pdf و اضافه کردن تصویر بعد از بارگذاری\r\n      html2pdf()\r\n        .from(element)\r\n        .set(options)\r\n        .toPdf()\r\n        .get(\"pdf\")\r\n        .then(function (pdf) {\r\n          const pageWidth = pdf.internal.pageSize.width;\r\n          const pageHeight = pdf.internal.pageSize.height;\r\n          const imgWidth = 30;\r\n          const imgHeight = 30;\r\n          const x = pageWidth - imgWidth - 10; // 10 پیکسل فاصله از لبه راست\r\n          const y = 35; // 10 پیکسل فاصله از لبه بالای صفحه\r\n          pdf.addImage(imageSrc, \"JPEG\", x, y, imgWidth, imgHeight);\r\n          pdf.save(\"report.pdf\");\r\n        });\r\n    } else {\r\n      html2pdf().from(element).set(options).save(\"report.pdf\");\r\n    }\r\n  };\r\n\r\n  // };       این کد کامل است شما تغییرات لازم را بیاورید\r\n\r\n  const [dateinpage, setdateinpage] = useState(null);\r\n  const [dateinpageend, setdateinpageend] = useState(null);\r\n  const [customername, setcustomername] = useState(\"\");\r\n  const [BelanceAccount, setBelanceAccount] = useState([]);\r\n  const Submit = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        Source.getAddress() + \"/api/benefitcontroller\",\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n          },\r\n          //   params: {\r\n          //     page: page,\r\n          //     perPage: pageSize,\r\n          //     isdelete: 0,\r\n          //     StartDate:StartDate,\r\n          //     EndDate: EndDate,\r\n          //   },\r\n        }\r\n      );\r\n      console.log(response);\r\n      setRecords(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n  let previousAccountId = null;\r\n  let No = 0;\r\n\r\n  let currentBalance = 0;\r\n  let accountTotalDeposit = 0;\r\n  let accountTotalWithdraw = 0;\r\n  const handleSeletecOption = (data) => {\r\n    setCustomer(data);\r\n    if (data) {\r\n      fetchAccounts(data.id);\r\n      console.log(data);\r\n    }\r\n  };\r\n  const handlePerRowsChange = async (newPerPage, page) => {\r\n    setPerPage(newPerPage);\r\n    setCurrentPage(page);\r\n  };\r\n  // const [data, setData] = useState([]);\r\n  const [totalRows, setTotalRows] = useState(0); // تعداد کل ردیف‌ها\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1); // صفحه فعلی\r\n  const [perPage, setPerPage] = useState(10); // تعداد آیتم‌ها در هر صفحه\r\n  const handlePageChange = (page) => {\r\n    setCurrentPage(page); // برو به صفحه جدید\r\n  };\r\n  const fetchData = async (page, pageSize) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.get(\r\n        Source.getAddress() + \"/api/benefitcontroller\",\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n          },\r\n          params: {\r\n            user_id: selecteduser.id,\r\n            page: page,\r\n            perPage: pageSize,\r\n            isdelete: 0,\r\n            StartDate: StartDate && Date_Start,\r\n            EndDate: EndDate && Date_End,\r\n          },\r\n        }\r\n      );\r\n      console.log(response);\r\n      setRecords(response.data.data); // داده‌های صفحه جاری\r\n      setTotalRows(response.data.total); // تعداد کل ردیف‌ها\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData(currentPage, perPage);\r\n  }, [currentPage, perPage, EndDate, StartDate, selecteduser]);\r\n\r\n  const columnsDesktop = [\r\n    //   { name: <strong>No</strong>, selector: (row) => row.id },\r\n    {\r\n      name: <strong>Date</strong>,\r\n      selector: (row) => date(row.date),\r\n    },\r\n    {\r\n      name: <strong>Currency</strong>,\r\n      selector: (row) => row.currency,\r\n    },\r\n    { name: <strong>Profit</strong>, selector: (row) => row.profit },\r\n    {\r\n      name: \"Show\",\r\n      cell: (row) => (\r\n        <button\r\n          onClick={() => {\r\n            setTrackProfite(row.details);\r\n            setAddAccountModal(true);\r\n          }}\r\n          type=\"button\"\r\n          className=\"btn btn-outline-info rounded-4\"\r\n          style={{ fontSize: \"0.9rem\" }}\r\n        >\r\n          View\r\n        </button>\r\n      ),\r\n    },\r\n    //   { name: <strong>Added by</strong>, selector: (row) => row.user_name },\r\n    //   {\r\n    //     name: (\r\n    //       <strong\r\n    //         style={{\r\n    //           textAlign: \"center\",\r\n    //           backgroundColor: \"transparent\",\r\n    //           width: \"100%\",\r\n    //         }}\r\n    //       >\r\n    //         Delete\r\n    //       </strong>\r\n    //     ),\r\n    //     selector: (row) => (\r\n    //       <button\r\n    //         className={`${row.ontransaction===1 ? \"d-none\" : \"\"}`}\r\n    //         onClick={() => delete_report(row)}\r\n    //         style={{\r\n    //           border: \"none\",\r\n    //           backgroundColor: \"transparent\",\r\n    //           height: \"100%\",\r\n    //         }}\r\n    //       >\r\n    //         <img\r\n    //           height={\"15%\"}\r\n    //           width={\"15%\"}\r\n    //           src={Trash}\r\n    //           style={{ backgroundColor: \"transparent\" }}\r\n    //         />\r\n    //       </button>\r\n    //     ),\r\n    //   },\r\n  ];\r\n  const PDcolumn=[\r\n    {\r\n      name:<strong><FormattedMessage id=\"Show\"/></strong>,\r\n      cell: (row) => (\r\n        <button\r\n          onClick={() => {\r\n            setTrackProfite(row.details);\r\n            setAddAccountModal(true);\r\n          }}\r\n          type=\"button\"\r\n          className=\"btn btn-outline-info rounded-4\"\r\n          style={{ fontSize: \"0.9rem\" }}\r\n        >\r\n          <FormattedMessage id=\"Veiw\"/>\r\n        </button>\r\n      ),\r\n    },\r\n      { name: <strong><FormattedMessage id=\"Profit\"/></strong>,\r\n        selector: (row) => (\r\n          <span dir=\"ltr\">{formatNumber(row.profit)}</span>\r\n        ),\r\n      },\r\n    {\r\n      name: <strong><FormattedMessage id=\"Currency\"/></strong>,\r\n      selector: (row) => row.currency,\r\n    },\r\n    {\r\n      name: <strong><FormattedMessage id=\"Date\"/></strong>,\r\n      selector: (row) => date(row.date),\r\n    },\r\n  ]\r\n    const columns = useMemo(() => {\r\n      if (\r\n        localStorage.getItem(\"language\") === \"pa\" ||\r\n        localStorage.getItem(\"language\") === \"da\"\r\n      ) {\r\n        return PDcolumn;\r\n      }else{\r\n       return columnsDesktop\r\n      }\r\n      // if (isDesktop) {\r\n      //   return localStorage.getItem(\"userTokenname\") === \"admin\"\r\n      //     ? columnsDesktop\r\n      //     : columnsDesktopsimple;\r\n      // }\r\n      // return columnsTablet;\r\n    }, [isDesktop]);\r\n\r\n  const [shopingcart, setShopingCart] = useState([]);\r\n  const [Exesting, setExesting] = useState(false);\r\n  const [AddSellModal, setAddSellModal] = useState(false);\r\n  const [MoneyEdit, setMoneyEdit] = useState([]);\r\n  const [Customer, setCustomer] = useState([]);\r\n  const [EditSellModal, setEditSellModal] = useState(false);\r\n\r\n  const ShowBill = (bill_id) => {\r\n    console.log(bill_id);\r\n    axios\r\n      .get(Source.getAddress() + \"/api/sell/\" + bill_id, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setExesting(res.data.bill.accounts ? true : false);\r\n        setEditSellModal(true);\r\n        setMoneyEdit(res.data.money);\r\n        setCustomer(res.data.bill);\r\n        setShopingCart(res.data.sells);\r\n      })\r\n      .catch((er) => {\r\n        showAlert({\r\n          position: \"top-end\",\r\n          icon: \"error\",\r\n          title: \"This bill number not found!\",\r\n          showConfirmButton: false,\r\n          timer: 1000,\r\n        });\r\n      });\r\n  };\r\n  const localization = {\r\n    pagination: {\r\n        \r\n        rowsPerPage:<FormattedMessage id=\"AddrowsPerPage\"/> , // مثلا: \"تعداد ردیف‌ها\"\r\n      previous: <FormattedMessage id=\"previous\"/>, // مثلا: \"قبلی\"\r\n      next: <FormattedMessage id=\"next\"/>, // مثلا: \"بعدی\"\r\n      page: <FormattedMessage id=\"page\"/>, // مثلا: \"صفحه\"\r\n    },\r\n    // شما می‌توانید تنظیمات بیشتر برای متون مورد نظر اضافه کنید.\r\n  };\r\n  return (\r\n    <div\r\n    dir={localStorage.getItem(\"language\") === \"en\" ? \"ltr\" : \"rtl\"}\r\n      className=\"w-100 h-100\r\n  responsive-container\"\r\n    >\r\n      <div className=\"pt-4 pb-4 h-100 \">\r\n        {/* <button\r\n          onClick={() => generatePDF()}\r\n          type=\"button\"\r\n          className=\"btn btn-outline-success fw-bold mb-2\"\r\n        >\r\n          <FormattedMessage id=\"Print Pdf\"/>\r\n        </button> */}\r\n        <div\r\n        className=\"bg-light d-flex flex-column flex-lg-row justify-content-lg-between align-items-start align-items-lg-center\"\r\n        style={{ borderTop: \"5px solid #4a5cf2\" }}\r\n      >\r\n        <h2 className=\"m-2 fw-bold mb-4\"><FormattedMessage id=\"benefit report\"/>\r\n        </h2>\r\n        <div className=\"d-flex flex-column flex-lg-row align-items-start align-items-lg-center\">\r\n          <div className=\"mb-1 mb-lg-0 me-lg-2 mt-1 \">\r\n            <Datepicker_Customer\r\n              default_value={StartDate}\r\n              handle_date={handle_date}\r\n              lebal={<FormattedMessage id=\"Start\"/>}\r\n              setSelectedDay={setStartDate}\r\n              selectedDay={StartDate}\r\n            ></Datepicker_Customer>\r\n          </div>\r\n          <div className=\"mb-1 mt-1 mb-lg-0 me-lg-2\">\r\n            <Datepicker_Customer\r\n              default_value={EndDate}\r\n              handle_date={handle_date_end}\r\n              lebal={<FormattedMessage id=\"End\"/>}\r\n              setSelectedDay={setEndDate}\r\n              selectedDay={EndDate}\r\n            ></Datepicker_Customer>\r\n          </div>\r\n          <ListBox\r\n            options={users}\r\n            selectedOption={selecteduser}\r\n            setSelectedOption={setSelecteduser}\r\n          />\r\n        </div>\r\n        {/* <input\r\n  className=\"form-control m-2 mb-2 mt-4\"\r\n  style={{ width: \"100%\", maxWidth: \"200px\" }}\r\n  type=\"search\"\r\n  onChange={handleName}\r\n  value={search}\r\n  placeholder={formatMessage({ id: \"Search\" })}\r\n  aria-label=\"Search\"\r\n/> */}\r\n<div></div>\r\n      </div>\r\n        <DataTable\r\n          columns={columns}\r\n          data={Records}\r\n          //   onRowClicked={handleRowClick}\r\n          striped\r\n          responsive\r\n          progressPending={loading}\r\n          // responsive\r\n          highlightOnHover\r\n          pagination\r\n          paginationServer // فعال‌سازی صفحه‌بندی سرور ساید\r\n          paginationTotalRows={totalRows} // تعداد کل ردیف‌ها\r\n          onChangePage={handlePageChange} // تغییر صفحه\r\n          // onChangeRowsPerPage={handlePerRowsChange} // تغییر تعداد ردیف‌ها در صفحه\r\n          localization={localization} // ارسال ترجمه‌ها\r\n        />\r\n        <ShowProfit\r\n          close={() => setAddAccountModal(false)}\r\n          addAccountModal={addAccountModal}\r\n          record={TrackProfite}\r\n          ShowBill={ShowBill}\r\n        />\r\n        <EditSell\r\n          Exesting={Exesting}\r\n          setExesting={setExesting}\r\n          records={[]}\r\n          setRecords={() => {}}\r\n          // settings={setttings}\r\n          // setsettings={setsettings}\r\n          AddSellModal={EditSellModal}\r\n          close={(e) => setEditSellModal(false)}\r\n          money={MoneyEdit}\r\n          // setmoney={setMoneyEdit}\r\n          moneys={[]}\r\n          options1={[]}\r\n          setOptions1={() => {}}\r\n          customers={[]}\r\n          Customer={Customer}\r\n          setCustomer={setCustomer}\r\n          shopingcart={shopingcart}\r\n          setshopingcart={setShopingCart}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport \"jalaali-react-date-picker/lib/styles/index.css\";\r\nimport { InputDatePicker } from \"jalaali-react-date-picker\";\r\nimport moment, { months } from 'moment-timezone';\r\n\r\nexport default function Datepicker({ handle_date, settings,default_value ,lebal,onKeyDown}) {\r\n  const [selectedDay, setSelectedDay] = useState();\r\n  const handleDateChange = (date) => {\r\n    setSelectedDay(date);\r\n        if(date!=null){\r\n        const handl={year:date._a[0],month:date._a[1]+1,day:date._a[2]}\r\n      handle_date(handl);\r\n        }\r\n    };\r\n  return (\r\n    <div className=\"col-3 m-2 mt-3\"\r\n    >\r\n      <label htmlFor=\"\" className='p-0 m-0'>{lebal}</label>\r\n      <InputDatePicker\r\n      onKeyDown={onKeyDown}\r\n        value={selectedDay}\r\n        onChange={handleDateChange}\r\n        inputPlaceholder={settings[0].date === 'Persian' ? 'تاریخ را وارد کنید' : 'Enter the date'}\r\n        locale={settings[0].date === 'Persian' ? 'fa' : 'en'}\r\n        colorPrimary=\"#0fbcf9\"\r\n        maximumDate={{ year: 9999, month: 12, day: 31 }}\r\n        minimumDate={{ year: 1, month: 1, day: 1 }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.jalaliToGregorian = exports.gregorianToJalali = void 0;\nfunction gregorianToJalali(gy, gm, gd) {\n  var gdm, jy, jm, jd, gy2, days;\n  gdm = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n  gy2 = gm > 2 ? gy + 1 : gy;\n  days =\n    355666 +\n    365 * gy +\n    ~~((gy2 + 3) / 4) -\n    ~~((gy2 + 99) / 100) +\n    ~~((gy2 + 399) / 400) +\n    gd +\n    gdm[gm - 1];\n  jy = -1595 + 33 * ~~(days / 12053);\n  days %= 12053;\n  jy += 4 * ~~(days / 1461);\n  days %= 1461;\n  if (days > 365) {\n    jy += ~~((days - 1) / 365);\n    days = (days - 1) % 365;\n  }\n  if (days < 186) {\n    jm = 1 + ~~(days / 31);\n    jd = 1 + (days % 31);\n  } else {\n    jm = 7 + ~~((days - 186) / 30);\n    jd = 1 + ((days - 186) % 30);\n  }\n  return [jy, jm, jd];\n}\nexports.gregorianToJalali = gregorianToJalali;\nfunction jalaliToGregorian(jy, jm, jd) {\n  var salA, gy, gm, gd, days;\n  jy += 1595;\n  days =\n    -355668 +\n    365 * jy +\n    ~~(jy / 33) * 8 +\n    ~~(((jy % 33) + 3) / 4) +\n    jd +\n    (jm < 7 ? (jm - 1) * 31 : (jm - 7) * 30 + 186);\n  gy = 400 * ~~(days / 146097);\n  days %= 146097;\n  if (days > 36524) {\n    gy += 100 * ~~(--days / 36524);\n    days %= 36524;\n    if (days >= 365) {\n      days++;\n    }\n  }\n  gy += 4 * ~~(days / 1461);\n  days %= 1461;\n  if (days > 365) {\n    gy += ~~((days - 1) / 365);\n    days = (days - 1) % 365;\n  }\n  gd = days + 1;\n  salA = [\n    0,\n    31,\n    (gy % 4 === 0 && gy % 100 !== 0) || gy % 400 === 0 ? 29 : 28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31,\n  ];\n  for (gm = 0; gm < 13 && gd > salA[parseInt(gm, 10)]; gm++) {\n    gd -= salA[parseInt(gm, 10)];\n  }\n  return [gy, gm, gd];\n}\nexports.jalaliToGregorian = jalaliToGregorian;\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Select from 'react-select';\r\nimport { ChevronDown } from 'lucide-react';\r\nimport { FormattedMessage, useIntl } from 'react-intl';\r\n\r\nconst ListBox = ({\r\n  isDisabled = false,\r\n  options = [],\r\n  selectedOption,\r\n  setSelectedOption,\r\n  width = '100%',\r\n}) => {\r\n  const { formatMessage, locale } = useIntl();\r\n  const isRTL = locale === 'fa'; // Assuming 'fa' is your Persian locale code\r\n  \r\n  const allUsersOption = { \r\n    name: <FormattedMessage id=\"All Users\" />, \r\n    id: 0 \r\n  };\r\n  \r\n  const updatedOptions = [allUsersOption, ...options];\r\n\r\n  useEffect(() => {\r\n    if (!selectedOption) {\r\n      setSelectedOption(allUsersOption);\r\n    }\r\n  }, [selectedOption, setSelectedOption, allUsersOption]);\r\n\r\n  const handleChange = (selectedOption) => {\r\n    setSelectedOption(selectedOption);\r\n  };\r\n\r\n  const customStyles = {\r\n    control: (base, state) => ({\r\n      ...base,\r\n      fontFamily: localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      backgroundColor: '#fff',\r\n      zIndex: 1,\r\n      borderRadius: '8px',\r\n      border: state.isFocused ? '2px solid #4f46e5' : '1px solid #d1d5db',\r\n      boxShadow: state.isFocused ? '0 0 5px rgba(79, 70, 229, 0.5)' : 'none',\r\n      '&:hover': {\r\n        border: '1px solid #4f46e5',\r\n      },\r\n      minHeight: '39px',\r\n      padding: '4px 8px',\r\n      textAlign: isRTL ? 'right' : 'left',\r\n      direction: isRTL ? 'rtl' : 'ltr',\r\n    }),\r\n    menu: (base) => ({\r\n      ...base,\r\n      fontFamily: localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      borderRadius: '8px',\r\n      boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.1)',\r\n      overflow: 'hidden',\r\n      textAlign: isRTL ? 'right' : 'left',\r\n      direction: isRTL ? 'rtl' : 'ltr',\r\n    }),\r\n    option: (base, { isFocused, isSelected }) => ({\r\n      ...base,\r\n      fontFamily: localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      backgroundColor: isSelected ? '#4f46e5' : isFocused ? '#e0e7ff' : '#fff',\r\n      color: isSelected ? '#fff' : '#111827',\r\n      padding: isRTL ? '12px 16px 12px 8px' : '12px 8px 12px 16px',\r\n      cursor: 'pointer',\r\n      fontSize: '14px',\r\n      textAlign: isRTL ? 'right' : 'left',\r\n      '&:active': {\r\n        backgroundColor: '#4338ca',\r\n      },\r\n    }),\r\n    singleValue: (base) => ({\r\n      ...base,\r\n      fontFamily: localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      fontWeight: 'bold',\r\n      color: '#4f46e5',\r\n      fontSize: '14px',\r\n      textAlign: isRTL ? 'right' : 'left',\r\n      direction: isRTL ? 'rtl' : 'ltr',\r\n    }),\r\n    placeholder: (base) => ({\r\n      ...base,\r\n      fontFamily: localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      fontSize: '14px',\r\n      color: '#6b7280',\r\n      textAlign: isRTL ? 'right' : 'left',\r\n      direction: isRTL ? 'rtl' : 'ltr',\r\n    }),\r\n    dropdownIndicator: (base) => ({\r\n      ...base,\r\n      fontFamily:localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      padding: '8px',\r\n    }),\r\n    menuPortal: (base) => ({ ...base, zIndex: 10000 }),\r\n    input: (base) => ({\r\n      ...base,\r\n      fontFamily:localStorage.getItem(\"language\") !== \"en\" && \"'CustomFont1', sans-serif\",\r\n      textAlign: isRTL ? 'right' : 'left',\r\n    }),\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className={`mt-3`} \r\n      style={{ width }}\r\n      dir={isRTL ? 'rtl' : 'ltr'}\r\n    >\r\n      <Select\r\n        classNamePrefix=\"custom-select\"\r\n        value={selectedOption}\r\n        onChange={handleChange}\r\n        options={updatedOptions}\r\n        getOptionLabel={(option) => option.name}\r\n        getOptionValue={(option) => option.id}\r\n        placeholder={formatMessage({ id: 'select.placeholder' }) || (isRTL ? 'انتخاب کنید...' : 'Select...')}\r\n        isClearable={false}\r\n        isSearchable={false}\r\n        isDisabled={isDisabled}\r\n        menuPortalTarget={document.body}\r\n        styles={customStyles}\r\n        components={{\r\n          DropdownIndicator: ({ innerProps }) => (\r\n            <div {...innerProps} className={isRTL ? 'pl-2 text-gray-500' : 'pr-2 text-gray-500'}>\r\n              <ChevronDown size={20} />\r\n            </div>\r\n          ),\r\n          ClearIndicator: null,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nListBox.propTypes = {\r\n  isDisabled: PropTypes.bool,\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n      name: PropTypes.node.isRequired,\r\n    })\r\n  ),\r\n  selectedOption: PropTypes.object,\r\n  setSelectedOption: PropTypes.func.isRequired,\r\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nListBox.defaultProps = {\r\n  isDisabled: false,\r\n  options: [],\r\n  selectedOption: null,\r\n  width: '100%',\r\n};\r\n\r\nexport default ListBox;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.gregorianToJalali = exports.jalaliToGregorian = void 0;\nvar shamsi = require(\"shamsi\");\nvar gtj = shamsi.gregorianToJalali, jtg = shamsi.jalaliToGregorian;\nexports.jalaliToGregorian = jtg;\nfunction gregorianToJalali(yearOrDate, month, day) {\n    if (typeof yearOrDate !== 'number') {\n        var date = new Date(yearOrDate);\n        var y = date.getFullYear();\n        var m = (date.getMonth() + 1);\n        var d = date.getDate();\n        return gtj(y, m, d);\n    }\n    else {\n        return gtj(yearOrDate, month, day);\n    }\n}\nexports.gregorianToJalali = gregorianToJalali;\n"],"names":["formatNumber","number","toLocaleString","ShowProfit","_ref","close","addAccountModal","record","setRecord","accounts","inputRef","ShowBill","_jsx","className","concat","style","maxWidth","overflowX","overflowY","height","backgroundColor","padding","zIndex","children","_jsxs","class","borderTop","type","onClick","scope","FormattedMessage","id","map","row","idx","source","dir","profit","report_id","bill_id","money_type","fontSize","BenefitReport","dispatch","useDispatch","showAlert","useShowAlert","settings","errors","statuss","useSelector","state","users","statusu","customer","setcustomers","useState","setaccounts","selectedDayStart","setselectedDayStart","selectedDayEnd","setselectedDayEnd","Date_Start","setDate_Start","Date_End","setDate_End","isDesktop","setIsDesktop","window","innerWidth","Records","setRecords","setting","setsettings","name","email","phone","address","description","Settings","Setsettings","searchQuery","setSearchQuery","setAddAccountModal","useEffect","getSettings","length","handle_date","jalaliDate","year","month","day","now","jalaali","Date","String","getHours","padStart","getMinutes","t","isoString","toISOString","TrackProfite","setTrackProfite","selecteduser","setSelecteduser","selectedValues","setSelectedValues","Belance","setBelance","StartDate","setStartDate","EndDate","setEndDate","Report","SetReport","date","d","formattedDate","getFullYear","getMonth","getDate","hours","minutes","ampm","formattedHours","formattedMinutes","settings1","language","axios","post","Source","getAddress","then","res","catch","err","convertToHijriShamsi","gregorianDate","jalaliYear","jalaliMonth","jalaliDay","gregorianToJalali","useRef","dateinpage","setdateinpage","dateinpageend","setdateinpageend","customername","setcustomername","BelanceAccount","setBelanceAccount","totalRows","setTotalRows","loading","setLoading","currentPage","setCurrentPage","perPage","setPerPage","async","page","pageSize","response","get","headers","Authorization","localStorage","getItem","params","user_id","isdelete","data","total","error","fetchData","columnsDesktop","selector","currency","cell","details","PDcolumn","columns","useMemo","shopingcart","setShopingCart","Exesting","setExesting","AddSellModal","setAddSellModal","MoneyEdit","setMoneyEdit","Customer","setCustomer","EditSellModal","setEditSellModal","localization","pagination","rowsPerPage","previous","next","Datepicker_Customer","default_value","lebal","setSelectedDay","selectedDay","ListBox","options","selectedOption","setSelectedOption","DataTable","striped","responsive","progressPending","highlightOnHover","paginationServer","paginationTotalRows","onChangePage","bill","money","sells","er","position","icon","title","showConfirmButton","timer","EditSell","records","e","moneys","options1","setOptions1","customers","setshopingcart","Datepicker","onKeyDown","htmlFor","InputDatePicker","value","onChange","handl","_a","inputPlaceholder","locale","colorPrimary","maximumDate","minimumDate","Object","defineProperty","exports","jalaliToGregorian","gy","gm","gd","jy","jm","jd","gy2","days","salA","parseInt","isDisabled","width","formatMessage","useIntl","isRTL","allUsersOption","updatedOptions","customStyles","control","base","_objectSpread","fontFamily","borderRadius","border","isFocused","boxShadow","minHeight","textAlign","direction","menu","overflow","option","_ref2","isSelected","color","cursor","singleValue","fontWeight","placeholder","dropdownIndicator","menuPortal","input","Select","classNamePrefix","getOptionLabel","getOptionValue","isClearable","isSearchable","menuPortalTarget","document","body","styles","components","DropdownIndicator","_ref3","innerProps","ChevronDown","size","ClearIndicator","defaultProps","shamsi","require","gtj","yearOrDate","y","m"],"sourceRoot":""}