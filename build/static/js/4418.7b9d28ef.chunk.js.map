{"version":3,"file":"static/js/4418.7b9d28ef.chunk.js","mappings":"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","sources":["pages/forms/Combo_Customer.js","pages/Report/ReportCustomers.js","pages/forms/Datepicker_customer.js"],"sourcesContent":["import React from 'react';\r\nimport Select, { components } from 'react-select';\r\nimport { FormattedMessage,useIntl } from \"react-intl\";\r\nconst Combo_Customer = ({ \r\n  isEditable = false, \r\n  name, \r\n  type, \r\n  options, \r\n  Onsearch, \r\n  selectedOption, \r\n  setAddAccountModal, \r\n  setSelectedOption, \r\n  searchQuery, \r\n  handleInputChange \r\n}) => {\r\n  const handleChange = (sselectedOption) => {\r\n    setSelectedOption(sselectedOption);\r\n    // console.log('hi');\r\n    // Onsearch(sselectedOption);\r\n  };\r\n// console.log(searchQuery);\r\n  const CustomMenuList = (props) => (\r\n    <components.MenuList {...props}>\r\n      {props.children}\r\n      {type && (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            padding: \"10px\",\r\n            borderTop: \"1px solid #eaeaea\",\r\n            cursor: \"pointer\",\r\n            backgroundColor: \"#f9f9f9\",\r\n          }}\r\n          onClick={() => {\r\n            setAddAccountModal(searchQuery)\r\n            // setSelectedOption({id:0, name:searchQuery});\r\n          }}\r\n        >\r\n          <strong>{name}</strong>\r\n        </div>\r\n      )}\r\n    </components.MenuList>\r\n  );\r\n\r\n  const customStyles = {\r\n    menuPortal: (base) => ({ ...base, zIndex: 9999 }),\r\n  };\r\nconst { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <div className=\"w-40\">\r\n      <Select\r\n        classNamePrefix=\"custom-select\"\r\n        inputValue={searchQuery}\r\n        value={selectedOption}\r\n        onChange={handleChange}\r\n        options={options}\r\n        onInputChange={handleInputChange}\r\n        getOptionLabel={(option) => (\r\n          <div style={{ display: 'flex', alignItems: 'center' }}>\r\n            <span>{`${option.name} `}</span>\r\n          </div>\r\n        )}\r\n        getOptionValue={(option) => `${option.name}`}\r\n        // placeholder=\"Search...\"\r\n        placeholder={formatMessage({ id: \"Search...\" })}\r\n        isClearable\r\n        components={{ MenuList: CustomMenuList }}\r\n        isSearchable\r\n        isDisabled={isEditable}\r\n        menuPortalTarget={document.body} // انتقال منو به `body`\r\n        styles={customStyles} // تنظیم `z-index`\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Combo_Customer;","import React, { useEffect, useState, useRef } from \"react\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport Source from \"../../Source\";\r\nimport jalaali from \"jalaali-js\";\r\nimport jsPDF from \"jspdf\";\r\nimport html2canvas from \"html2canvas\";\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\nimport { stringify } from \"qs\";\r\nimport moment from \"moment-jalaali\";\r\nimport \"../Report/report.css\";\r\n// import Datepicker_customer from \"../forms/Datepicker_customer\";\r\nimport Datepicker_Customer from \".././forms/Datepicker_customer\";\r\nimport { InputDatePicker } from \"jalaali-react-date-picker\";\r\n// import Swal from \"sweetalert2\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getCustomers } from \"../Redux/customerSlice\";\r\nimport { getSettings } from \"../Redux/settingSlice\";\r\nimport { RotateLoader } from \"react-spinners\";\r\nimport html2pdf from \"html2pdf.js\";\r\nimport Combo_Customer from \"../forms/Combo_Customer\";\r\nimport { FormattedMessage ,useIntl} from \"react-intl\";\r\nimport { useShowAlert } from \"../../warrper\";\r\n// import \"jspdf-rtl\";\r\nconst formatNumber = (number) => {\r\n  return number?.toLocaleString(); // Formats number with thousand separators\r\n};\r\nexport default function ReportCustomers() {\r\n  const dispatch = useDispatch();\r\n  const showAlert = useShowAlert();\r\n  const { settings, errors, statuss } = useSelector((state) => state.settings);\r\n\r\n  const [customer, setcustomers] = useState([]);\r\n  const [accounts, setaccounts] = useState([]);\r\n  const [selectedDayStart, setselectedDayStart] = useState();\r\n  const [selectedDayEnd, setselectedDayEnd] = useState();\r\n  const [Date_Start, setDate_Start] = useState();\r\n  const [Date_End, setDate_End] = useState();\r\n  const [Records, setRecords] = useState([]);\r\n  const [setting, setsettings] = useState([\r\n    {\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      address: \"\",\r\n      description: \"\",\r\n    },\r\n  ]);\r\n  const [Settings, Setsettings] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState();\r\n\r\n  useEffect(() => {\r\n    // بررسی و بارگذاری `belances`\r\n    // if (!statusb && belances?.lenght ===0) {\r\n    //   dispatch(getBelances());\r\n    // }\r\n\r\n    // // بررسی و بارگذاری `moneys`\r\n    // if (!statusm && moneys?.lenght ===0) {\r\n    //   dispatch(getMoneys());\r\n    // }\r\n\r\n    // بررسی و بارگذاری `customers`\r\n    // if (statusc != \"succeeded\" && !customers) {\r\n    //   dispatch(getCustomers());\r\n    //   console.log('customer');\r\n    // }\r\n    if (statuss !== \"succeeded\" && !settings) {\r\n      dispatch(getSettings());\r\n      console.log(\"SETTINGS\");\r\n    }\r\n  }, [dispatch, , settings, statuss]);\r\n  useEffect(() => {\r\n    if (settings?.length > 0) {\r\n      setsettings(settings);\r\n    }\r\n    // if (customers?.length > 0) {\r\n    //   setcustomers(customers);\r\n    // }\r\n  }, [settings]);\r\n  const handleDateChangeStart = (date) => {\r\n    setselectedDayStart(date);\r\n    if (date) {\r\n      const handl = {\r\n        year: date._a[0],\r\n        month: date._a[1] + 1,\r\n        day: date._a[2],\r\n      };\r\n      handle_date(handl);\r\n    }\r\n  };\r\n  const handleDateChangeEnd = (date) => {\r\n    setselectedDayEnd(date);\r\n    if (date) {\r\n      const handl = {\r\n        year: date._a[0],\r\n        month: date._a[1] + 1,\r\n        day: date._a[2],\r\n      };\r\n      handle_dateEnd(handl);\r\n    }\r\n  };\r\n  const handle_date = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n\r\n      // const date = new Date(jalaliDate.year, jalaliDate.month - 1, jalaliDate.day);\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      // setIsoDate(isoString);\r\n      // setAddDeposite({\r\n      //   ...AddDeposite,\r\n      //   date: isoString,\r\n      // });\r\n      setDate_Start(isoString);\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n  const handle_dateEnd = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n\r\n      // const date = new Date(jalaliDate.year, jalaliDate.month - 1, jalaliDate.day);\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      // setIsoDate(isoString);\r\n      // setAddDeposite({\r\n      //   ...AddDeposite,\r\n      //   date: isoString,\r\n      // });\r\n      setDate_End(isoString);\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n\r\n  const onSelect = (selectedList, selectedItem) => {\r\n    setSelectedValues(selectedList);\r\n  };\r\n\r\n  const onRemove = (selectedList, removedItem) => {\r\n    setSelectedValues(selectedList);\r\n  };\r\n\r\n  const [selectedValues, setSelectedValues] = useState([]);\r\n  const [Belance, setBelance] = useState([]);\r\n\r\n  //   const fetchCustomers = async () => {\r\n  //     const token = localStorage.getItem(\"access\");\r\n  //     if (!token) return;\r\n  //     const fetchWithToken = async (token) => {\r\n  //       try {\r\n  //         const response = await axios.get(\r\n  //           Source.getAddress() + \"/api/customers\",\r\n  //           {\r\n  //             headers: {\r\n  //               Authorization: `Bearer ${token}`,\r\n  //             },\r\n  //             params: {\r\n  //               delete: \"False\",\r\n  //             },\r\n  //           }\r\n  //         );\r\n  //         setcustomers(response.data);\r\n  //       } catch (error) {\r\n  //         if (error.response && error.response.status === 401) {\r\n  //           const refreshToken = localStorage.getItem(\"refresh\");\r\n  //           if (!refreshToken) return;\r\n\r\n  //           try {\r\n  //             const refreshResponse = await axios.post(\r\n  //               Source.getAddress() + \"/api/token/refresh\",\r\n  //               {\r\n  //                 refresh: refreshToken,\r\n  //               }\r\n  //             );\r\n  //             const newAccessToken = refreshResponse.data.access;\r\n  //             localStorage.setItem(\"access\", newAccessToken);\r\n  //             await fetchWithToken(newAccessToken);\r\n  //           } catch (refreshError) {\r\n  //             console.error(\"Error refreshing access token:\", refreshError);\r\n  //           }\r\n  //         } else {\r\n  //           console.error(\"Error fetching accounts:\", error);\r\n  //         }\r\n  //       }\r\n  //     };\r\n  //     await fetchWithToken(token);\r\n  //   };\r\n  //   const fetchSettings = async () => {\r\n  //     try {\r\n  //       const sett = await axios.get(Source.getAddress() + '/api/settings', {\r\n  //         headers: {\r\n  //           Authorization: `Bearer ${localStorage.getItem('access')}`,\r\n  //         },\r\n  //       });\r\n  //       setsettings(sett.data);\r\n  //     } catch (error) {\r\n  //       console.error('Error fetching settings:', error);\r\n  //     }\r\n  //   };\r\n  //   fetchSettings();\r\n  //   fetchCustomers();\r\n  // }, []);\r\n  // console.log(accounts);\r\n  const fetchAccounts = async (customerid) => {\r\n    const token = localStorage.getItem(\"access\");\r\n    if (!token) return;\r\n    const fetchWithToken = async (token) => {\r\n      // console.log(customerid);\r\n      // console.log(selectedDayStart);\r\n      try {\r\n        const res = await axios.get(Source.getAddress() + \"/api/belance\", {\r\n          params: {\r\n            delete: \"False\",\r\n            CustomerId: customerid,\r\n          },\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        setaccounts(res.data);\r\n      } catch (error) {\r\n        if (error.response && error.response.status === 401) {\r\n          const refreshToken = localStorage.getItem(\"refresh\");\r\n          if (!refreshToken) return;\r\n\r\n          try {\r\n            const refreshResponse = await axios.post(\r\n              Source.getAddress() + \"/api/token/refresh\",\r\n              {\r\n                refresh: refreshToken,\r\n              }\r\n            );\r\n            const newAccessToken = refreshResponse.data.access;\r\n            localStorage.setItem(\"access\", newAccessToken);\r\n            await fetchWithToken(newAccessToken);\r\n          } catch (refreshError) {\r\n            console.error(\"Error refreshing access token:\", refreshError);\r\n          }\r\n        } else {\r\n          console.error(\"Error fetching accounts:\", error);\r\n        }\r\n      }\r\n    };\r\n\r\n    await fetchWithToken(token);\r\n  };\r\n  const [Customer, setCustomer] = useState();\r\n  const [Report, SetReport] = useState([]);\r\n  const handleCustomer = (data) => {\r\n    setSearchQuery(data);\r\n  };\r\n  const Daterow = (d) => {\r\n    const date = new Date(d);\r\n\r\n    let formattedDate = `${date.getFullYear()}-${String(\r\n      date.getMonth() + 1\r\n    ).padStart(2, \"0\")}-${String(date.getDate()).padStart(2, \"0\")}`;\r\n    const hours = date.getHours();\r\n    const minutes = date.getMinutes();\r\n    const ampm = hours >= 12 ? \"pm\" : \"am\";\r\n    let aa = ampm;\r\n    const formattedHours = hours % 12 || 12;\r\n    const formattedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    if (settings[0].date === \"Persian\") {\r\n      moment.locale(\"fa\"); // تنظیم لوکال به فارسی\r\n      aa = hours >= 12 ? \"ب.ظ\" : \"ق.ظ\";\r\n      formattedDate = moment(d).format(\"jYYYY-jMM-jDD\");\r\n    } else {\r\n      moment.locale(\"en\"); // تنظیم لوکال به انگلیسی\r\n    }\r\n\r\n    return `${formattedDate}`;\r\n  };\r\n  const dateform = (d) => {\r\n    const date = new Date(d);\r\n\r\n    let formattedDate = `${date.getFullYear()}-${String(\r\n      date.getMonth() + 1\r\n    ).padStart(2, \"0\")}-${String(date.getDate()).padStart(2, \"0\")}`;\r\n    if (settings[0].date === \"Persian\") {\r\n      moment.locale(\"fa\"); // تنظیم لوکال به فارسی\r\n      formattedDate = moment(d).format(\"jYYYY-jMM-jDD\");\r\n    } else {\r\n      moment.locale(\"en\"); // تنظیم لوکال به انگلیسی\r\n    }\r\n    return `${formattedDate}`;\r\n  };\r\n  // import jsPDF from 'jspdf';\r\n  // import 'jspdf-autotable';\r\n\r\n  let img = null;\r\n  function fetchImageAndConvertToBase64(imageUrl) {\r\n    fetch(Source.getAddress() + \"/api/getImageBase64/\" + imageUrl)\r\n      .then((response) => response.json()) // واکشی داده‌ها از API\r\n      .then((data) => {\r\n        img = data.image;\r\n        console.log(data.image);\r\n      })\r\n      .catch((error) => console.error(\"Error fetching image:\", error));\r\n  }\r\n  // فراخوانی تابع با آدرس تصویر\r\n  // console.log(customers);\r\n  const containerRef = useRef();\r\n  // const generatePDF = () => {\r\n  //   if (!customername) {\r\n  //     alert(\"Please select a customer!\");\r\n  //     return;\r\n  //   }\r\n  //   const element = containerRef.current;\r\n\r\n  //   // Configuration options for high-quality PDF rendering\r\n  //   const options = {\r\n  //     html2canvas: {\r\n  //       scale: 4,  // Increase the scale for higher resolution\r\n  //       logging: false, // Optional: Disable logging for performance\r\n  //       useCORS: true, // Ensure cross-origin images are captured correctly\r\n  //       letterRendering: true,  // Improve the rendering of letters and fonts\r\n  //     },\r\n  //     jsPDF: {\r\n  //       unit: \"mm\",\r\n  //       format: \"a4\",\r\n  //       orientation: \"portrait\",\r\n  //     },\r\n  //   };\r\n\r\n  //   // Generate and save the PDF\r\n  //   const imageUrl = settings[0]?.company_pic;\r\n\r\n  //       if (imageUrl) {\r\n  //     const fileName = imageUrl.split(\"/\").pop(); // تقسیم رشته و گرفتن آخرین بخش\r\n  //     const imageSrc = Source.getAddress() + \"/api/getImage/\" + fileName;\r\n  //     // استفاده از html2pdf و اضافه کردن تصویر بعد از بارگذاری\r\n  //     html2pdf()\r\n  //       .from(element)\r\n  //     .set(options)\r\n  //       .toPdf()\r\n  //       .get('pdf')\r\n  //       .then(function (pdf) {\r\n  //         const pageWidth = pdf.internal.pageSize.width;\r\n  //         const pageHeight = pdf.internal.pageSize.height;\r\n  //         const imgWidth = 30;\r\n  //         const imgHeight = 30;\r\n  //         const x = pageWidth - imgWidth - 10; // 10 پیکسل فاصله از لبه راست\r\n  //         const y = 35; // 10 پیکسل فاصله از لبه بالای صفحه\r\n  //         pdf.addImage(imageSrc, 'JPEG', x, y, imgWidth, imgHeight);\r\n  //         pdf.save(\"report.pdf\");\r\n  //       });\r\n  //   } else {\r\n  //     html2pdf()\r\n  //     .from(element)\r\n  //     .set(options)\r\n  //     .save(\"report.pdf\");\r\n  //   }\r\n\r\n  // // In buttom is the style without in any html tage\r\n\r\n  //   // ایجاد یک عنصر HTML برای محتوا\r\n  //   // const imageUrl = settings[0]?.company_pic;\r\n  //   // let pdfContent = `\r\n  //   //   <div style=\"text-align: center; font-size: 18px; font-weight: bold; background-color: #4682B4; color: white; padding: 10px;\">\r\n  //   //   Report Cach Customer\r\n  //   //   </div>\r\n  //   //   <div style=\"font-size: 12px; padding: 10px;\">\r\n  //   //     <p>Company Name: ${setting[0]?.company_name || \"N/A\"}</p>\r\n  //   //     <p>Address: ${setting[0]?.address || \"N/A\"}</p>\r\n  //   //     <p>Phone: ${setting[0]?.phone || \"N/A\"}</p>\r\n  //   //     <p>Email: ${setting[0]?.email || \"N/A\"}</p>\r\n  //   //     <p>Customer: ${customername} from ${dateinpage ? dateform(dateinpage) : \"\"} To ${dateinpageend ? dateform(dateinpageend) : \"\"}</p>\r\n  //   //   </div>\r\n  //   // `;\r\n\r\n  //   // // اضافه کردن جدول به محتوا\r\n  //   // let tableContent = `\r\n  //   // <table style=\"width: 100%; border-collapse: collapse; margin-top: 20px; border: 1px solid #000;\">\r\n  //   // <thead style=\"background-color: #007bff; color: white;\">\r\n  //   //   <tr>\r\n  //   //     <th style=\"border: 1px solid #000; padding: 8px;\">No</th>\r\n  //   //     <th style=\"border: 1px solid #000; padding: 8px;\">Description</th>\r\n  //   //     <th style=\"border: 1px solid #000; padding: 8px;\">Date</th>\r\n  //   //     <th style=\"border: 1px solid #000; padding: 8px;\">Currency</th>\r\n  //   //     <th style=\"border: 1px solid #000; padding: 8px;\">Deposit</th>\r\n  //   //     <th style=\"border: 1px solid #000; padding: 8px;\">Withdraw</th>\r\n  //   //     <th style=\"border: 1px solid #000; padding: 8px;\">Balance</th>\r\n  //   //   </tr>\r\n  //   // </thead>\r\n  //   //     <tbody>\r\n  //   // `;\r\n\r\n  //   // let currentBalance = 0;\r\n  //   // let No = 0;\r\n  //   // let previousAccountId = null;\r\n  //   // let accountTotalDeposit = 0;\r\n  //   // let accountTotalWithdraw = 0;\r\n\r\n  //   // Records.forEach((row, index) => {\r\n  //   //   let firstBalance = 0;\r\n  //   //   BelanceAccount.forEach(element => {\r\n  //   //     if (element.account_id === row.account_id) {\r\n  //   //       firstBalance = parseInt(element.total);\r\n  //   //     }\r\n  //   //   });\r\n\r\n  //   //   if (firstBalance !== 0) {\r\n  //   //     tableContent += `\r\n  //   //       <tr>\r\n  //   //         <td >${No}</td>\r\n  //   //         <td style=\"border: 1px solid #000; padding: 8px;\">This is from previous transactions!</td>\r\n  //   //         <td style=\"border: 1px solid #000; padding: 8px;\">${Daterow(row.date_created)}</td>\r\n  //   //         <td style=\"border: 1px solid #000; padding: 8px;\">${row.account.type.name}</td>\r\n  //   //         <td style=\"color: green; border: 1px solid #000; padding: 8px;\">${firstBalance > 0 ? firstBalance : \"0\"}</td>\r\n  //   //         <td style=\"color: red; border: 1px solid #000; padding: 8px;\">${firstBalance < 0 ? firstBalance : \"0\"}</td>\r\n  //   //         <td style=\"border: 1px solid #000; padding: 8px;\">${currentBalance}</td>\r\n  //   //       </tr>\r\n  //   //     `;\r\n  //   //   }\r\n\r\n  //   //   if (row.account.id !== previousAccountId) {\r\n  //   //     currentBalance = (Belance.find((account) => account.id === row.account_id).balance || 0);\r\n  //   //     previousAccountId = row.account.id;\r\n  //   //     No = 1;\r\n  //   //     accountTotalDeposit = 0;\r\n  //   //     accountTotalWithdraw = 0;\r\n  //   //   } else {\r\n  //   //     No += 1;\r\n  //   //   }\r\n\r\n  //   //   if (row.type === \"deposite\") {\r\n  //   //     currentBalance += parseInt(row.amount);\r\n  //   //     accountTotalDeposit += parseInt(row.amount);\r\n  //   //   } else if (row.type === \"withdraw\") {\r\n  //   //     currentBalance -= parseInt(row.amount);\r\n  //   //     accountTotalWithdraw += parseInt(row.amount);\r\n  //   //   }\r\n\r\n  //   //   tableContent += `\r\n  //   //     <tr>\r\n  //   //       <td style=\"border: 1px solid #000; padding: 8px;\">${No}</td>\r\n  //   //       <td style=\"border: 1px solid #000; padding: 8px;\">${row?.description}</td>\r\n  //   //       <td style=\"border: 1px solid #000; padding: 8px;\">${Daterow(row.date_created)}</td>\r\n  //   //       <td style=\"border: 1px solid #000; padding: 8px;\">${row.account.type.name}</td>\r\n  //   //       <td style=\"color: green; border: 1px solid #000; padding: 8px;\">${row.type === \"deposite\" ? row.amount : \"0\"}</td>\r\n  //   //       <td style=\"color: red; border: 1px solid #000; padding: 8px;\">${row.type === \"withdraw\" ? row.amount : \"0\"}</td>\r\n  //   //       <td style=\"border: 1px solid #000; padding: 8px;\" >${currentBalance + firstBalance}</td>\r\n  //   //     </tr>\r\n  //   //   `;\r\n\r\n  //   //   if (\r\n  //   //     index === Records.length - 1 ||\r\n  //   //     Records[index + 1].account_id !== row.account_id\r\n  //   //   ) {\r\n  //   //     tableContent += `\r\n  //   //       <tr>\r\n  //   //         <td colspan=\"4\" style=\"border: 1px solid #000; padding: 8px;\">Total for Account ${row.account.type.name}</td>\r\n  //   //         <td style=\"color: green; border: 1px solid #000; padding: 8px;\">${accountTotalDeposit + (firstBalance > 0 && firstBalance)}</td>\r\n  //   //         <td style=\"color: red; border: 1px solid #000; padding: 8px;\">${accountTotalWithdraw + (firstBalance < 0 && Math.abs(firstBalance))}</td>\r\n  //   //         <td style=\"border: 1px solid #000; padding: 8px;\">${currentBalance}</td>\r\n  //   //       </tr>\r\n  //   //     `;\r\n  //   //   }\r\n  //   // });\r\n\r\n  //   // tableContent += `</tbody></table>`;\r\n  //   // pdfContent += tableContent;\r\n\r\n  //   // // استفاده از html2pdf برای تبدیل HTML به PDF\r\n  //   // const element = document.createElement('div');\r\n  //   // element.innerHTML = pdfContent; // افزودن محتوای HTML به عنصر\r\n\r\n  //   // if (imageUrl) {\r\n  //   //   const fileName = imageUrl.split(\"/\").pop(); // تقسیم رشته و گرفتن آخرین بخش\r\n  //   //   const imageSrc = Source.getAddress() + \"/api/getImage/\" + fileName;\r\n\r\n  //   //   // استفاده از html2pdf و اضافه کردن تصویر بعد از بارگذاری\r\n  //   //   html2pdf()\r\n  //   //     .from(element)\r\n  //   //     .toPdf()\r\n  //   //     .get('pdf')\r\n  //   //     .then(function (pdf) {\r\n  //   //       const pageWidth = pdf.internal.pageSize.width;\r\n  //   //       const pageHeight = pdf.internal.pageSize.height;\r\n  //   //       const imgWidth = 30;\r\n  //   //       const imgHeight = 30;\r\n  //   //       const x = pageWidth - imgWidth - 10; // 10 پیکسل فاصله از لبه راست\r\n  //   //       const y = 20; // 10 پیکسل فاصله از لبه بالای صفحه\r\n  //   //       pdf.addImage(imageSrc, 'JPEG', x, y, imgWidth, imgHeight);\r\n  //   //       pdf.save(\"report.pdf\");\r\n  //   //     });\r\n  //   // } else {\r\n  //   //   html2pdf().from(element).save(\"report.pdf\");\r\n  //   // }\r\n  // };\r\n\r\n  // };       این کد کامل است شما تغییرات لازم را بیاورید\r\n\r\n  // تابع برای تولید PDF\r\n    const intl = useIntl(); // استفاده از هوک useIntl برای دسترسی به ترجمه‌ها\r\n    const generatePDF = () => {\r\n      const imageUrl = settings[0]?.company_pic;\r\n      let imageSrc = \"\";\r\n      const isLTR = localStorage.getItem(\"language\") === \"en\";\r\n      if (imageUrl) {\r\n        const fileName = imageUrl.split(\"/\").pop();\r\n        imageSrc = Source.getAddress() + \"/api/getImage/\" + fileName;\r\n      }\r\n      \r\n      const reportHTML = `\r\n        <div id=\"table-to-print\" style=\"padding: 20px; border: 1px solid #ccc; border-top: 5px solid #4a5cf2; background-color: white;\">\r\n          <style>\r\n            @media print {\r\n              body {\r\n                width: 210mm !important;\r\n                height: 297mm !important;\r\n                margin: 0 !important;\r\n                padding: 0 !important;\r\n                -webkit-print-color-adjust: exact;\r\n                print-color-adjust: exact;\r\n              }\r\n              .page-break {\r\n                page-break-after: always;\r\n                break-after: page;\r\n              }\r\n              .avoid-break {\r\n                page-break-inside: avoid;\r\n                break-inside: avoid;\r\n              }\r\n              thead {\r\n                display: table-header-group;\r\n              }\r\n              tfoot {\r\n                display: table-footer-group;\r\n              }\r\n              tr {\r\n                page-break-inside: avoid;\r\n                break-inside: avoid;\r\n              }\r\n              .table-container {\r\n                page-break-inside: auto;\r\n              }\r\n            }\r\n          </style>\r\n          <h1 style=\"text-align: center; margin: 0 0 20px 0; padding: 20px; color: white; font-weight: bold; background-color: #17a2b8;\">\r\n            ${settings[0]?.company_name || \"-\"}\r\n          </h1>\r\n          <div style=\"display: flex; justify-content: space-between; font-family: iransans; padding: 10px;\" dir=\"${isLTR ? 'ltr' : 'rtl'}\">\r\n            <div style=\"margin-top: 10px;\" dir=\"${isLTR ? 'ltr' : 'rtl'}\">\r\n              <p style=\"font-weight: bold;\">\r\n                ${intl.formatMessage({ id: 'Address' })}: ${settings[0]?.address || \"-\"}\r\n              </p>\r\n              <p style=\"font-weight: bold;\" dir=\"${isLTR ? 'ltr' : 'rtl'}\">\r\n                ${intl.formatMessage({ id: 'Phone' })}: ${settings[0]?.phone || \"-\"}\r\n              </p>\r\n              <p style=\"font-weight: bold;\">\r\n                ${intl.formatMessage({ id: 'Customer' })}: ${customername && customername}   ${dateinpage ? intl.formatMessage({ id: 'From' }):\"\"}${dateinpage ? dateform(dateinpage) : \"\"} \r\n                ${dateinpageend ? intl.formatMessage({ id: 'To' }):\"\"}${dateinpageend ? dateform(dateinpageend) : \"\"}\r\n              </p>\r\n            </div>\r\n            <div style=\"margin-top: 10px;\" dir=\"${isLTR ? 'ltr' : 'rtl'}\">\r\n              <p style=\"font-weight: bold;\">\r\n                ${intl.formatMessage({ id: 'Address' })}: ${settings[0]?.address || \"-\"}\r\n              </p>\r\n              <p style=\"font-weight: bold;\">\r\n                ${intl.formatMessage({ id: 'Date Print' })}: ${Daterow(new Date().toISOString()) || \"-\"}\r\n              </p>\r\n            </div>\r\n            <div style=\"width: 150px; height: 150px; border: 2px solid aliceblue; overflow: hidden;\">\r\n              <img src=\"${imageSrc}\" style=\"width: 100%; height: 100%; object-fit: cover;\" alt=\"Profile\"/>\r\n            </div>\r\n          </div>\r\n          <div style=\"overflow-x: auto;\" class=\"table-container\">\r\n            <table style=\"width: 100%; border-collapse: collapse; text-align: center;\"\r\n             dir=\"${isLTR ? 'ltr' : 'rtl'}\"\r\n            >\r\n              <thead>\r\n                <tr style=\"background-color: #f0f0f5; font-weight: bold;\">\r\n                  <th style=\"border: 1px solid #ddd; padding: 10px;\">${intl.formatMessage({ id: 'No' })}</th>\r\n                  <th style=\"border: 1px solid #ddd; padding: 10px;\">${intl.formatMessage({ id: 'Date' })}</th>\r\n                  <th style=\"border: 1px solid #ddd; padding: 10px;\">${intl.formatMessage({ id: 'Description' })}</th>\r\n                  <th style=\"border: 1px solid #ddd; padding: 10px;\">${intl.formatMessage({ id: 'Currency' })}</th>\r\n                  <th style=\"border: 1px solid #ddd; padding: 10px; color: green;\">${intl.formatMessage({ id: 'Deposit' })}</th>\r\n                  <th style=\"border: 1px solid #ddd; padding: 10px; color: red;\">${intl.formatMessage({ id: 'Withdraw' })}</th>\r\n                  <th style=\"border: 1px solid #ddd; padding: 10px;\">${intl.formatMessage({ id: 'Balance' })}</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                ${Records?.map((row, index) => {\r\n                  let firstBalance = 0;\r\n                  BelanceAccount.forEach((element) => {\r\n                    if (element.account_id === row.account_id) {\r\n                      firstBalance = parseInt(element.total);\r\n                    }\r\n                  });\r\n    \r\n                  let isNewAccount = row.account.id !== previousAccountId;\r\n                  if (isNewAccount) {\r\n                    currentBalancep = 0;\r\n                    previousAccountId = row.account.id;\r\n                    No = 1;\r\n                    accountTotalDepositp = 0;\r\n                    accountTotalWithdraw = 0;\r\n                  } else {\r\n                    No += 1;\r\n                  }\r\n    \r\n                  let deposit = 0, withdraw = 0;\r\n                  if ([\"deposite\", \"to\", \"com\"].includes(row.type)) {\r\n                    deposit = parseInt(row.amount);\r\n                    currentBalancep += deposit;\r\n                    accountTotalDepositp += deposit;\r\n                  } else if ([\"withdraw\", \"from\"].includes(row.type)) {\r\n                    withdraw = parseInt(row.amount);\r\n                    currentBalancep -= withdraw;\r\n                    accountTotalWithdrawp += withdraw;\r\n                  }\r\n    \r\n                  let isLastTransaction = index === Records.length - 1 || Records[index + 1]?.account_id !== row.account_id;\r\n    \r\n                  return `\r\n                    ${firstBalance !== 0 ? `\r\n                      <tr class=\"avoid-break\">\r\n                        <td style=\"border: 1px solid #ddd; padding: 10px;\">0</td>\r\n                        <td style=\"border: 1px solid #ddd; padding: 10px;\">${Daterow(Date_Start)}</td>\r\n                        <td style=\"border: 1px solid #ddd; padding: 10px;\">${intl.formatMessage({ id: 'table.previousBalance' })}</td>\r\n                        <td style=\"border: 1px solid #ddd; padding: 10px;\">${row.account.type.name}</td>\r\n                        <td style=\"border: 1px solid #ddd; padding: 10px; color: green;\"><span dir=\"ltr\">${firstBalance > 0 ? firstBalance : \"0\"}</span></td>\r\n                        <td style=\"border: 1px solid #ddd; padding: 10px; color: red;\"><span dir=\"ltr\">${firstBalance < 0 ? Math.abs(firstBalance) : \"0\"}</span></td>\r\n                        <td style=\"border: 1px solid #ddd; padding: 10px;\"><span dir=\"ltr\">${formatNumber(firstBalance)}</span></td>\r\n                      </tr>` : \"\"}\r\n                    <tr class=\"avoid-break\">\r\n                      <td style=\"border: 1px solid #ddd; padding: 10px;\">${No}</td>\r\n                      <td style=\"border: 1px solid #ddd; padding: 10px;\">${Daterow(row.date_created)}</td>\r\n                      <td style=\"border: 1px solid #ddd; padding: 10px;\">${row.discription !== null ? row.discription : '-'}</td>\r\n                      <td style=\"border: 1px solid #ddd; padding: 10px;\">${row.account.type.name}</td>\r\n                      <td style=\"border: 1px solid #ddd; padding: 10px; color: green;\"><span dir=\"ltr\">${formatNumber(deposit)}</span></td>\r\n                      <td style=\"border: 1px solid #ddd; padding: 10px; color: red;\"><span dir=\"ltr\">${formatNumber(withdraw)}</span></td>\r\n                      <td style=\"border: 1px solid #ddd; padding: 10px;\"><span dir=\"ltr\">${formatNumber(currentBalancep + firstBalance)}</span></td>\r\n                    </tr>\r\n                    ${isLastTransaction ? `\r\n                      <tr style=\"background-color: #f0f0f5; font-weight: bold;\" class=\"avoid-break\">\r\n                        <td colspan=\"4\" style=\"border: 1px solid #ddd; padding: 10px;\">\r\n                          <strong><span dir=\"ltr\">${intl.formatMessage({ id: 'Total' })} ${row.account.type.name}</span></strong>\r\n                        </td>\r\n                        <td style=\"border: 1px solid #ddd; padding: 10px; color: green;\">\r\n                          <strong><span dir=\"ltr\">${formatNumber(accountTotalDepositp + (firstBalance > 0 ? firstBalance : 0))}</span></strong>\r\n                        </td>\r\n                        <td style=\"border: 1px solid #ddd; padding: 10px; color: red;\">\r\n                          <strong><span dir=\"ltr\">${formatNumber(accountTotalWithdrawp + (firstBalance < 0 ? Math.abs(firstBalance) : 0))}</span></strong>\r\n                        </td>\r\n                        <td style=\"border: 1px solid #ddd; padding: 10px;\">\r\n                          <strong><span dir=\"ltr\">${formatNumber(currentBalancep + firstBalance)}</span></strong>\r\n                        </td>\r\n                      </tr>\r\n                      ${(index < Records.length - 1) ? '<tr class=\"page-break\"><td colspan=\"7\"></td></tr>' : ''}\r\n                    ` : \"\"}\r\n                  `;\r\n                }).join(\"\")}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      `;\r\n    \r\n      const element = document.createElement(\"div\");\r\n      element.innerHTML = reportHTML;\r\n      document.body.appendChild(element);\r\n    \r\n      const options = {\r\n        margin: 10,\r\n        filename: \"report.pdf\",\r\n        image: { type: \"jpeg\", quality: 0.98 },\r\n        html2canvas: {\r\n          scale: 2,\r\n          useCORS: setting[0]?.company_pic?.includes(\"http\"),\r\n          logging: false,\r\n          onclone: (clonedDoc) => {\r\n            clonedDoc.getElementById(\"table-to-print\").classList.add(\"desktop-mode\");\r\n          },\r\n        },\r\n        jsPDF: { unit: \"mm\", format: \"a4\", orientation: \"portrait\" },\r\n      };\r\n    \r\n      html2pdf()\r\n        .from(element)\r\n        .set(options)\r\n        .save()\r\n        .then(() => document.body.removeChild(element));\r\n    };\r\n  \r\n\r\n  // فراخوانی تابع برای تولید PDF\r\n  // generatePDF();\r\n  const [dateinpage, setdateinpage] = useState(null);\r\n  const [dateinpageend, setdateinpageend] = useState(null);\r\n  const [customername, setcustomername] = useState(\"\");\r\n  const [BelanceAccount, setBelanceAccount] = useState([]);\r\n  const Submit = () => {\r\n    if(selectedValues.length===0){\r\n      showAlert({\r\n        position: \"top-end\",\r\n        icon: \"error\",\r\n        title: (\r\n          <FormattedMessage id=\"You must select currency!\" />\r\n        ),\r\n        showConfirmButton: false,\r\n        timer: 1000,\r\n      });\r\n      return;\r\n    }\r\n    if (!Customer) {\r\n      showAlert({\r\n        position: \"top-end\",\r\n        icon: \"error\",\r\n        title: (\r\n          <FormattedMessage id=\"You must select from account and to account!\" />\r\n        ),\r\n        showConfirmButton: false,\r\n        timer: 1000,\r\n      });\r\n      return;\r\n    }\r\n    // console.log(Customer);\r\n    let values = selectedValues;\r\n    const searchaccount = selectedValues.map((element) => element.id).join(\",\");\r\n    console.log(Date_Start || Date_End ? \"true\": \"false\");\r\n    axios\r\n      .get(Source.getAddress() + \"/api/report\", {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n        },\r\n        params: {\r\n          // Customerid: Customer.id,\r\n          AccountId: searchaccount,\r\n          startDate: Date_Start,\r\n          endDate: Date_End,\r\n          report: \"true\",\r\n          unlimite: Date_Start || Date_End ? \"true\": \"false\" ,\r\n        },\r\n        paramsSerializer: (params) =>\r\n          stringify(params, { arrayFormat: \"brackets\" }),\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        selectedDayEnd && setdateinpageend(selectedDayEnd);\r\n        selectedDayStart && setdateinpage(selectedDayStart);\r\n        setcustomername(Customer.name);\r\n        setaccounts([]);\r\n        setCustomer(\"\");\r\n        setselectedDayEnd(null);\r\n        setselectedDayStart(null);\r\n        setBelance(values);\r\n        let belance = [];\r\n        selectedValues.forEach((element) => {\r\n          let add = {\r\n            id: element.id,\r\n            belance: parseInt(element.belance),\r\n          };\r\n          belance.push(add);\r\n        });\r\n        setSelectedValues([]);\r\n        setBelance(belance);\r\n        if (Date_Start || Date_End) {\r\n          setBelanceAccount(res.data.total);\r\n          setRecords(res.data.data);\r\n        } else {\r\n          setRecords(res.data);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  let previousAccountId = null;\r\n  let No = 0;\r\n  let currentBalancep = 0;\r\n  let accountTotalDepositp = 0;\r\n  let accountTotalWithdrawp = 0;\r\n  let currentBalance = 0;\r\n  let accountTotalDeposit = 0;\r\n  let accountTotalWithdraw = 0;\r\n  let flag=true;\r\n  let firstbelance = 0;\r\n  // console.log(localStorage.getItem(\"date\"));\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `${Source.getAddress()}/api/customers`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n            },\r\n            params: { query: searchQuery, do: \"ok\" }, // ارسال پارامتر جستجو به سرور\r\n          }\r\n        );\r\n        // setSelectedOption(response.data);\r\n        const data = response.data;\r\n        setcustomers(data);\r\n        // console.log('useeffect');\r\n\r\n        // if (data && data.length === 0) {\r\n        //   setSelectedOptionTo({ id: 0, name: searchQueryTo });\r\n        // } else {\r\n        //   setOptionsTo(data); // ذخیره داده‌ها برای نمایش در لیست\r\n        // }\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    if (!searchQuery || searchQuery?.length < 3) {\r\n      setcustomers([]);\r\n      return;\r\n    } else {\r\n      fetchData();\r\n    }\r\n  }, [searchQuery]); // اضافه کردن searchQuery به وابستگی‌های useEffect\r\n  const handleSeletecOption = (data) => {\r\n    setCustomer(data);\r\n    if (data) {\r\n      fetchAccounts(data.id);\r\n      // console.log(data);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"w-100 h-100 responsive-container\"\r\n    dir={localStorage.getItem(\"language\") === \"en\" ? \"ltr\" : \"rtl\"}\r\n    >\r\n      {/* English iransans */}\r\n      <div className=\"pt-4 pb-4 h-100\">\r\n        <button\r\n          onClick={() => generatePDF()}\r\n          type=\"button\"\r\n          className=\"btn btn-outline-success fw-bold mb-2\"\r\n        >\r\n          <FormattedMessage id=\"Print Pdf\" />\r\n        </button>\r\n        <div\r\n          className=\"rounded-3 px-4 p-1 mb-2\"\r\n          style={{\r\n            boxShadow:\r\n              \"2px 2px 2px 0 rgba(0, 0, 0, 0.2), 0 0px 2px 2px rgba(0, 0, 0, 0.1)\",\r\n          }}\r\n        >\r\n          <h2 className=\"mt-3 \">\r\n            <FormattedMessage id=\"Create Report From A Customer\" />\r\n          </h2>\r\n          <div className=\"row mb-3 mt-1\">\r\n            <div className=\"col-12 col-sm-6 mb-3\">\r\n              <label>\r\n                <FormattedMessage id=\"Customer Name\" />\r\n              </label>\r\n              <Combo_Customer\r\n                name={<FormattedMessage id=\"Customer\" />}\r\n                setAddAccountModal={() => console.log()}\r\n                type={false}\r\n                searchQuery={searchQuery}\r\n                handleInputChange={handleCustomer}\r\n                setSelectedOption={handleSeletecOption}\r\n                selectedOption={Customer}\r\n                options={customer}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-sm-6 mb-3\">\r\n              <label>\r\n                <FormattedMessage id=\"Currency\" />\r\n              </label>\r\n              <Multiselect\r\n                className=\"bg-white\"\r\n                options={accounts}\r\n                selectedValues={selectedValues}\r\n                onSelect={onSelect}\r\n                onRemove={onRemove}\r\n                displayValue=\"moneyType\"\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-sm-6 mb-3\">\r\n              <label>\r\n                <FormattedMessage id=\"Start Date\" />\r\n              </label>\r\n              <InputDatePicker\r\n                className=\"fw-normal\"\r\n                value={selectedDayStart}\r\n                onChange={handleDateChangeStart}\r\n                inputPlaceholder={\r\n                  settings[0].date === \"Persian\"\r\n                    ? \"تاریخ را وارد کنید\"\r\n                    : \"Enter the date\"\r\n                }\r\n                locale={settings[0].date === \"Persian\" ? \"fa\" : \"en\"}\r\n                colorPrimary=\"#0fbcf9\"\r\n                maximumDate={{ year: 9999, month: 12, day: 31 }}\r\n                minimumDate={{ year: 1, month: 1, day: 1 }}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-sm-6 mb-3\">\r\n              <label>\r\n                <FormattedMessage id=\"End Date\" />\r\n              </label>\r\n              <InputDatePicker\r\n                className=\"fw-normal\"\r\n                value={selectedDayEnd}\r\n                onChange={handleDateChangeEnd}\r\n                inputPlaceholder={\r\n                  settings[0].date === \"Persian\"\r\n                    ? \"تاریخ را وارد کنید\"\r\n                    : \"Enter the date\"\r\n                }\r\n                locale={settings[0].date === \"Persian\" ? \"fa\" : \"en\"}\r\n                colorPrimary=\"#0fbcf9\"\r\n                maximumDate={{ year: 9999, month: 12, day: 31 }}\r\n                minimumDate={{ year: 1, month: 1, day: 1 }}\r\n              />\r\n            </div>\r\n            <div className=\"col-12\">\r\n              <button\r\n                onClick={() => Submit()}\r\n                type=\"button\"\r\n                className=\"btn btn-success p-1\"\r\n                style={{ width: \"100%\", maxWidth: \"8rem\" }} // Full width on small screens, max width on larger\r\n              >\r\n                <FormattedMessage id=\"Add\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div\r\n          ref={containerRef}\r\n          id=\"table-to-print w-s-100\"\r\n          className=\"card card-body m-auto\"\r\n          style={{ borderTop: \"5px solid #4a5cf2\" }}\r\n        >\r\n          <h1 className=\"text-center rounded m-0 mb-2 p-4 text-light fw-bold bg-info \" style={{width:\"100%\"}}>\r\n            <FormattedMessage id=\"Report Customer\" />\r\n          </h1>\r\n          <div className=\"ps-2 d-flex flex-column flex-sm-row justify-content-between iransans\">\r\n            <div className=\"mt-3\">\r\n              <div className=\"m-2\">\r\n                <p className=\"fw-bold\">\r\n                  <FormattedMessage id=\"Company Name\" />:{\" \"}\r\n                  {setting[0]?.company_name || null}{\" \"}\r\n                </p>\r\n                <p className=\"fw-bold\">\r\n                  <FormattedMessage id=\"Address\" />:{\" \"}\r\n                  {setting[0]?.address || null}{\" \"}\r\n                </p>\r\n                <p className=\"fw-bold\">\r\n                  <FormattedMessage id=\"Phone\" />: {setting[0]?.phone || null}\r\n                </p>\r\n                <p className=\"fw-bold\">\r\n                  <FormattedMessage id=\"Customer\" />:{\" \"}\r\n                  {customername && customername} {selectedDayStart && <FormattedMessage id=\"From\" />}{\" \"}\r\n                  {dateinpage && dateform(dateinpage)} {selectedDayEnd &&  <FormattedMessage id=\"To\" />}{\" \"}\r\n                  {dateinpageend && dateform(dateinpageend)}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"mt-4\">\r\n              <p className=\"fw-bold\">\r\n                <FormattedMessage id=\"Email\" />: {setting[0]?.email || null}\r\n              </p>\r\n              <p className=\"fw-bold\">\r\n                <FormattedMessage id=\"Description\" />:{\" \"}\r\n                {setting[0]?.description || null}\r\n              </p>\r\n            </div>\r\n            <div className=\"me-2\" style={{ width: \"150px\", height: \"150px\" }}>\r\n              <img\r\n                className=\"td_img rounded\"\r\n                src={setting[0]?.company_pic || null}\r\n                style={{\r\n                  width: \"100%\",\r\n                  height: \"100%\",\r\n                  objectFit: \"cover\",\r\n                  outline: \"2px solid aliceblue\",\r\n                }}\r\n                alt=\"Profile\"\r\n              />\r\n            </div>\r\n          </div>\r\n          {/* Responsive Table */}\r\n          <div className=\"table-responsive\">\r\n            <table className=\"table-custom table-custom-light table-custom-striped table-custom-hover\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">\r\n                    <FormattedMessage id=\"No\" />\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    <FormattedMessage id=\"Date\" />\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    <FormattedMessage id=\"Description\" />\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    <FormattedMessage id=\"Currency\" />\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    <FormattedMessage id=\"Deposit\" />\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    <FormattedMessage id=\"Withdraw\" />\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    <FormattedMessage id=\"Balance\" />\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"table-group-divider\">\r\n                {Records &&\r\n                  Records.map((row, index) => {\r\n                    BelanceAccount.forEach((element) => {\r\n                      if (element.account_id === row.account_id && flag) {\r\n                        firstbelance = parseInt(element.total);\r\n                        flag=false;\r\n                      }\r\n                    });\r\n                    if (row.account.id !== previousAccountId) {\r\n                      currentBalance = 0;\r\n                      previousAccountId = row.account.id;\r\n                      No = 1;\r\n                      accountTotalDeposit = 0;\r\n                      accountTotalWithdraw = 0;\r\n                    } else {\r\n                      No += 1;\r\n                    }\r\n                    if (row.type === \"deposite\") {\r\n                      currentBalance += parseInt(row.amount);\r\n                      accountTotalDeposit += parseInt(row.amount);\r\n                    } else if (row.type === \"withdraw\") {\r\n                      currentBalance -= parseInt(row.amount);\r\n                      accountTotalWithdraw += parseInt(row.amount);\r\n                    } else if (row.type === \"from\") {\r\n                      currentBalance -= parseInt(row.amount);\r\n                      accountTotalWithdraw += parseInt(row.amount);\r\n                    } else if (row.type === \"to\") {\r\n                      currentBalance += parseInt(row.amount);\r\n                      accountTotalDeposit += parseInt(row.amount);\r\n                    } else if (row.type === \"com\") {\r\n                      currentBalance += parseInt(row.amount);\r\n                      accountTotalDeposit += parseInt(row.amount);\r\n                    }\r\n                    const isLastTransactionForAccount =\r\n                      index === Records.length - 1 ||\r\n                      Records[index + 1]?.account_id !== row.account_id;\r\n                      flag=isLastTransactionForAccount;\r\n                    return (\r\n                      <React.Fragment key={index}>\r\n                        {!flag && BelanceAccount.length!==0  && (\r\n                          <tr className={`${No % 2 !== 0 && \"striped\"}`}>\r\n                            <th scope=\"row\">{No}</th>\r\n                            <td>{Daterow(Date_Start)}</td>\r\n                            <td>\r\n                              <FormattedMessage id=\"This is the value for prev transactions\" />\r\n                            </td>\r\n                            <td>{row.account.type.name}</td>\r\n                            <td dir=\"ltr\" style={{ color: \"green\" }}>\r\n                              {firstbelance > 0 ? formatNumber(firstbelance) : \"0\"}\r\n                            </td>\r\n                            <td dir=\"ltr\" style={{ color: \"red\" }}>\r\n                              {firstbelance <= 0 ? formatNumber(firstbelance) : \"0\"}\r\n                            </td>\r\n                            <td dir=\"ltr\">{formatNumber(firstbelance)}</td>\r\n                          </tr>\r\n                        )\r\n                        }\r\n                        <tr className={`${No % 2 !== 0 && \"striped\"}`}>\r\n                          <th scope=\"row\">{No}</th>\r\n                          <td>{Daterow(row.date_created)}</td>\r\n                          <td>{row.discription}</td>\r\n                          <td>{row.account.type.name}</td>\r\n                          <td  style={{ color: \"green\" }}>\r\n                            <span dir=\"ltr\">\r\n                              {row.type === \"deposite\" ||\r\n                            row.type === \"to\" ||\r\n                            row.type === \"com\"\r\n                              ? formatNumber(row.amount)\r\n                              : \"0\"}\r\n                              </span>\r\n                          </td>\r\n                          <td  style={{ color: \"red\" }}>\r\n                            <span>\r\n                            {row.type === \"withdraw\" || row.type === \"from\"\r\n                              ? formatNumber(row.amount)\r\n                              : \"0\"}\r\n                            </span>\r\n                          </td>\r\n                          <td >\r\n                            <span dir=\"ltr\">\r\n                            {formatNumber(currentBalance + firstbelance)}\r\n                            </span>\r\n                            \r\n                            </td>\r\n                        </tr>\r\n                        {isLastTransactionForAccount && (\r\n                          <tr\r\n                            className=\"table-summary\"\r\n                            style={{\r\n                              backgroundColor: \"#f0f0f5\",\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            <td colSpan=\"4\">\r\n                              <strong>\r\n                              <FormattedMessage id=\"This is the value for prev transactions\" /> {row.account.type.name}\r\n                              </strong>\r\n                            </td>\r\n                            <td style={{ color: \"green\" }}>\r\n                              <strong dir=\"ltr\">\r\n                                {formatNumber(accountTotalDeposit +\r\n                                  (firstbelance > 0 && firstbelance))}\r\n                              </strong>\r\n                            </td>\r\n                            <td style={{ color: \"red\" }}>\r\n                              <strong dir=\"ltr\">\r\n                                {formatNumber(accountTotalWithdraw +\r\n                                  (firstbelance < 0 && Math.abs(firstbelance)))}\r\n                              </strong>\r\n                            </td>\r\n                            <td>\r\n                              <strong dir=\"ltr\">{formatNumber(currentBalance + firstbelance)}</strong>\r\n                            </td>\r\n                          </tr>\r\n                        )}\r\n                      </React.Fragment>\r\n                    );\r\n                  })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport \"jalaali-react-date-picker/lib/styles/index.css\";\r\nimport { InputDatePicker } from \"jalaali-react-date-picker\";\r\nimport moment from 'moment-jalaali';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport zIndex from '@mui/material/styles/zIndex';\r\n\r\nexport default function Datepicker_customer({ handle_date,default_value ,lebal,setSelectedDay,selectedDay,onKeyDown,index=\"10000000000000\"}) {\r\n  const { settings, errors, statuss } = useSelector((state) => state.settings);\r\n  const handleDateChange = (date) => {  \r\n    setSelectedDay(date);\r\n        if(date!=null){\r\n        const handl={year:date._a[0],month:date._a[1]+1,day:date._a[2]}\r\n        // console.log(handl);\r\n      handle_date(handl);\r\n        } };\r\n  return (\r\n    <div className=\"col-3 m-2 mt-0 fw-normal\" style={{zIndex:index}}>\r\n      <label htmlFor=\"\" className='p-0 m-0 fw-bold'>{lebal}</label>\r\n      <InputDatePicker\r\n      // style={{zIndex:'10000000000000'}}\r\n        className='fw-normal afgFont'\r\n        onKeyDown={onKeyDown}\r\n        value={selectedDay}\r\n        sx={{\r\n          fontFamily: 'CustomFont1, sans-serif',\r\n          '& .MuiInputBase-input': {\r\n            fontFamily: 'CustomFont1, sans-serif !important'\r\n          }\r\n        }}\r\n        inputProps={{\r\n          style: {\r\n            fontFamily: 'CustomFont1' // ارث بری از تم\r\n          }\r\n        }}\r\n        popupStyles={{\r\n          fontFamily: \"'CustomFont1', sans-serif\",\r\n          // برای متن‌های داخل پاپ‌آپ تقویم\r\n          '& .jalaali-datepicker-header': {\r\n            fontFamily: \"'CustomFont1', sans-serif !important\",\r\n          },\r\n          '& .jalaali-datepicker-day-names': {\r\n            fontFamily: \"'CustomFont1', sans-serif !important\",\r\n          },\r\n          '& .jalaali-datepicker-days': {\r\n            fontFamily: \"'CustomFont1', sans-serif !important\",\r\n          },\r\n          '& .jalaali-datepicker-footer': {\r\n            fontFamily: \"'CustomFont1', sans-serif !important\",\r\n          },\r\n          '& *': {\r\n            fontFamily: \"'CustomFont1', sans-serif !important\",\r\n          }\r\n        }}\r\n        onChange={handleDateChange}\r\n        inputPlaceholder={settings[0].date === \"Persian\" ? 'تاریخ را وارد کنید' : 'Enter the date'}\r\n        locale={settings[0].date === \"Persian\" ? 'fa' : 'en'}\r\n        // locale='en'\r\n        colorPrimary=\"#0fbcf9\"\r\n        maximumDate={{ year: 9999, month: 12, day: 31 }}\r\n        minimumDate={{ year: 1, month: 1, day: 1 }}\r\n      />\r\n    </div>\r\n  );\r\n}"],"names":["_ref","isEditable","name","type","options","Onsearch","selectedOption","setAddAccountModal","setSelectedOption","searchQuery","handleInputChange","customStyles","menuPortal","base","_objectSpread","zIndex","formatMessage","useIntl","_jsx","className","children","Select","classNamePrefix","inputValue","value","onChange","sselectedOption","onInputChange","getOptionLabel","option","style","display","alignItems","concat","getOptionValue","placeholder","id","isClearable","components","MenuList","props","_jsxs","justifyContent","padding","borderTop","cursor","backgroundColor","onClick","isSearchable","isDisabled","menuPortalTarget","document","body","styles","formatNumber","number","toLocaleString","ReportCustomers","_setting$2","_setting$3","_setting$4","_setting$5","_setting$6","_setting$7","dispatch","useDispatch","showAlert","useShowAlert","settings","errors","statuss","useSelector","state","customer","setcustomers","useState","accounts","setaccounts","selectedDayStart","setselectedDayStart","selectedDayEnd","setselectedDayEnd","Date_Start","setDate_Start","Date_End","setDate_End","Records","setRecords","setting","setsettings","email","phone","address","description","Settings","Setsettings","setSearchQuery","useEffect","getSettings","length","handle_date","jalaliDate","year","month","day","now","jalaali","Date","String","getHours","padStart","getMinutes","t","isoString","toISOString","handle_dateEnd","selectedValues","setSelectedValues","Belance","setBelance","Customer","setCustomer","Report","SetReport","Daterow","d","date","formattedDate","getFullYear","getMonth","getDate","hours","aa","moment","format","dateform","containerRef","useRef","intl","dateinpage","setdateinpage","dateinpageend","setdateinpageend","customername","setcustomername","BelanceAccount","setBelanceAccount","previousAccountId","No","currentBalancep","accountTotalDepositp","accountTotalWithdrawp","currentBalance","accountTotalDeposit","accountTotalWithdraw","flag","firstbelance","async","data","axios","get","Source","getAddress","headers","Authorization","localStorage","getItem","params","query","do","error","fetchData","dir","generatePDF","_settings$","_settings$2","_settings$3","_settings$4","_settings$5","_setting$","_setting$$company_pic","imageUrl","company_pic","imageSrc","isLTR","fileName","split","pop","reportHTML","company_name","map","row","index","_Records","firstBalance","forEach","element","account_id","parseInt","total","account","deposit","withdraw","includes","amount","isLastTransaction","Math","abs","date_created","discription","join","createElement","innerHTML","appendChild","margin","filename","image","quality","html2canvas","scale","useCORS","logging","onclone","clonedDoc","getElementById","classList","add","jsPDF","unit","orientation","html2pdf","from","set","save","then","removeChild","FormattedMessage","boxShadow","Combo_Customer","token","fetchWithToken","res","delete","CustomerId","customerid","response","status","refreshToken","newAccessToken","post","refresh","access","setItem","refreshError","fetchAccounts","Multiselect","onSelect","selectedList","selectedItem","onRemove","removedItem","displayValue","InputDatePicker","handl","_a","inputPlaceholder","locale","colorPrimary","maximumDate","minimumDate","Submit","position","icon","title","showConfirmButton","timer","values","searchaccount","AccountId","startDate","endDate","report","unlimite","paramsSerializer","stringify","arrayFormat","belance","push","catch","err","width","maxWidth","ref","height","src","objectFit","outline","alt","scope","_Records2","isLastTransactionForAccount","React","color","fontWeight","colSpan","Datepicker_customer","default_value","lebal","setSelectedDay","selectedDay","onKeyDown","htmlFor","sx","fontFamily","inputProps","popupStyles"],"sourceRoot":""}