{"version":3,"file":"static/js/1516.d5f8506c.chunk.js","mappings":"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","sources":["pages/forms/ListBox.js","pages/forms/Edit_ThirdDepttable.js","pages/ThirdDeptDtable.js","pages/Transformations/ComboBoxDeposite.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Select from 'react-select';\r\nimport { ChevronDown } from 'lucide-react';\r\nimport { FormattedMessage, useIntl } from 'react-intl';\r\n\r\nconst ListBox = ({\r\n  isDisabled = false,\r\n  options = [],\r\n  selectedOption,\r\n  setSelectedOption,\r\n  width = '100%',\r\n}) => {\r\n  const { formatMessage, locale } = useIntl();\r\n  const isRTL = locale === 'fa'; // Assuming 'fa' is your Persian locale code\r\n  \r\n  const allUsersOption = { \r\n    name: <FormattedMessage id=\"All Users\" />, \r\n    id: 0 \r\n  };\r\n  \r\n  const updatedOptions = [allUsersOption, ...options];\r\n\r\n  useEffect(() => {\r\n    if (!selectedOption) {\r\n      setSelectedOption(allUsersOption);\r\n    }\r\n  }, [selectedOption, setSelectedOption, allUsersOption]);\r\n\r\n  const handleChange = (selectedOption) => {\r\n    setSelectedOption(selectedOption);\r\n  };\r\n\r\n  const customStyles = {\r\n    control: (base, state) => ({\r\n      ...base,\r\n      fontFamily: localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      backgroundColor: '#fff',\r\n      zIndex: 1,\r\n      borderRadius: '8px',\r\n      border: state.isFocused ? '2px solid #4f46e5' : '1px solid #d1d5db',\r\n      boxShadow: state.isFocused ? '0 0 5px rgba(79, 70, 229, 0.5)' : 'none',\r\n      '&:hover': {\r\n        border: '1px solid #4f46e5',\r\n      },\r\n      minHeight: '39px',\r\n      padding: '4px 8px',\r\n      textAlign: isRTL ? 'right' : 'left',\r\n      direction: isRTL ? 'rtl' : 'ltr',\r\n    }),\r\n    menu: (base) => ({\r\n      ...base,\r\n      fontFamily: localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      borderRadius: '8px',\r\n      boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.1)',\r\n      overflow: 'hidden',\r\n      textAlign: isRTL ? 'right' : 'left',\r\n      direction: isRTL ? 'rtl' : 'ltr',\r\n    }),\r\n    option: (base, { isFocused, isSelected }) => ({\r\n      ...base,\r\n      fontFamily: localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      backgroundColor: isSelected ? '#4f46e5' : isFocused ? '#e0e7ff' : '#fff',\r\n      color: isSelected ? '#fff' : '#111827',\r\n      padding: isRTL ? '12px 16px 12px 8px' : '12px 8px 12px 16px',\r\n      cursor: 'pointer',\r\n      fontSize: '14px',\r\n      textAlign: isRTL ? 'right' : 'left',\r\n      '&:active': {\r\n        backgroundColor: '#4338ca',\r\n      },\r\n    }),\r\n    singleValue: (base) => ({\r\n      ...base,\r\n      fontFamily: localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      fontWeight: 'bold',\r\n      color: '#4f46e5',\r\n      fontSize: '14px',\r\n      textAlign: isRTL ? 'right' : 'left',\r\n      direction: isRTL ? 'rtl' : 'ltr',\r\n    }),\r\n    placeholder: (base) => ({\r\n      ...base,\r\n      fontFamily: localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      fontSize: '14px',\r\n      color: '#6b7280',\r\n      textAlign: isRTL ? 'right' : 'left',\r\n      direction: isRTL ? 'rtl' : 'ltr',\r\n    }),\r\n    dropdownIndicator: (base) => ({\r\n      ...base,\r\n      fontFamily:localStorage.getItem(\"language\") !== \"en\" &&  \"'CustomFont1', sans-serif\",\r\n      padding: '8px',\r\n    }),\r\n    menuPortal: (base) => ({ ...base, zIndex: 10000 }),\r\n    input: (base) => ({\r\n      ...base,\r\n      fontFamily:localStorage.getItem(\"language\") !== \"en\" && \"'CustomFont1', sans-serif\",\r\n      textAlign: isRTL ? 'right' : 'left',\r\n    }),\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className={`mt-3`} \r\n      style={{ width }}\r\n      dir={isRTL ? 'rtl' : 'ltr'}\r\n    >\r\n      <Select\r\n        classNamePrefix=\"custom-select\"\r\n        value={selectedOption}\r\n        onChange={handleChange}\r\n        options={updatedOptions}\r\n        getOptionLabel={(option) => option.name}\r\n        getOptionValue={(option) => option.id}\r\n        placeholder={formatMessage({ id: 'select.placeholder' }) || (isRTL ? 'انتخاب کنید...' : 'Select...')}\r\n        isClearable={false}\r\n        isSearchable={false}\r\n        isDisabled={isDisabled}\r\n        menuPortalTarget={document.body}\r\n        styles={customStyles}\r\n        components={{\r\n          DropdownIndicator: ({ innerProps }) => (\r\n            <div {...innerProps} className={isRTL ? 'pl-2 text-gray-500' : 'pr-2 text-gray-500'}>\r\n              <ChevronDown size={20} />\r\n            </div>\r\n          ),\r\n          ClearIndicator: null,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nListBox.propTypes = {\r\n  isDisabled: PropTypes.bool,\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n      name: PropTypes.node.isRequired,\r\n    })\r\n  ),\r\n  selectedOption: PropTypes.object,\r\n  setSelectedOption: PropTypes.func.isRequired,\r\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nListBox.defaultProps = {\r\n  isDisabled: false,\r\n  options: [],\r\n  selectedOption: null,\r\n  width: '100%',\r\n};\r\n\r\nexport default ListBox;","import React, { useEffect, useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport Select from 'react-select';\r\nimport Source from \"../../Source\";\r\nimport Swal from \"sweetalert2\";\r\n// import Profile from \"../assets/icon/profile.png\";\r\nimport jalaali from \"jalaali-js\";\r\n// import IdNational from \"../assets/icon/national_id.png\";\r\n// import ComboBox from \"./forms/ComboBox\";\r\nimport ComboBox from \"./ComboBox\";\r\n// import Select from \"react-select\";\r\nimport Datepicker_Customer from \"./Datepicker_customer\";\r\n// import moment from \"moment-jalaali\";\r\n// import Combo_Customer from \"./forms/Combo_Customer\";\r\n// import Edit_account from \"./forms/Edit_account\";\r\nimport '../edite.css';\r\nimport Edit_deposite from \"../Edit_deposite\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { useShowAlert  } from \"../../warrper\";\r\n\r\n\r\nexport default function Edit_ThirdDepttable({\r\n  useRef1,\r\n  selectedOption,\r\n  setSelectedOption,\r\n  Edit_Deposit,\r\n  closeEdit,\r\n  open,\r\n  settings,\r\n  EndDateE,\r\n  account,\r\n  setAccount,\r\n  setEditDeposit,\r\n  selectedDay,\r\n  setSelectedDay,\r\n  Diversity,\r\n  setDiversity,\r\n  setCash,\r\n  Cash,\r\n  belance,\r\n  setbelance,\r\n  records,\r\n  setRecords,\r\n  type,settype,primarytype,setprimarytype\r\n}) {\r\n  const [moneyid,setmoneyid]=useState();\r\n  const showAlert = useShowAlert(); \r\n  const Onsearch = (row) => {\r\n    if (row) {\r\n      setmoneyid(row.moneyId);\r\n      setmoneyname(row.moneyType);\r\n      setusername(row.account_name);\r\n      setmoneytype(row.moneyId);\r\n      setidbelance(row.id);\r\n      setselectedBelance((prevState) => ({\r\n        ...prevState,\r\n        id: row.id,\r\n        moneyId: row.moneyId,\r\n        user: row.user,\r\n        moneyType: row.moneyType,\r\n        account: row.account,\r\n        account_name: row.account_name,\r\n        type: row.type,\r\n        belance: row.belance, // Assuming 'belance' is correct, it seems like a typo\r\n        date_created: row.date_created,\r\n      }));\r\n      let belanceName = row.account_name + \" \" + row.moneyType;\r\n      setEditDeposit({\r\n        ...Edit_Deposit,\r\n        account: row.id,\r\n      });\r\n    }\r\n  };\r\n  const [AddDeposite, setAddDeposite] = useState({\r\n    user: 0,\r\n    discription: \"\",\r\n    amount: \"\",\r\n    date: null,\r\n    account: 0,\r\n    type: \"deposite\",\r\n    cash: 0,\r\n    delete: \"False\",\r\n  });\r\n  const [selectedBelance, setselectedBelance] = useState({\r\n    id: 0,\r\n    account_name: \"\",\r\n    moneyType: \"\",\r\n    account: 0,\r\n    moneyId: 0,\r\n    user: 0,\r\n    type: 0,\r\n    belance: 0,\r\n    date_created: \"\",\r\n  });\r\n  const [idbelance, setidbelance] = useState(0);\r\n  const [moneytype, setmoneytype] = useState(0);\r\n  const [username, setusername] = useState(\"\");\r\n  const [moneyname, setmoneyname] = useState(\"\");\r\n\r\n  const Submit_Edit = async () => {\r\n    // if(Edit_Deposit.type==='deposite'){\r\n    //   try {\r\n    //     let TotalDeversity = parseInt(Edit_Deposit.amount) - parseInt(Diversity);\r\n    \r\n    //     let edit_deposite1 = {\r\n    //       user: Edit_Deposit.user,\r\n    //       discription: Edit_Deposit.discription,\r\n    //       amount: Edit_Deposit.amount,\r\n    //       date: Edit_Deposit.date,\r\n    //       account: Edit_Deposit.account,\r\n    //       type: Edit_Deposit.type,\r\n    //       cash: 0,\r\n    //       delete: Edit_Deposit.delete,\r\n    //     };\r\n    \r\n    //     // Update report\r\n    //     await axios.put(\r\n    //       `${Source.getAddress()}/api/report/${Edit_Deposit.id}`,\r\n    //       edit_deposite1, { headers: {\r\n    //         'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //         // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //       }}\r\n    //     );\r\n    //     // Edit_Deposit.amount=edit_deposite1.amount;\r\n    //     console.log(edit_deposite1);\r\n    //     const updateRecords = () => {\r\n    //     };\r\n    \r\n    //     if (account === Edit_Deposit.account) {\r\n    //       const belacne_delete_primary_response = await axios.get(\r\n    //         `${Source.getAddress()}/api/belance/${Edit_Deposit.account}`, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       const belacne_delete_primary = belacne_delete_primary_response.data;\r\n    \r\n    //       let belance_delete = {\r\n    //         account: belacne_delete_primary.account,\r\n    //         type: belacne_delete_primary.type,\r\n    //         belance: belacne_delete_primary.belance + TotalDeversity,\r\n    //         date_created: belacne_delete_primary.date_created,\r\n    //         user: belacne_delete_primary.user,\r\n    //         delete: \"False\",\r\n    //       };\r\n    \r\n    //       const money_delete_primary_response = await axios.get(\r\n    //         `${Source.getAddress()}/api/money/${belacne_delete_primary.moneyId}`, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       const money_delete_primary = money_delete_primary_response.data;\r\n    //       let cash_primary = parseInt(money_delete_primary.cach);\r\n    \r\n    //       let money_delete = {\r\n    //         name: money_delete_primary.name,\r\n    //         cach: cash_primary + TotalDeversity,\r\n    //         delete: \"False\",\r\n    //         user: money_delete_primary.user,\r\n    //       };\r\n    \r\n    //       await axios.put(\r\n    //         `${Source.getAddress()}/api/belance/${belacne_delete_primary.id}`,\r\n    //         belance_delete, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       belacne_delete_primary.belance += TotalDeversity;\r\n    //       setbelance(prevBelance =>\r\n    //         prevBelance.map(a =>\r\n    //           a.id === belacne_delete_primary.id ? belacne_delete_primary : a\r\n    //         )\r\n    //       );\r\n    \r\n    //       await axios.put(\r\n    //         `${Source.getAddress()}/api/money/${money_delete_primary.id}`,\r\n    //         money_delete, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       money_delete_primary.cach += TotalDeversity;\r\n    //       setCash(prevCash =>\r\n    //         prevCash.map(a =>\r\n    //           a.id === money_delete_primary.id ? money_delete_primary : a\r\n    //         )\r\n    //       );\r\n    \r\n    //     } else {\r\n    //       const belacne_delete_primary_response = await axios.get(\r\n    //         `${Source.getAddress()}/api/belance/${account}`, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       const belacne_delete_primary = belacne_delete_primary_response.data;\r\n    \r\n    //       let belance_delete = {\r\n    //         account: belacne_delete_primary.account,\r\n    //         type: belacne_delete_primary.type,\r\n    //         belance: belacne_delete_primary.belance - parseInt(Diversity),\r\n    //         date_created: belacne_delete_primary.date_created,\r\n    //         user: belacne_delete_primary.user,\r\n    //         delete: \"False\",\r\n    //       };\r\n    \r\n    //       const money_delete_primary_response = await axios.get(\r\n    //         `${Source.getAddress()}/api/money/${belacne_delete_primary.moneyId}`, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       const money_delete_primary = money_delete_primary_response.data;\r\n    //       let cash_primary = parseInt(money_delete_primary.cach);\r\n    \r\n    //       let money_delete = {\r\n    //         name: money_delete_primary.name,\r\n    //         cach: cash_primary - parseInt(Diversity),\r\n    //         delete: \"False\",\r\n    //         user: money_delete_primary.user,\r\n    //       };\r\n    \r\n    //       await axios.put(\r\n    //         `${Source.getAddress()}/api/belance/${belacne_delete_primary.id}`,\r\n    //         belance_delete, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       belacne_delete_primary.belance -= parseInt(Diversity);\r\n    //       setbelance(prevBelance =>\r\n    //         prevBelance.map(a =>\r\n    //           a.id === belacne_delete_primary.id ? belacne_delete_primary : a\r\n    //         )\r\n    //       );\r\n    \r\n    //       await axios.put(\r\n    //         `${Source.getAddress()}/api/money/${money_delete_primary.id}`,\r\n    //         money_delete, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       money_delete_primary.cach -= parseInt(Diversity);\r\n    //       setCash(prevCash =>\r\n    //         prevCash.map(a =>\r\n    //           a.id === money_delete_primary.id ? money_delete_primary : a\r\n    //         )\r\n    //       );\r\n    \r\n    //       const belacne_delete_primary_response1 = await axios.get(\r\n    //         `${Source.getAddress()}/api/belance/${Edit_Deposit.account}`, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       const belacne_delete_primary1 = belacne_delete_primary_response1.data;\r\n    \r\n    //       let belance_delete1 = {\r\n    //         account: belacne_delete_primary1.account,\r\n    //         type: belacne_delete_primary1.type,\r\n    //         belance: belacne_delete_primary1.belance + parseInt(Edit_Deposit.amount),\r\n    //         date_created: belacne_delete_primary1.date_created,\r\n    //         user: belacne_delete_primary1.user,\r\n    //         delete: \"False\",\r\n    //       };\r\n    \r\n    //       const money_delete_primary_response1 = await axios.get(\r\n    //         `${Source.getAddress()}/api/money/${belacne_delete_primary1.moneyId}`, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       const money_delete_primary1 = money_delete_primary_response1.data;\r\n    //       let cash_primary1 = parseInt(money_delete_primary1.cach);\r\n    \r\n    //       let money_delete1 = {\r\n    //         name: money_delete_primary1.name,\r\n    //         cach: cash_primary1 + parseInt(Edit_Deposit.amount),\r\n    //         delete: \"False\",\r\n    //         user: money_delete_primary1.user,\r\n    //       };\r\n    \r\n    //       await axios.put(\r\n    //         `${Source.getAddress()}/api/belance/${belacne_delete_primary1.id}`,\r\n    //         belance_delete1, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       belacne_delete_primary1.belance += parseInt(Edit_Deposit.amount);\r\n    //       setbelance(prevBelance =>\r\n    //         prevBelance.map(a =>\r\n    //           a.id === belacne_delete_primary1.id ? belacne_delete_primary1 : a\r\n    //         )\r\n    //       );\r\n    \r\n    //       await axios.put(\r\n    //         `${Source.getAddress()}/api/money/${money_delete_primary1.id}`,\r\n    //         money_delete1, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       money_delete_primary1.cach += parseInt(Edit_Deposit.amount);\r\n    //       setCash(prevCash =>\r\n    //         prevCash.map(a =>\r\n    //           a.id === money_delete_primary1.id ? money_delete_primary1 : a\r\n    //         )\r\n    //       );\r\n    \r\n    //       Edit_Deposit.customer = username;\r\n    //       Edit_Deposit.moneyType = moneyname;\r\n    //       Edit_Deposit.moneyId = moneyid;\r\n    //       Edit_Deposit.account = idbelance;\r\n          \r\n    //     }\r\n        \r\n    //     setRecords(prevRecords =>\r\n    //       prevRecords.map(record =>\r\n    //         record.id === Edit_Deposit.id ? { ...record, ...Edit_Deposit } : record\r\n    //       )\r\n    //     );\r\n    //     console.log(Edit_Deposit);\r\n    //     console.log(Cash)\r\n    //     console.log(belance)\r\n    //     Swal.fire({\r\n    //       position: \"top-end\",\r\n    //       icon: \"success\",\r\n    //       title: \"Updated Successfully!\",\r\n    //       showConfirmButton: false,\r\n    //       timer: 1000,\r\n    //     });\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //     Swal.fire({\r\n    //       position: \"top-end\",\r\n    //       icon: \"error\",\r\n    //       title: \"Not updated successfully!\",\r\n    //       showConfirmButton: false,\r\n    //       timer: 1000,\r\n    //     });\r\n    //   }\r\n    // }else{\r\n    //   try {\r\n    //     let TotalDeversity = parseInt(Edit_Deposit.amount) - parseInt(Diversity);\r\n    \r\n    //     let edit_deposite1 = {\r\n    //       user: Edit_Deposit.user,\r\n    //       discription: Edit_Deposit.discription,\r\n    //       amount: Edit_Deposit.amount,\r\n    //       date: Edit_Deposit.date,\r\n    //       account: Edit_Deposit.account,\r\n    //       type: Edit_Deposit.type,\r\n    //       cash: 0,\r\n    //       delete: Edit_Deposit.delete,\r\n    //     };\r\n    \r\n    //     // Update report\r\n    //     await axios.put(\r\n    //       `${Source.getAddress()}/api/report/${Edit_Deposit.id}`,\r\n    //       edit_deposite1, { headers: {\r\n    //         'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //         // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //       }}\r\n    //     );\r\n    //     // Edit_Deposit.amount=edit_deposite1.amount;\r\n    //     console.log(edit_deposite1);\r\n    //     const updateRecords = () => {\r\n    //     };\r\n    \r\n    //     if (account === Edit_Deposit.account) {\r\n    //       const belacne_delete_primary_response = await axios.get(\r\n    //         `${Source.getAddress()}/api/belance/${Edit_Deposit.account}`, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       const belacne_delete_primary = belacne_delete_primary_response.data;\r\n    \r\n    //       let belance_delete = {\r\n    //         account: belacne_delete_primary.account,\r\n    //         type: belacne_delete_primary.type,\r\n    //         belance: belacne_delete_primary.belance - TotalDeversity,\r\n    //         date_created: belacne_delete_primary.date_created,\r\n    //         user: belacne_delete_primary.user,\r\n    //         delete: \"False\",\r\n    //       };\r\n    \r\n    //       const money_delete_primary_response = await axios.get(\r\n    //         `${Source.getAddress()}/api/money/${belacne_delete_primary.moneyId}`, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       const money_delete_primary = money_delete_primary_response.data;\r\n    //       let cash_primary = parseInt(money_delete_primary.cach);\r\n    \r\n    //       let money_delete = {\r\n    //         name: money_delete_primary.name,\r\n    //         cach: cash_primary - TotalDeversity,\r\n    //         delete: \"False\",\r\n    //         user: money_delete_primary.user,\r\n    //       };\r\n    \r\n    //       await axios.put(\r\n    //         `${Source.getAddress()}/api/belance/${belacne_delete_primary.id}`,\r\n    //         belance_delete, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       belacne_delete_primary.belance -= TotalDeversity;\r\n    //       setbelance(prevBelance =>\r\n    //         prevBelance.map(a =>\r\n    //           a.id === belacne_delete_primary.id ? belacne_delete_primary : a\r\n    //         )\r\n    //       );\r\n    \r\n    //       await axios.put(\r\n    //         `${Source.getAddress()}/api/money/${money_delete_primary.id}`,\r\n    //         money_delete, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       money_delete_primary.cach -= TotalDeversity;\r\n    //       setCash(prevCash =>\r\n    //         prevCash.map(a =>\r\n    //           a.id === money_delete_primary.id ? money_delete_primary : a\r\n    //         )\r\n    //       );\r\n    \r\n    //     } else {\r\n    //       const belacne_delete_primary_response = await axios.get(\r\n    //         `${Source.getAddress()}/api/belance/${account}`, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       const belacne_delete_primary = belacne_delete_primary_response.data;\r\n    \r\n    //       let belance_delete = {\r\n    //         account: belacne_delete_primary.account,\r\n    //         type: belacne_delete_primary.type,\r\n    //         belance: belacne_delete_primary.belance + parseInt(Diversity),\r\n    //         date_created: belacne_delete_primary.date_created,\r\n    //         user: belacne_delete_primary.user,\r\n    //         delete: \"False\",\r\n    //       };\r\n    \r\n    //       const money_delete_primary_response = await axios.get(\r\n    //         `${Source.getAddress()}/api/money/${belacne_delete_primary.moneyId}`, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       const money_delete_primary = money_delete_primary_response.data;\r\n    //       let cash_primary = parseInt(money_delete_primary.cach);\r\n    \r\n    //       let money_delete = {\r\n    //         name: money_delete_primary.name,\r\n    //         cach: cash_primary + parseInt(Diversity),\r\n    //         delete: \"False\",\r\n    //         user: money_delete_primary.user,\r\n    //       };\r\n    \r\n    //       await axios.put(\r\n    //         `${Source.getAddress()}/api/belance/${belacne_delete_primary.id}`,\r\n    //         belance_delete, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       belacne_delete_primary.belance += parseInt(Diversity);\r\n    //       setbelance(prevBelance =>\r\n    //         prevBelance.map(a =>\r\n    //           a.id === belacne_delete_primary.id ? belacne_delete_primary : a\r\n    //         )\r\n    //       );\r\n    \r\n    //       await axios.put(\r\n    //         `${Source.getAddress()}/api/money/${money_delete_primary.id}`,\r\n    //         money_delete, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       money_delete_primary.cach += parseInt(Diversity);\r\n    //       setCash(prevCash =>\r\n    //         prevCash.map(a =>\r\n    //           a.id === money_delete_primary.id ? money_delete_primary : a\r\n    //         )\r\n    //       );\r\n    \r\n    //       const belacne_delete_primary_response1 = await axios.get(\r\n    //         `${Source.getAddress()}/api/belance/${Edit_Deposit.account}`, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       const belacne_delete_primary1 = belacne_delete_primary_response1.data;\r\n    \r\n    //       let belance_delete1 = {\r\n    //         account: belacne_delete_primary1.account,\r\n    //         type: belacne_delete_primary1.type,\r\n    //         belance: belacne_delete_primary1.belance - parseInt(Edit_Deposit.amount),\r\n    //         date_created: belacne_delete_primary1.date_created,\r\n    //         user: belacne_delete_primary1.user,\r\n    //         delete: \"False\",\r\n    //       };\r\n    \r\n    //       const money_delete_primary_response1 = await axios.get(\r\n    //         `${Source.getAddress()}/api/money/${belacne_delete_primary1.moneyId}`, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       const money_delete_primary1 = money_delete_primary_response1.data;\r\n    //       let cash_primary1 = parseInt(money_delete_primary1.cach);\r\n    \r\n    //       let money_delete1 = {\r\n    //         name: money_delete_primary1.name,\r\n    //         cach: cash_primary1 - parseInt(Edit_Deposit.amount),\r\n    //         delete: \"False\",\r\n    //         user: money_delete_primary1.user,\r\n    //       };\r\n    \r\n    //       await axios.put(\r\n    //         `${Source.getAddress()}/api/belance/${belacne_delete_primary1.id}`,\r\n    //         belance_delete1, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       belacne_delete_primary1.belance -= parseInt(Edit_Deposit.amount);\r\n    //       setbelance(prevBelance =>\r\n    //         prevBelance.map(a =>\r\n    //           a.id === belacne_delete_primary1.id ? belacne_delete_primary1 : a\r\n    //         )\r\n    //       );\r\n    \r\n    //       await axios.put(\r\n    //         `${Source.getAddress()}/api/money/${money_delete_primary1.id}`,\r\n    //         money_delete1, { headers: {\r\n    //           'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n    //           // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n    //         }}\r\n    //       );\r\n    //       money_delete_primary1.cach -= parseInt(Edit_Deposit.amount);\r\n    //       setCash(prevCash =>\r\n    //         prevCash.map(a =>\r\n    //           a.id === money_delete_primary1.id ? money_delete_primary1 : a\r\n    //         )\r\n    //       );\r\n    \r\n    //       Edit_Deposit.customer = username;\r\n    //       Edit_Deposit.moneyType = moneyname;\r\n    //       Edit_Deposit.moneyId = moneyid;\r\n    //       Edit_Deposit.account = idbelance;\r\n          \r\n    //     }\r\n        \r\n    //     setRecords(prevRecords =>\r\n    //       prevRecords.map(record =>\r\n    //         record.id === Edit_Deposit.id ? { ...record, ...Edit_Deposit } : record\r\n    //       )\r\n    //     );\r\n    //     console.log(Edit_Deposit);\r\n    //     console.log(Cash)\r\n    //     console.log(belance)\r\n    //     Swal.fire({\r\n    //       position: \"top-end\",\r\n    //       icon: \"success\",\r\n    //       title: \"Updated Successfully!\",\r\n    //       showConfirmButton: false,\r\n    //       timer: 1000,\r\n    //     });\r\n    //   } catch (err) {\r\n    //     Swal.fire({\r\n    //       position: \"top-end\",\r\n    //       icon: \"error\",\r\n    //       title: \"Not updated successfully!\",\r\n    //       showConfirmButton: false,\r\n    //       timer: 1000,\r\n    //     });\r\n    //   }\r\n    // }\r\n    if (account === Edit_Deposit.account) {\r\n      // console.log(Edit_Deposit);\r\n      axios.put(\r\n       `${Source.getAddress()}/api/report/${Edit_Deposit.id}/`,\r\n       Edit_Deposit, { headers: {\r\n         'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n         // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n       }}\r\n     ).then((res)=>{\r\n      console.log(res);\r\n       setRecords(prevRecords =>\r\n         prevRecords.map(record =>\r\n           record.id === res.data.report.id ? { ...record, ...res.data.report } : record\r\n         )\r\n       );\r\n      //  dispatch(updateBelanceInCache(res.data.belance));\r\n      //  dispatch(updateReportInCache(res.data.report_belance));\r\n      //  dispatch(updateMoneyInCache(res.data.moneys));\r\n   showAlert({\r\n     position: \"top-end\",\r\n     icon: \"success\",\r\n     title: <FormattedMessage id=\"Updated Successfully!\"/>,\r\n     showConfirmButton: false,\r\n     timer: 1000,\r\n   });\r\n\r\n     }).catch((err)=>{\r\n       console.log(err);\r\n       showAlert({\r\n         position: \"top-end\",\r\n         icon: \"error\",\r\n         title: <FormattedMessage id=\"Not Updated Successfully!\"/>,\r\n         showConfirmButton: false,\r\n         timer: 1000,\r\n       });\r\n     })\r\n    } else {\r\n      // Edit_Deposit['MainWDW']=MainDW;\r\n      // console.log(Edit_Deposit);\r\n      axios.put(\r\n        `${Source.getAddress()}/api/report/${Edit_Deposit.id}/`,\r\n        Edit_Deposit, {\r\n          params:{\r\n            type:'change',\r\n          },\r\n          headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('access')}`, // Add the access token here\r\n          // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n        }}\r\n      ).then((res)=>{\r\n        console.log(res);\r\n        setRecords(prevRecords =>\r\n          prevRecords.map(record =>\r\n            record.id === res.data.report.id ? { ...record, ...res.data.report } : record\r\n          )\r\n        );\r\n        // dispatch(updateBelanceInCache(res.data.belance));\r\n        // dispatch(updateBelanceInCache(res.data.secondbelance));\r\n        // // dispatch(updateReportInCache(res.data.secondreport_belance));\r\n        // // dispatch(updateReportInCache(res.data.report_belance));\r\n        // dispatch(updateMoneyInCache(res.data.moneys));\r\n    showAlert({\r\n      position: \"top-end\",\r\n      icon: \"success\",\r\n      // title: \"Updated Successfully!\",\r\n     title: <FormattedMessage id=\"Updated Successfully!\"/>,\r\n\r\n      showConfirmButton: false,\r\n      timer: 1000,\r\n    });\r\n      }).catch((err)=>{\r\n        console.log(err);\r\n        showAlert({\r\n          position: \"top-end\",\r\n          icon: \"error\",\r\n          // title: \"Not updated successfully!\",\r\n         title: <FormattedMessage id=\"Not Updated Successfully!\"/>,\r\n          showConfirmButton: false,\r\n          timer: 1000,\r\n        });\r\n      })\r\n\r\n\r\n    }\r\n    closeEdit();\r\n  };\r\n  \r\n\r\n  const handle_date = (jalaliDate) => {\r\n    setDiversity(0);\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n\r\n      // const date = new Date(jalaliDate.year, jalaliDate.month - 1, jalaliDate.day);\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      // setIsoDate(isoString);\r\n      setEditDeposit({\r\n        ...Edit_Deposit,\r\n        date: isoString,\r\n      });\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n  const handleChange=(e)=>{\r\n    settype(e);\r\n    setEditDeposit((prevState) => ({\r\n      ...prevState,\r\n      type: e.name,\r\n    }));\r\n    // setEditDeposit(prev({\r\n    //   ...Edit_Deposit,\r\n    //   type:e\r\n    // }));\r\n  }\r\n\r\n  const handleAll = (e) => {\r\n    if (e.target.name === \"amount\") {\r\n      setEditDeposit({\r\n        ...Edit_Deposit,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    } else {\r\n      setEditDeposit({\r\n        ...Edit_Deposit,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    }\r\n  };\r\n  const [add, setadd] = useState({\r\n    id: 0,\r\n    account: 0,\r\n    type: 0,\r\n    belance: 0,\r\n    date_created: \"\",\r\n    moneyType: \"\",\r\n    account_name: \"\",\r\n    moneyId: 0,\r\n    user: 0,\r\n    user_name: \"\",\r\n    delete: false,\r\n  });\r\n  const [bbelance, setbbelance] = useState({\r\n    account: null,\r\n    type: null,\r\n    belance: 0,\r\n    date_created: \"\",\r\n    user: null,\r\n    delete: false,\r\n  });\r\n\r\n  const buttonRef = useRef(null);\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      // Check if the Enter key was pressed\r\n      e.preventDefault(); // Prevent default action if needed\r\n      if (buttonRef.current) {\r\n        buttonRef.current.click(); // Programmatically click the button\r\n      }\r\n    }\r\n  };\r\n\r\n  const options1=[\r\n    { name: 'deposite',label:'deposite'},\r\n    { name: 'withdraw',label:'withdraw'},\r\n  ]\r\n  const customStyles = {\r\n    container: (provided) => ({\r\n      ...provided,\r\n      margin: '2rem 0 ', // Apply margin here\r\n    }),}\r\n  return (\r\n    <div\r\n      className={`container rounded-5 popup res ${open ? \"show\" : \"\"}`}\r\n      style={{\r\n        // maxWidth: \"80%\",\r\n        overflowX: \"auto\",\r\n        overflowY: \"auto\",\r\n        backgroundColor: \"#f8f9fa\",\r\n        padding: \"20px\",\r\n      }}\r\n    >\r\n      <div className=\"d-flex justify-content-end \">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-close align-self-end p-3 m-1 mt-0 hover_btn\"\r\n          onClick={closeEdit}\r\n          aria-label=\"Close\"\r\n        ></button>\r\n      </div>\r\n      <div\r\n        className=\"h-50 rounded-5\"\r\n        style={{ transition: \"all\", transitionDuration: 1000 }}\r\n      >\r\n        <div className=\"row\" style={{ flexWrap: \"wrap\", margin: 0 }}>\r\n          <h1\r\n            className=\"text-center rounded p-4 text-light\"\r\n            style={{ backgroundColor: \"var(--bs-info)\", width: \"100%\" }}\r\n          >\r\n                        <FormattedMessage id=\"Edit Transaction\" />\r\n          </h1>\r\n          <div className=\"col-12 col-md-6 d-flex flex-column  mt-5 \">\r\n            <label for=\"category\">                        <FormattedMessage id=\"Customer\" />\r\n            </label>\r\n            <ComboBox\r\n              setSelectedOption={setSelectedOption}\r\n              selectedOption={selectedOption}\r\n              options={belance}\r\n              Onsearch={Onsearch}\r\n              onKeyDown={handleKeyDown}\r\n            />\r\n            {/* <Select\r\n            styles={customStyles}\r\n            value={type}\r\n            onChange={handleChange}\r\n            options={options1}\r\n            getOptionValue={(option) => `${option.name}`}\r\n\r\n            isSearchable={false}\r\n            /> */}\r\n            <Datepicker_Customer\r\n              onKeyDown={handleKeyDown}\r\n              default_value={EndDateE}\r\n              settings={settings}\r\n              handle_date={handle_date}\r\n              lebal={                        <FormattedMessage id=\"Date\" />              }\r\n              setSelectedDay={setSelectedDay}\r\n              selectedDay={selectedDay}\r\n            ></Datepicker_Customer>\r\n            <div\r\n              className=\"col-12 mt-1 mb-6\"\r\n              style={{ maxWidth: \"100%\", padding: \"0 15px\" }}\r\n            ></div>\r\n\r\n            <div\r\n              className=\"col-12 mt-1\"\r\n              style={{ maxWidth: \"100%\", padding: \"0 15px\" }}\r\n            ></div>\r\n          </div>\r\n          <div\r\n            className=\"col-12 col-md-6 mt-5\"\r\n            style={{ maxWidth: \"100%\", padding: \"0 15px\" }}\r\n          >\r\n            <label htmlFor=\"national_id_number\">                        <FormattedMessage id=\"Amount\" />            </label>\r\n            <input\r\n              ref={useRef1}\r\n              onKeyDown={handleKeyDown}\r\n              type=\"text\"\r\n              name=\"amount\"\r\n              placeholder=\"Amount\"\r\n              className=\"form-control fs-6 mb-3\"\r\n              value={Edit_Deposit.amount}\r\n              onChange={handleAll}\r\n              style={{ width: \"100%\" }}\r\n            />\r\n            <div class=\"form-floating\">\r\n              <textarea\r\n                name=\"discription\"\r\n                class=\"form-control h-50\"\r\n                placeholder=\"Leave a comment here\"\r\n                id=\"floatingTextarea2\"\r\n                value={Edit_Deposit.discription}\r\n                onChange={handleAll}\r\n                onKeyDown={handleKeyDown}\r\n              ></textarea>\r\n              <label for=\"floatingTextarea2\">                        <FormattedMessage id=\"Description\" />              </label>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-12 d-flex flex-column flex-md-row justify-content-center margin\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"text-center form-control w-100 w-md-25 btn btn-outline-danger me-1 mb-2 mb-md-0\"\r\n              onClick={closeEdit}\r\n            >\r\n                                      <FormattedMessage id=\"Cancel\" />\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              ref={buttonRef}\r\n              className=\"text-center form-control w-100 w-md-25 btn btn-outline-success\"\r\n              onClick={Submit_Edit}\r\n            >\r\n                                      <FormattedMessage id=\"Submit\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { gregorianToJalali } from \"shamsi-date-converter\";\r\nimport Alert from \"./forms/Alert\";\r\nimport Datepicker from \"./forms/Datepicker\";\r\nimport Datepicker_Customer from \"./forms/Datepicker_customer\";\r\nimport Datepicker_start from \"./forms/Datepicker_start\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport axios from \"axios\";\r\nimport AccountEdit from \"./CustomersEdit\";\r\nimport Add from \"../assets/icon/add.png\";\r\nimport Trash from \"../assets/icon/trash.png\";\r\nimport { useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Belance from \"./forms/Belance\";\r\nimport AddAccount from \"./AddAccount\";\r\nimport ComboBox from \"./forms/ComboBox\";\r\nimport Source from \"../Source\";\r\nimport Swal from \"sweetalert2\";\r\nimport moment from \"moment-jalaali\";\r\nimport jalaali from \"jalaali-js\";\r\nimport { NumericFormat } from \"react-number-format\";\r\nimport Edit_ThirdDepttable from \"./forms/Edit_ThirdDepttable\";\r\nimport { Calendar } from \"react-modern-calendar-datepicker\";\r\nimport * as shamsi from \"shamsi-date-converter\";\r\n// import DatePicker from \"react-modern-calendar-datepicker\";\r\nimport { utils } from \"react-modern-calendar-datepicker\";\r\nimport { FormattedMessage,useIntl } from \"react-intl\";\r\nimport ComboBoxDeposite from \"./Transformations/ComboBoxDeposite\";\r\nimport ListBox from \"./forms/ListBox\";\r\nimport { useShowAlert  } from \"../warrper\";\r\n// import { FormattedMessage,useIntl } from \"react-intl\";\r\n\r\nconst formatNumber = (number) => {\r\n  return number.toLocaleString(); // Formats number with thousand separators\r\n};\r\n\r\nexport default function ThirdDeptDtable({\r\n  // deposite,\r\n  belance,\r\n  Cash,\r\n  user,\r\n  // settings,\r\n  setCash,\r\n  setbelance,\r\n  accounts,\r\n  setAccounts,\r\n  money,\r\n  setMoney,\r\n}) {\r\n  const showAlert=useShowAlert();\r\n  const { settings, statuss } = useSelector((state) => state.settings);\r\n  const [selecteduser, setSelecteduser] = useState();\r\n  const { users, statusu } = useSelector((state) => state.users);\r\n  const [namesearch, setnameSearch] = useState();\r\n  const [Date_Start, setDate_start] = useState();\r\n  const [Date_End, setDate_end] = useState();\r\n  const { formatMessage } = useIntl();\r\n  const handle_date_start = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n\r\n      // const date = new Date(jalaliDate.year, jalaliDate.month - 1, jalaliDate.day);\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      // setIsoDate(isoString);\r\n      setDate_start(isoString);\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n  const handle_date_end = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n\r\n      // const date = new Date(jalaliDate.year, jalaliDate.month - 1, jalaliDate.day);\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      // setIsoDate(isoString);\r\n      setDate_end(isoString);\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n  const handleName = (e) => {\r\n    setnameSearch(e.target.value);\r\n  };\r\n  const intl = useIntl(); // استفاده از هوک useIntl برای دسترسی به ترجمه‌ها\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      // Check if the Enter key was pressed\r\n      e.preventDefault(); // Prevent default action if needed\r\n      if (buttonRef.current) {\r\n        buttonRef.current.click(); // Programmatically click the button\r\n      }\r\n    }\r\n  };\r\n  const buttonRef = useRef(null);\r\n  const inputRef = useRef(null); // Create a ref for the input field\r\n  const [deposite, setdeposite] = useState();\r\n  console.log(localStorage.getItem(\"cashid\"));\r\n  // const [cachid, setcachid] = useState(\"\");\r\n  // let cach = 0;\r\n  // useEffect(() => {\r\n    // cach = localStorage.getItem(\"cashid\");\r\n    \r\n  //   const startDate = new Date(); // Start date\r\n  //   const endDate = new Date(); // End date\r\n  //   startDate.setDate(startDate.getDate() - 30);\r\n  //   endDate.setDate(endDate.getDate() + 1);\r\n  //   let cash = [];\r\n  //   if (localStorage.getItem(\"cashid\")) {\r\n      // axios\r\n      //   .get(Source.getAddress() + \"/api/report/\", {\r\n      //     headers: {\r\n      //       Authorization: `Bearer ${localStorage.getItem(\"access\")}`, // Add the access token here\r\n      //       // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n      //     },\r\n      //     params: {\r\n      //       startDate: startDate,\r\n      //       endDate: endDate,\r\n      //       moneyid: cach,\r\n      //       delete: \"False\",\r\n      //     },\r\n      //   })\r\n      //   .then((res) => {\r\n      //     setdeposite(res.data); // This will contain filtered data from the server\r\n      //   })\r\n      //   .catch((err) => {\r\n      //     // console.error(\"Error getting report:\", err);\r\n      //   });\r\n  //   }\r\n  // }, [setdeposite]);\r\n\r\n  let name = [];\r\n  const [selectedDay, setSelectedDay] = useState(moment());\r\n  const [open, setopen] = useState(true);\r\n  const [alert, setalert] = useState(false);\r\n  const [records, setRecords] = useState();\r\n  const persianToday = utils(\"fa\").getToday();\r\n  const [Ddate, setDdate] = useState(null);\r\n  const [de_id, setde_id] = useState(0);\r\n  const [report_delete, Setreport_delete] = useState({\r\n    account: 15,\r\n    date: \"2024-05-15T15:41:44.888608Z\",\r\n    amount: 0,\r\n    discription: \"\",\r\n    type: \"deposite\",\r\n    cash: 0,\r\n    delete: \"True\",\r\n  });\r\n  const delete_report = async (row) => {\r\n    setOpenEdit(false);\r\n    const swalWithBootstrapButtons = Swal.mixin({\r\n      customClass: {\r\n        confirmButton: \"btn btn-success\",\r\n        cancelButton: \"btn btn-danger\",\r\n      },\r\n      buttonsStyling: false,\r\n    });\r\n\r\n    const result = await swalWithBootstrapButtons.fire({\r\n      title: intl.formatMessage({id:\"Are you sure?\"})\r\n              ,\r\n              text:intl.formatMessage({id:\"You won't be able to revert this!\"})\r\n              ,\r\n              icon: \"warning\",\r\n              showCancelButton: true,\r\n              confirmButtonText: intl.formatMessage({id:\"Yes, delete it!\"})\r\n              ,\r\n              cancelButtonText: intl.formatMessage({id:\"No, cancel!\"})\r\n              ,\r\n              reverseButtons: true,\r\n  });\r\n\r\n    if (result.isConfirmed) {\r\n      let update = {\r\n        isdelete: 1,\r\n      };\r\n\r\n      axios\r\n        .put(Source.getAddress() + `/api/report/${row.id}`, update, {\r\n          params: { type: \"delete\" },\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"access\")}`, // Add the access token here\r\n            // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n          },\r\n        })\r\n        .then((res) => {\r\n          Swal.fire({\r\n            position: \"center\",\r\n            icon: \"success\",\r\n            // title: \"Deposite record successfully deleted !\",\r\n            title: \r\n            `Deposit ${intl.formatMessage({id:\"record successfully deleted!\"})}`\r\n            ,\r\n            showConfirmButton: false,\r\n            timer: 600,\r\n          });\r\n          // console.log(e);\r\n          setRecords((prevRecords) =>\r\n            prevRecords.filter((record) => record.id !== row.id)\r\n          );\r\n          // setCash((prevCash) =>\r\n          //   prevCash.map((a) =>\r\n          //     a.id === res.data.moneys.id ? res.data.moneys : a\r\n          //   ));\r\n          setbelance((prevBelance) =>\r\n            prevBelance.map((a) =>\r\n              a.id === res.data.belance.id ? res.data.belance : a\r\n            )\r\n          );\r\n          // dispatch(updateBelanceInCache(res.data.belance));\r\n          // dispatch(updateReportInCache(res.data.report_belance));\r\n          // dispatch(updateMoneyInCache(res.data.moneys));\r\n        })\r\n        .catch((e) => {\r\n          Swal.fire({\r\n            position: \"center\",\r\n            icon: \"error\",\r\n            title: intl.formatMessage({id:\"Deposite record not deleted!\"})\r\n            ,\r\n            showConfirmButton: false,\r\n            timer: 600,\r\n          });\r\n        });\r\n      // } catch (err) {\r\n      // }\r\n    } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n      Swal.fire({\r\n        position: \"center\",\r\n        icon: \"error\",\r\n        text:intl.formatMessage({id:\"Your record is safe :)\"}) ,\r\n        showConfirmButton: false,\r\n        timer: 600,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [moneytype, setmoneytype] = useState(0);\r\n\r\n  const [idbelance, setidbelance] = useState(0);\r\n  const [selectedBelance, setselectedBelance] = useState({\r\n    id: 0,\r\n    account_name: \"\",\r\n    moneyType: \"\",\r\n    account: 0,\r\n    moneyId: 0,\r\n    user: 0,\r\n    type: 0,\r\n    belance: 0,\r\n    date_created: \"\",\r\n  });\r\n  const [openBelance, setOpenBelance] = useState(false);\r\n  const [edit, setEdit] = useState(false);\r\n  const [editAccount, setEditAccount] = useState(null);\r\n  const [id, setId] = useState(\"\");\r\n  const [addAccountModal, setAddAccountModal] = useState(false);\r\n  const [StartDate, setStartDate] = useState(\"\");\r\n  const [EndDate, setEndDate] = useState(\"\");\r\n  const [username, setusername] = useState(\"\");\r\n  const [moneyname, setmoneyname] = useState(\"\");\r\n  const [AddDeposite, setAddDeposite] = useState({\r\n    user: 0,\r\n    discription: \"\",\r\n    amount: 0,\r\n    date: new Date().toISOString(),\r\n    account: 0,\r\n    type: \"deposite\",\r\n    cash: 0,\r\n    delete: \"False\",\r\n  });\r\n  const filterDeposite = () => {\r\n    // console.log(StartDate);    2024-05-29\r\n    const startDate = new Date(\r\n      `${StartDate.year}-${StartDate.month}-${StartDate.day}`\r\n    ); // Start date\r\n    const endDate = new Date(`${EndDate.year}-${EndDate.month}-${EndDate.day}`); // End date\r\n    endDate.setDate(endDate.getDate() + 1);\r\n    const type = \"deposite\";\r\n    axios\r\n      .get(Source.getAddress() + \"/api/report\", {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"access\")}`, // Add the access token here\r\n          // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n        },\r\n        params: {\r\n          startDate: startDate,\r\n          endDate: endDate,\r\n          delete: \"False\",\r\n          moneyid: localStorage.getItem(\"cashid\"),\r\n        },\r\n      })\r\n      .then((res) => {\r\n        Swal.fire({\r\n          position: \"top-end\",\r\n          icon: \"success\",\r\n          title: \"Deposite Table filterd successfully\",\r\n          showConfirmButton: false,\r\n          timer: 1500,\r\n        });\r\n        setRecords(res.data); // This will contain filtered data from the server\r\n        // console.log(res.data);\r\n      })\r\n      .catch((err) => {\r\n        Swal.fire({\r\n          position: \"top-end\",\r\n          icon: \"error\",\r\n          title: \"Something went wrong !\",\r\n          showConfirmButton: false,\r\n          timer: 1500,\r\n        });\r\n      });\r\n  };\r\n\r\n  const primaryw = () => {\r\n    // const record= Cash.filter((item)=>{item.id==moneytype});\r\n    if (selectedBelance.belance === \"0\") {\r\n      return -parseInt(AddDeposite.amount);\r\n    } else {\r\n      let money = parseInt(AddDeposite.amount);\r\n      let primar = parseInt(selectedBelance.belance);\r\n      let sum = primar - money;\r\n      return sum;\r\n    }\r\n  };\r\n\r\n  const updatemoneyw = () => {\r\n    const record = Cash.find((item) => item.id === moneytype);\r\n    if (record) {\r\n      let money = parseInt(AddDeposite.amount);\r\n      let primmoney = parseInt(record.cach);\r\n      let sum = primmoney - money;\r\n      return { name: record.name, cash: sum, user: record.user };\r\n    } else {\r\n      // Handle the case when record is undefined\r\n      return { name: \"\", cash: 0 };\r\n    }\r\n  };\r\n\r\n  const primary = () => {\r\n    if (selectedBelance.belance === \"0\") {\r\n      return AddDeposite.amount;\r\n    } else {\r\n      let primar = parseInt(selectedBelance.belance);\r\n      primar += parseInt(AddDeposite.amount);\r\n      return primar;\r\n    }\r\n  };\r\n  const updatemoney = () => {\r\n    console.log(moneytype);\r\n    const record = Cash.find((item) => item.id === moneytype);\r\n    if (record) {\r\n      let money = parseInt(AddDeposite.amount);\r\n      let primmoney = parseInt(record.cach);\r\n      let sum = primmoney + money;\r\n      return { name: record.name, cash: sum, user: record.user };\r\n    } else {\r\n      // Handle the case when record is undefined\r\n      return { name: \"\", cash: 0 };\r\n    }\r\n  };\r\n\r\n  const SumbitReport = () => {\r\n    // dispatch(getReports());\r\n    // dispatch(getBelances());\r\n    // dispatch(getMoneys());\r\n    if (AddDeposite.amount !== 0 && AddDeposite.account !== 0) {\r\n      // let dd = new Date();\r\n      // const pri = primary();\r\n      // const moneyinsert = updatemoney();\r\n      // const uploadDatamoney ={\r\n      //   \"cach\":parseInt(moneyinsert.cash),\r\n      //   \"ontransaction\":1\r\n      // }\r\n      // const uploadData = {\r\n      //   belance:String(pri),\r\n      //   ontransaction:1\r\n      // }\r\n      let add_deposite = {\r\n        user_id: localStorage.getItem(\"userTokenid\"),\r\n        discription: \"\",\r\n        amount: 0,\r\n        date_created: null,\r\n        account_id: 0,\r\n        type: \"deposite\",\r\n        cash: 0,\r\n        // isdelete: 0,\r\n      };\r\n\r\n      // add_deposite.user_id = AddDeposite.user;\r\n      add_deposite.amount = AddDeposite.amount;\r\n      add_deposite.discription = AddDeposite.discription;\r\n      add_deposite.date_created = AddDeposite.date;\r\n      add_deposite.account_id = AddDeposite.account;\r\n      add_deposite.type = AddDeposite.type;\r\n      // add_deposite.cash = moneyinsert.cash;\r\n      const date = new Date();\r\n      const isoString = date.toISOString();\r\n      add_deposite.isdelete = 0;\r\n      let submitdeposite = AddDeposite;\r\n      setAddDeposite({\r\n        user_id: localStorage.getItem(\"userTokenid\"),\r\n        discription: \"\",\r\n        amount: \"\",\r\n        date: isoString,\r\n        account_id: 0,\r\n        type: \"deposite\",\r\n        cash: 0,\r\n        // isdelete: 0,\r\n      });\r\n      axios\r\n        .post(`${Source.getAddress()}/api/report`, add_deposite, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"access\")}`, // Add the access token here\r\n            // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n          },\r\n        })\r\n        .then((response) => {\r\n          let add = {\r\n            id: 0,\r\n            user_name: \"\",\r\n            moneyType: \"\",\r\n            customer: \"\",\r\n            user_id: 0,\r\n            discription: \"\",\r\n            amount: 0,\r\n            date_created: null,\r\n            account_id: 0,\r\n            type: \"deposite\",\r\n            cash: 0,\r\n            // isdelete: 0,\r\n            account_id: 0,\r\n            moneyId: 0,\r\n          };\r\n          add.id = response.data.report;\r\n\r\n          add.account = submitdeposite.account;\r\n          add.user_id = localStorage.getItem(\"userTokenid\");\r\n          add.discription = submitdeposite.discription;\r\n          add.amount = submitdeposite.amount;\r\n          add.date = submitdeposite.date;\r\n          add.account = submitdeposite.account;\r\n          add.type = submitdeposite.type;\r\n          // add.cash = moneyinsert.cash;\r\n          // add.isdelete = AddDeposite.isdelete;\r\n          add.customer = username;\r\n          add.user_name = localStorage.getItem(\"userToken\");\r\n          add.moneyType = moneyname;\r\n          setRecords([add, ...records]);\r\n          showAlert({\r\n            position: \"top-end\",\r\n            icon: \"success\",\r\n            title: <FormattedMessage id=\"Your record has been added!\" />,\r\n            showConfirmButton: false,\r\n            timer: 1000,\r\n          });\r\n          setSelectedOption(\"\");\r\n          // setAddDeposite({\r\n          //   ...AddDeposite,\r\n          //   user: 0,\r\n          //   discription: \"\",\r\n          //   amount: 0,\r\n          //   date: isoString,\r\n          //   account: 0,\r\n          //   type: \"deposite\",\r\n          //   cash: 0,\r\n          //   // isdelete: \"False\",\r\n          // });\r\n          setFormattedValue(\"\");\r\n          setSelectedDay(moment());\r\n          let add_cash = response.data.belance;\r\n          // add_cash.id = selectedBelance.id;\r\n          // add_cash.account_name = selectedBelance.account_name;\r\n          // add_cash.moneyId = selectedBelance.moneyId;\r\n          // add_cash.moneyType = selectedBelance.moneyType;\r\n          // add_cash.account = selectedBelance.account;\r\n          // add_cash.type = selectedBelance.type;\r\n          // add_cash.belance = pri;\r\n          // add_cash.date_created = selectedBelance.date_created;\r\n          // add_cash.user = selectedBelance.user;\r\n          setbelance(belance.map((a) => (a.id === add_cash.id ? add_cash : a)));\r\n          // dispatch(updateBelanceInCache(add_cash));\r\n          // dispatch(updateReportInCache(response.data.report_belance));\r\n          let update_money = response.data.moneys;\r\n          // update_money.name = moneyinsert.name;\r\n          // update_money.id = moneytype;\r\n          // update_money.cach = moneyinsert.cash;\r\n          // update_money.user = moneyinsert.user;\r\n          // setCash(\r\n          //   Cash.map((a) => (a.id === update_money.id ? update_money : a))\r\n          // );\r\n          // dispatch(updateMoneyInCache(update_money));\r\n          // fetch(Source.getAddress() + \"/api/belance/\" + `${idbelance}/`, {\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          showAlert({\r\n            position: \"top-end\",\r\n            icon: \"error\",\r\n            title: <FormattedMessage id=\"Not working ,please try again!\" />\r\n            ,\r\n            showConfirmButton: false,\r\n            timer: 1500,\r\n          });\r\n        });\r\n\r\n      // console.log(AddDeposite);\r\n    } else {\r\n      // setError(true);\r\n      showAlert({\r\n        position: \"top-end\",\r\n        icon: \"error\",\r\n        title: <FormattedMessage id=\"You must fill Customer name and Amount input!\" />,\r\n        showConfirmButton: false,\r\n        timer: 1500,\r\n      });\r\n    }\r\n  };\r\n\r\n  const convertToKabulTime = (dateStr) => {\r\n    const dateObj = new Date(dateStr);\r\n\r\n    // Set the time zone to Kabul (UTC+4:30)\r\n    dateObj.setMinutes(dateObj.getMinutes() + 540); // Kabul is UTC+4:30\r\n\r\n    // Format the date object into the desired string format\r\n    const formattedDateStr = dateObj.toISOString().slice(0, 16);\r\n\r\n    return formattedDateStr;\r\n  };\r\n  const handle_date = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n\r\n      // const date = new Date(jalaliDate.year, jalaliDate.month - 1, jalaliDate.day);\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      // setIsoDate(isoString);\r\n      setAddDeposite({\r\n        ...AddDeposite,\r\n        date: isoString,\r\n      });\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n  const handle_start1 = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day\r\n      );\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      // setIsoDate(isoString);\r\n      setStartDate(isoString);\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n  const handle_end1 = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day\r\n      );\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      // setIsoDate(isoString);\r\n      setEndDate(isoString);\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n  const handleDeposite = (e) => {\r\n    // console.log(formattedDate);\r\n    setAddDeposite({\r\n      ...AddDeposite,\r\n      [e.target.name]: e.target.value,\r\n      user: localStorage.getItem(\"userTokenid\"),\r\n    });\r\n  };\r\n\r\n  const [Popup, setPopup] = useState(false);\r\n  const res = useMemo((result) => {\r\n    if (window.innerWidth > 768) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  });\r\n  // useEffect(() => {\r\n  //   // setRecords(deposite);\r\n  //   let news = new Date();\r\n  //   let mmm = news.toISOString().slice(0, 16);\r\n  //   let to = convertToKabulTime(mmm);\r\n  //   const jalaliDate1 = jalaali.toJalaali(\r\n  //     news.getFullYear(),\r\n  //     news.getMonth() + 1,\r\n  //     news.getDate()\r\n  //   );\r\n\r\n  //   news.setDate(news.getDate() - 1);\r\n  //   const jalaliDate = jalaali.toJalaali(\r\n  //     news.getFullYear(),\r\n  //     news.getMonth() + 1,\r\n  //     news.getDate()\r\n  //   );\r\n\r\n  //   if (settings[0].date === \"Persian\") {\r\n  //     setStartDate(\r\n  //       moment({\r\n  //         day: jalaliDate1.jd,\r\n  //         month: jalaliDate1.jm,\r\n  //         year: jalaliDate1.jy,\r\n  //       })\r\n  //     );\r\n  //     setEndDate(\r\n  //       moment({\r\n  //         day: jalaliDate.jd,\r\n  //         month: jalaliDate.jm,\r\n  //         year: jalaliDate.jy,\r\n  //       })\r\n  //     );\r\n  //   } else {\r\n  //     setStartDate(\r\n  //       moment({\r\n  //         day: String(news.getDate()).padStart(2, \"0\"),\r\n  //         month: String(news.getMonth() + 1).padStart(2, \"0\"),\r\n  //         year: news.getFullYear(),\r\n  //       })\r\n  //     );\r\n  //     setEndDate(moment(news));\r\n  //   }\r\n  // }, [deposite]);\r\n\r\n  // useEffect(() => {\r\n  //   let datetime = new Date();\r\n  //   const jalaliDate12 = {\r\n  //     year: datetime.getFullYear(),\r\n  //     month: datetime.getMonth() + 1,\r\n  //     day: datetime.getDay(),\r\n  //   };\r\n  //   const { year, month, day } = jalaliDate12;\r\n  //   // Create the ISO date string\r\n  //   const t = new Date();\r\n  //   const date = new Date();\r\n  //   // let m=moment();\r\n  //   const isoString = date.toISOString();\r\n\r\n  //   setAddDeposite({\r\n  //     ...AddDeposite,\r\n  //     date: isoString,\r\n  //   });\r\n  // }, [setAddDeposite]);\r\n\r\n  const handleRowClick = (row) => {\r\n    setEditAccount(row);\r\n    setEdit(true);\r\n  };\r\n  const date = (d) => {\r\n    const date = new Date(d);\r\n\r\n    let formattedDate = `${date.getFullYear()}-${String(\r\n      date.getMonth() + 1\r\n    ).padStart(2, \"0\")}-${String(date.getDate()).padStart(2, \"0\")}`;\r\n    const hours = date.getHours();\r\n    const minutes = date.getMinutes();\r\n    const ampm = hours >= 12 ? \"pm\" : \"am\";\r\n    let aa = hours >= 12 ? \"pm\" : \"am\";\r\n    const formattedHours = hours % 12 || 12;\r\n    const formattedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    if (settings[0].date === \"Persian\") {\r\n      aa = hours >= 12 ? \"ق.ظ\" : \"ب.ظ\";\r\n      formattedDate = convertToHijriShamsi(\r\n        `${formattedDate}  ${formattedHours}:${formattedMinutes} ${ampm}`\r\n      );\r\n    }\r\n    return `${formattedDate}  ${formattedHours}:${formattedMinutes} ${aa}`;\r\n  };\r\n\r\n  const handleViewBelance = (row) => {\r\n    const filteredBelance = belance.filter((item) => item.account === row.id);\r\n    setEditAccount(filteredBelance);\r\n    setId(row.id);\r\n    setOpenBelance(true);\r\n  };\r\n\r\n  // const [records, setRecords] = useState(rows);\r\n\r\n  const handleFilter = (e) => {\r\n    // console.log(accounts);\r\n    const newData = deposite.filter((row) => {\r\n      if (typeof row.customer === \"string\") {\r\n        return row.customer\r\n          .toLowerCase()\r\n          .includes(e.target.value.toLowerCase());\r\n      }\r\n      return false;\r\n    });\r\n    setRecords(newData);\r\n  };\r\n  const convertToHijriShamsi = (gregorianDate) => {\r\n    const [jalaliYear, jalaliMonth, jalaliDay] = gregorianToJalali(\r\n      new Date(gregorianDate)\r\n    );\r\n\r\n    const hijriShamsiDate = `${jalaliYear}/${jalaliMonth}/${jalaliDay}`;\r\n\r\n    return hijriShamsiDate;\r\n  };\r\n  const columnsDesktopsimple = [\r\n    {\r\n      name: <strong style={{ width: \"1px\" }}>ID</strong>,\r\n      selector: (row) => row.id,\r\n      //  sortable: true\r\n      style: {\r\n        width: \"1px\",\r\n        minWidth: \"10px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: <strong>Customer Name</strong>,\r\n      selector: (row) => row.customer,\r\n      style: {\r\n        padding: \"0px 20px\",\r\n        justifyContent: \"left\",\r\n        textAlign: \"center\",\r\n      },\r\n      // sortable: true\r\n    },\r\n    {\r\n      name: (\r\n        <strong\r\n          style={{ minWidth: \"170px\", maxWidth: \"200px\", width: \"200px\" }}\r\n        >\r\n          Date Created\r\n        </strong>\r\n      ),\r\n      selector: (row) => date(row.date),\r\n      style: {\r\n        minWidth: \"170px\", // Adjust this value as needed\r\n        maxWidth: \"200px\", // Adjust this value as needed\r\n        // Width: '600px',    // Set a specific width\r\n      },\r\n      // sortable: true,\r\n    },\r\n    // { name: <strong>Time Created</strong>, selector: (row) => time(row.date_created),\r\n    // //  sortable: true\r\n    // },\r\n    {\r\n      name: <strong>Money Type</strong>,\r\n      selector: (row) => row.moneyType,\r\n      //  sortable: true\r\n    },\r\n    {\r\n      name: <strong className=\"w-50 text-center\">Amount</strong>,\r\n      selector: (row) => row.amount,\r\n      //  sortable: true\r\n      style: {\r\n        textAlign: \"center\",\r\n        // minWidth:'100px',\r\n      },\r\n    },\r\n    {\r\n      name: <strong>Description</strong>,\r\n      selector: (row) => row.discription,\r\n    },\r\n    {\r\n      name: <strong>Cash Belance</strong>,\r\n      selector: (row) => row.cash,\r\n    },\r\n  ];\r\n\r\n  const ShowDeposit = (type) => {\r\n    return (\r\n      <p\r\n        className={`text-capitalize position-static p-2 mb-0 ${\r\n          type === \"deposite\" ? \"bg-success\" : \"bg-danger\"\r\n        } rounded text-light text-center `}\r\n        style={{ width: \"75px\" }}\r\n      >\r\n        <FormattedMessage id={type}/>\r\n      </p>\r\n    );\r\n  };\r\nconst PDcolumn = [\r\n    {\r\n      name: (\r\n        <strong\r\n          style={{\r\n            textAlign: \"center\",\r\n            backgroundColor: \"tranceparent\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <FormattedMessage id=\"Delete\" />\r\n        </strong>\r\n      ),\r\n      selector: (row) => (\r\n        <button\r\n          onClick={() => {\r\n            delete_report(row);\r\n            // setEdit(row);\r\n            // setUpdate(true);\r\n            // seTtitle('Edit Type Money');\r\n          }}\r\n          style={{\r\n            border: \"none\",\r\n            backgroundColor: \"transparent\",\r\n            height: \"100%\",\r\n          }}\r\n        >\r\n          <img\r\n            height={\"15%\"}\r\n            width={\"15%\"}\r\n            src={Trash}\r\n            style={{ backgroundColor: \"tranceparent\" }}\r\n          />\r\n        </button>\r\n      ),\r\n    },\r\n    {\r\n      name: (\r\n        <strong>\r\n          <FormattedMessage id=\"Add By\" />\r\n        </strong>\r\n      ),\r\n      selector: (row) => row.user_name,\r\n    },\r\n\r\n    {\r\n      name: (\r\n        <strong>\r\n          <FormattedMessage id=\"Description\" />\r\n        </strong>\r\n      ),\r\n      selector: (row) => row.discription,\r\n    },\r\n    {\r\n      name: <strong>\r\n          <FormattedMessage id=\"Transaction\" /></strong>,\r\n      selector: (row) => ShowDeposit(row.type),\r\n    },\r\n    {\r\n      name: (\r\n        <strong className=\"w-50 text-center\">\r\n          {\" \"}\r\n          <FormattedMessage id=\"Amount\" />\r\n        </strong>\r\n      ),\r\n      selector: (row) => formatNumber(row.amount),\r\n      //  sortable: true\r\n      style: {\r\n        textAlign: \"center\",\r\n        // minWidth:'100px',\r\n      },\r\n    },\r\n\r\n    {\r\n      name: (\r\n        <strong>\r\n          {\" \"}\r\n          <FormattedMessage id=\"Currency\" />\r\n        </strong>\r\n      ),\r\n      selector: (row) => row.moneyType,\r\n      //  sortable: true\r\n    },\r\n    {\r\n      name: (\r\n        <strong\r\n          style={{ minWidth: \"170px\", maxWidth: \"200px\", width: \"200px\" }}\r\n        >\r\n          <FormattedMessage id=\"Date Created\" />\r\n        </strong>\r\n      ),\r\n      selector: (row) => date(row.date),\r\n      style: {\r\n        minWidth: \"170px\", // Adjust this value as needed\r\n        maxWidth: \"200px\", // Adjust this value as needed\r\n        // Width: '600px',    // Set a specific width\r\n      },\r\n      // sortable: true,\r\n    },\r\n\r\n    {\r\n      name: (\r\n        <strong>\r\n          {\" \"}\r\n          <FormattedMessage id=\"Customer Name\" />\r\n        </strong>\r\n      ),\r\n      selector: (row) => row.customer,\r\n      style: {\r\n        padding: \"0px 20px\",\r\n        justifyContent: \"left\",\r\n        textAlign: \"center\",\r\n      },\r\n      // sortable: true\r\n    },\r\n\r\n    {\r\n      name: (\r\n        <strong style={{ width: \"1px\" }}>\r\n          <FormattedMessage id=\"ID\" />\r\n        </strong>\r\n      ),\r\n      selector: (row) => row.id,\r\n      //  sortable: true\r\n      style: {\r\n        width: \"1px\",\r\n        minWidth: \"10px\",\r\n      },\r\n    },\r\n  ];\r\n  const columnsDesktop = [\r\n    {\r\n      name: <strong style={{ width: \"1px\" }}>ID</strong>,\r\n      selector: (row) => row.id,\r\n      style: {\r\n        width: \"1px\",\r\n        minWidth: \"10px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: <strong>Customer Name</strong>,\r\n      selector: (row) => row.customer,\r\n      style: {\r\n        padding: \"0px 20px\",\r\n        justifyContent: \"left\",\r\n        textAlign: \"center\",\r\n      },\r\n    },\r\n    {\r\n      name: (\r\n        <strong\r\n          style={{ minWidth: \"170px\", maxWidth: \"200px\", width: \"200px\" }}\r\n        >\r\n          Date Created\r\n        </strong>\r\n      ),\r\n      selector: (row) => date(row.date),\r\n      style: {\r\n        minWidth: \"170px\", // Adjust this value as needed\r\n        maxWidth: \"200px\", // Adjust this value as needed\r\n        // Width: '600px',    // Set a specific width\r\n      },\r\n      // sortable: true,\r\n    },\r\n    // { name: <strong>Time Created</strong>, selector: (row) => time(row.date_created),\r\n    // //  sortable: true\r\n    // },\r\n    {\r\n      name: <strong>Money Type</strong>,\r\n      selector: (row) => row.moneyType,\r\n      //  sortable: true\r\n    },\r\n    {\r\n      name: <strong className=\"w-50 text-center\">Amount</strong>,\r\n      selector: (row) => formatNumber(row.amount),\r\n      //  sortable: true\r\n      style: {\r\n        textAlign: \"center\",\r\n        // minWidth:'100px',\r\n      },\r\n    },\r\n    {\r\n      name: <strong>Transaction</strong>,\r\n      selector: (row) => ShowDeposit(row.type),\r\n    },\r\n    {\r\n      name: <strong>Description</strong>,\r\n      selector: (row) => row.discription,\r\n    },\r\n    // {\r\n    //   name: <strong>Cash Belance</strong>,\r\n    //   selector: (row) => row.cash,\r\n    // },\r\n    {\r\n      name: <strong>Added by </strong>,\r\n      selector: (row) => row.user_name,\r\n    },\r\n    {\r\n      name: (\r\n        <strong\r\n          style={{\r\n            textAlign: \"center\",\r\n            backgroundColor: \"tranceparent\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          Delete\r\n        </strong>\r\n      ),\r\n      selector: (row) => (\r\n        <button\r\n          onClick={() => {\r\n            delete_report(row);\r\n            // setEdit(row);\r\n            // setUpdate(true);\r\n            // seTtitle('Edit Type Money');\r\n          }}\r\n          style={{\r\n            border: \"none\",\r\n            backgroundColor: \"transparent\",\r\n            height: \"100%\",\r\n          }}\r\n        >\r\n          <img\r\n            height={\"15%\"}\r\n            width={\"15%\"}\r\n            src={Trash}\r\n            style={{ backgroundColor: \"tranceparent\" }}\r\n          />\r\n        </button>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const columnsTablet = [\r\n    // { name: \"Id\", selector: (row) => row.id, sortable: true },\r\n    { name: \"account_name\", selector: (row) => row.customer, sortable: true },\r\n    // {\r\n    //   name: \"Date Created\",\r\n    //   selector: (row) => row.date_created,\r\n    //   sortable: true,\r\n    // },\r\n    { name: \"moneyType\", selector: (row) => row.moneyType, sortable: true },\r\n    { name: \"Amount\", selector: (row) => row.amount, sortable: true },\r\n    // { name: \"discription\", selector: (row) => row.discription, sortable: true },\r\n    // {\r\n    //   name: <strong>Cach Belance</strong>,\r\n    //   selector: (row) => row.cash,\r\n    // },\r\n    ,\r\n  ];\r\n  const [value, setValue] = useState(\"\");\r\n  const onChange = (row) => {\r\n    setPopup(true);\r\n    setValue(row.target.value);\r\n  };\r\n\r\n  const Onsearch = (row) => {\r\n    // This gives you the ISO string in UTC\r\n    // setIsoDate(isoString);\r\n\r\n    if (row) {\r\n      setmoneyname(row.moneyType);\r\n      setusername(row.account_name);\r\n      setmoneytype(row.moneyId);\r\n      setidbelance(row.id);\r\n      setselectedBelance((prevState) => ({\r\n        ...prevState,\r\n        id: row.id,\r\n        moneyId: row.moneyId,\r\n        user: row.user,\r\n        moneyType: row.moneyType,\r\n        account: row.account,\r\n        account_name: row.account_name,\r\n        type: row.type,\r\n        belance: row.belance, // Assuming 'belance' is correct, it seems like a typo\r\n        date_created: row.date_created,\r\n      }));\r\n      let belanceName = row.account_name + \" \" + row.moneyType;\r\n      setAddDeposite({\r\n        ...AddDeposite,\r\n        account: row.id,\r\n        // date:isoString,\r\n      });\r\n      setPopup(false);\r\n      // console.log(belanceName)\r\n      setValue(belanceName);\r\n      // console.log('s  earch ',row);\r\n    }\r\n  };\r\n  const [select_user, setselect_user] = useState(\"\");\r\n  const ChangeUser = (e) => {\r\n    if (e.target.value !== \"all users\") {\r\n      const newData = deposite.filter((row) => {\r\n        if (typeof row.user_name === \"string\") {\r\n          return row.user_name\r\n            .toLowerCase()\r\n            .includes(e.target.value.toLowerCase());\r\n        }\r\n        return false;\r\n      });\r\n      setRecords(newData);\r\n    } else {\r\n      setRecords(deposite);\r\n    }\r\n    setselect_user(e.target.value);\r\n  };\r\n  // console.log(AddDeposite)\r\n  const [selectedOption, setSelectedOption] = useState();\r\n  const [formattedValue, setFormattedValue] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    const formattedValue = e.target.value;\r\n    // Remove the thousand separators (commas)\r\n    const unformattedValue = formattedValue.replace(/,/g, \"\").replace(\"$\", \"\");\r\n    setFormattedValue(formattedValue);\r\n    setAddDeposite({\r\n      ...AddDeposite,\r\n      amount: unformattedValue,\r\n      user: localStorage.getItem(\"userTokenid\"),\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const inputElement = document.querySelector(\".form-control\"); // Use the class or other selector\r\n    if (inputElement) {\r\n      setTimeout(() => {\r\n        inputElement.focus(); // Focus the input field\r\n        inputElement.select(); // Select the text in the input field\r\n      }, 0);\r\n    }\r\n  }, []);\r\n  const Hanlderef = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      // Check if the Enter key was pressed\r\n      e.preventDefault(); // Prevent default action if needed\r\n      if (filterRef.current) {\r\n        filterRef.current.click(); // Programmatically click the button\r\n      }\r\n    }\r\n  };\r\n  const filterRef = useRef(null);\r\n  const [selectedDayE, setSelectedDayE] = useState();\r\n\r\n  const [Diversity, setDiversity] = useState();\r\n  const [account, setAccount] = useState();\r\n  const [selectedOption1, setSelectedOption1] = useState();\r\n  const [EditDeposit, setEditDeposit] = useState({\r\n    id: 0,\r\n    account: 0,\r\n    date: \"\",\r\n    amount: 0,\r\n    discription: \"\",\r\n    type: \"\",\r\n    customer: \"\",\r\n    moneyType: \"\",\r\n    cash: 0,\r\n    delete: false,\r\n    user: 0,\r\n    user_name: \"\",\r\n    moneyid: 0,\r\n  });\r\n  const editeRef = useRef(null);\r\n  const [type,settype]=useState({name:'withdraw'});\r\n  const [primarytype,setprimarytype]=useState();\r\n  const handleshow = (row) => {\r\n    setprimarytype(row.type);\r\n    // editeRef.current.select();\r\n    settype({ name: row.type,label:row.type});\r\n\r\n    setAccount(row.account);\r\n    setSelectedDayE(moment(row.date));\r\n    let edit = {\r\n      account_name: row.customer,\r\n      moneyType: row.moneyType,\r\n    };\r\n    setSelectedOption1(edit);\r\n    setDiversity(row.amount);\r\n    let news;\r\n    try {\r\n      news = new Date(row.date);\r\n      if (isNaN(news.getTime())) {\r\n        throw new Error(\"Invalid date\");\r\n      }\r\n    } catch (error) {\r\n      // console.error('Invalid date format:', row.date);\r\n      return;\r\n    }\r\n    news.setDate(news.getDate());\r\n\r\n    const jalaliDate = jalaali.toJalaali(\r\n      news.getFullYear(),\r\n      news.getMonth() + 1,\r\n      news.getDate()\r\n    );\r\n    const gregorianMoment = moment(news);\r\n    setSelectedDayE(gregorianMoment);\r\n    setEditDeposit(row);\r\n    setOpenEdit(true);\r\n  };\r\n  const [OpenEdit, setOpenEdit] = useState(false);\r\n  const [EndDateE, setEndDateE] = useState(null);\r\n\r\n\r\n\r\n\r\n  const handlePerRowsChange = async (newPerPage, page) => {\r\n    setPerPage(newPerPage);\r\n    setCurrentPage(page);\r\n  };\r\n  // const [data, setData] = useState([]);\r\n  const [totalRows, setTotalRows] = useState(0); // تعداد کل ردیف‌ها\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);  // صفحه فعلی\r\n  const [perPage, setPerPage] = useState(10); // تعداد آیتم‌ها در هر صفحه\r\n\r\n  // دریافت داده‌ها از سرور\r\n  const fetchData = async (page, pageSize) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios\r\n      .get(Source.getAddress() + \"/api/report\", {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"access\")}`, // Add the access token here\r\n          // Do NOT set 'Content-Type' when using FormData; let the browser set it automatically\r\n        },\r\n        params: {\r\n          user_id: selecteduser.id,\r\n          page: page,\r\n          perPage: pageSize,\r\n          delete: 0,\r\n          StartDate: StartDate && Date_Start,\r\n          EndDate: EndDate && Date_End,\r\n          moneyid: localStorage.getItem(\"cashid\"),\r\n          search: namesearch?.length ? namesearch : \"false\",\r\n          type:\"all\",\r\n\r\n        },\r\n      })\r\n      setRecords(response.data.data); // داده‌های صفحه جاری\r\n      setTotalRows(response.data.total); // تعداد کل ردیف‌ها\r\n      setLoading(false);\r\n    } catch (error) {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // فراخوانی داده‌ها هنگام بارگذاری صفحه یا تغییر صفحه\r\n  useEffect(() => {\r\n    fetchData(currentPage, perPage);\r\n  }, [currentPage, perPage, EndDate, StartDate, selecteduser, namesearch]);\r\n\r\n  // مدیریت تغییر صفحه\r\n  const handlePageChange = page => {\r\n    setCurrentPage(page); // برو به صفحه جدید\r\n  };\r\n\r\n    const [SearchQueryTo, setSearchQueryTo] = useState();\r\n  const handleInputChangeTo = (newValue) => {\r\n    setSearchQueryTo(newValue); // بروزرسانی مقدار ورودی جستجو\r\n    // handleSearchTo(newValue); // ارسال درخواست جستجو به سرور\r\n  };\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(`${Source.getAddress()}/api/belance`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n          },\r\n          params: { query: SearchQueryTo, do: \"ok\" }, // ارسال پارامتر جستجو به سرور\r\n        });\r\n        setbelance(response.data);\r\n        const data = response.data;\r\n        console.log(data);\r\n\r\n        // if (data && data.length === 0) {\r\n        //   setSelectedOptionTo({ id: 0, name: searchQueryTo });\r\n        // } else {\r\n        //   setOptionsTo(data); // ذخیره داده‌ها برای نمایش در لیست\r\n        // }\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    // if(selectedOption){\r\n    if (!SearchQueryTo || SearchQueryTo.length < 3) {\r\n      setbelance([]);\r\n      return;\r\n    } else {\r\n      fetchData();\r\n    }\r\n    // }\r\n  }, [SearchQueryTo]);\r\n  return (\r\n    <div\r\n      className=\"container mt-5 w-100 h-100\"\r\n      onClick={(e) => {\r\n        if (\r\n          e.target.className === \"container mt-5 w-100 h-100\" ||\r\n          e.target.className ===\r\n            \"col-12 w-100 row rounded-3 m-3 pe-5 p-1 bg-transparent\"\r\n        ) {\r\n          setPopup(false);\r\n        }\r\n      }}\r\n    >\r\n      <a\r\n        href=\"/cash\"\r\n        type=\"button\"\r\n        class=\"btn btn-info px-4\"\r\n        style={{ color: \"white\" }}\r\n      >\r\n                    <FormattedMessage id=\"Back in cash\" />\r\n      </a>\r\n      <form class=\"row w-100 rounded-3 m-3 p-1 bg-transparent\"\r\n                dir={localStorage.getItem(\"language\") === \"en\" ? \"ltr\" : \"rtl\"}\r\n      >\r\n        <div class=\"col-lg-2 col-md-3 col-sm-6 m-1 mt-3\">\r\n        <label for=\"category\">\r\n            <FormattedMessage id=\"Customer\" />\r\n          </label>\r\n          <ComboBoxDeposite\r\n            searchQuery={SearchQueryTo}\r\n            setSearchQuery={setSearchQueryTo}\r\n            handleInputChange={handleInputChangeTo}\r\n            // handleSearch={handleSearchTo}\r\n            setSelectedOption={setSelectedOption}\r\n            selectedOption={selectedOption}\r\n            options={belance}\r\n            Onsearch={Onsearch}\r\n          />\r\n        </div>\r\n        <div class=\"col-lg-2 col-md-3 col-sm-6 m-0 mb-3 mt-3 ms-3 p-0 pe-4\">\r\n          <label for=\"price\">            <FormattedMessage id=\"Amount\" />          </label>\r\n          <NumericFormat\r\n            ref={inputRef}\r\n            onKeyDown={handleKeyDown}\r\n            thousandSeparator={true}\r\n            name=\"amount\"\r\n            className=\"form-control\"\r\n            value={formattedValue}\r\n            placeholder=\"0\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div class=\"col-lg-3 col-md-6 col-sm-12 m-2 mt-3 ps-2 p-0 pe-3\">\r\n          <div class=\"form-floating\">\r\n            <textarea\r\n              onKeyDown={handleKeyDown}\r\n              name=\"discription\"\r\n              class=\"form-control h-50\"\r\n              placeholder=\"Leave a comment here\"\r\n              id=\"floatingTextarea2\"\r\n              value={AddDeposite.discription}\r\n              onChange={handleDeposite}\r\n            ></textarea>\r\n            <label for=\"floatingTextarea2\">            <FormattedMessage id=\"Description\" />            </label>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-lg-3 col-md-6 col-sm-12  mt-3 ps-3 p-0\">\r\n          \r\n          <label htmlFor=\"category\">\r\n          <FormattedMessage id=\"Type\" />\r\n          </label>\r\n          <select\r\n            name=\"type\"\r\n            id=\"category\"\r\n            value={AddDeposite.type}\r\n            onChange={handleDeposite}\r\n            className=\"form-select\"\r\n            style={{ width: \"70%\", fontWeight: \"normal\", fontSize: \"15px\" }}\r\n          >\r\n            <option selected  value=\"deposite\">\r\n            <FormattedMessage id=\"Deposit\" />\r\n            </option>\r\n            <option value=\"withdraw\">\r\n            <FormattedMessage id=\"Withdraw\" />\r\n            </option>\r\n          </select>\r\n        </div>\r\n        <div\r\n          class=\"col-lg-1 col-md-3 col-sm-6 p-0 ps-0 ms-0\"\r\n          style={{ marginTop: \"2.3rem\" }}\r\n        >\r\n          <button\r\n            onClick={() => {\r\n              SumbitReport();\r\n            }}\r\n            ref={buttonRef}\r\n            type=\"button\"\r\n            class=\"btn btn-success w-100\"\r\n          >\r\n                        <FormattedMessage id=\"Add\" />\r\n          </button>\r\n        </div>\r\n      </form>\r\n\r\n      <div\r\n                dir={localStorage.getItem(\"language\") === \"en\" ? \"ltr\" : \"rtl\"}\r\n        className=\"bg-light d-flex flex-column flex-lg-row justify-content-lg-between align-items-start align-items-lg-center\"\r\n        style={{ borderTop: \"5px solid #4a5cf2\" }}\r\n      >\r\n        <h2 className=\"m-2 fw-bold mb-4\"><FormattedMessage id=\"Deposite\"/>\r\n        </h2>\r\n        <div className=\"d-flex flex-column flex-lg-row align-items-start align-items-lg-center\">\r\n          <div className=\"mb-1 mb-lg-0 me-lg-2 mt-1 \">\r\n            <Datepicker_Customer\r\n              default_value={StartDate}\r\n              handle_date={handle_date_start}\r\n              lebal={<FormattedMessage id=\"Start\"/>}\r\n              setSelectedDay={setStartDate}\r\n              selectedDay={StartDate}\r\n            ></Datepicker_Customer>\r\n          </div>\r\n          <div className=\"mb-1 mt-1 mb-lg-0 me-lg-2\">\r\n            <Datepicker_Customer\r\n              default_value={EndDate}\r\n              handle_date={handle_date_end}\r\n              lebal={<FormattedMessage id=\"End\"/>}\r\n              setSelectedDay={setEndDate}\r\n              selectedDay={EndDate}\r\n            ></Datepicker_Customer>\r\n          </div>\r\n          <ListBox\r\n            options={users}\r\n            selectedOption={selecteduser}\r\n            setSelectedOption={setSelecteduser}\r\n          />\r\n        </div>\r\n        <input\r\n  className=\"form-control m-2 mb-2 mt-4\"\r\n  style={{ width: \"100%\", maxWidth: \"200px\" }}\r\n  type=\"search\"\r\n  onChange={handleName}\r\n  value={namesearch}\r\n  placeholder={formatMessage({ id: \"Search\" })}\r\n  aria-label=\"Search\"\r\n/>\r\n      </div>\r\n      <Edit_ThirdDepttable\r\n        // useRef1={editeRef}\r\n        primarytype={primarytype}\r\n        setprimarytype={setprimarytype}\r\n        type={type}\r\n        settype={settype}\r\n        setSelectedOption={setSelectedOption1}\r\n        selectedOption={selectedOption1}\r\n        money={money}\r\n        accounts={accounts}\r\n        setAccounts={setAccounts}\r\n        records={records}\r\n        setRecords={setRecords}\r\n        handleKeyDown={handleKeyDown}\r\n        setCash={setCash}\r\n        Cash={Cash}\r\n        belance={belance}\r\n        setbelance={setbelance}\r\n        account={account}\r\n        setAccount={setAccount}\r\n        Diversity={Diversity}\r\n        setDiversity={setDiversity}\r\n        selectedDay={selectedDayE}\r\n        setselectedDay={setSelectedDayE}\r\n        EndDate={EndDateE}\r\n        Edit_Deposit={EditDeposit}\r\n        setEditDeposit={setEditDeposit}\r\n        settings={settings}\r\n        handle_date={handle_date}\r\n        // lebal={\"Date\"}\r\n        setSelectedDay={setSelectedDayE}\r\n        open={OpenEdit}\r\n        closeEdit={() => setOpenEdit(false)}\r\n      />\r\n\r\n      {/* <DataTable\r\n        // title=\"Customers\"\r\n        columns={\r\n          res\r\n            ? localStorage.getItem(\"userTokenname\") === \"admin\"\r\n              ? columnsDesktop\r\n              : columnsDesktopsimple\r\n            : columnsTablet\r\n        }\r\n        data={records}\r\n        onRowClicked={handleshow}\r\n        striped\r\n        responsive\r\n        highlightOnHover\r\n        pagination\r\n        // noHeader\r\n        // noTableHead\r\n      /> */}\r\n\r\n    <DataTable\r\n      // title=\"Server Side Data Table\"\r\n      onRowClicked={handleshow}\r\n      columns={\r\n        res\r\n          ? localStorage.getItem(\"userTokenname\") === \"admin\"\r\n            ? localStorage.getItem('language')=='da'? PDcolumn : columnsDesktop\r\n            : columnsDesktopsimple\r\n          : columnsTablet\r\n      }\r\n\r\n      data={records}\r\n      progressPending={loading}\r\n      striped\r\n        responsive\r\n        highlightOnHover\r\n      pagination\r\n      paginationServer // فعال‌سازی صفحه‌بندی سرور ساید\r\n      paginationTotalRows={totalRows} // تعداد کل ردیف‌ها\r\n      onChangePage={handlePageChange} // تغییر صفحه\r\n      onChangeRowsPerPage={handlePerRowsChange} // تغییر تعداد ردیف‌ها در صفحه\r\n    />\r\n\r\n\r\n\r\n\r\n      {edit && (\r\n        <AccountEdit\r\n          close={() => setEdit(false)}\r\n          account={editAccount}\r\n          setAccount={setEditAccount}\r\n        />\r\n      )}\r\n\r\n      {/* <img style={{height:'6%',width:'6%'}} className=\"p-0\" src={Add}/> */}\r\n      {openBelance && (\r\n        <Belance\r\n          close={() => setOpenBelance(false)}\r\n          id={id}\r\n          accountbelance={editAccount}\r\n        />\r\n      )}\r\n      {addAccountModal && (\r\n        <AddAccount close={() => setAddAccountModal(false)} />\r\n      )}\r\n      {alert && <Alert />}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Select, { components } from 'react-select';\r\nimport { FormattedMessage,useIntl } from \"react-intl\";\r\n\r\nconst Combo_Customer = ({ \r\n  isEditable = false, \r\n  options, \r\n  Onsearch, \r\n  selectedOption, \r\n  // readOnly, \r\n  setSelectedOption, \r\n  searchQuery, \r\n  handleInputChange \r\n}) => {\r\n  const handleChange = (sselectedOption) => {\r\n    setSelectedOption(sselectedOption);\r\n    Onsearch(sselectedOption);\r\n  };\r\n\r\n//   const CustomMenuList = (props) => (\r\n//     <components.MenuList {...props}>\r\n//       {props.children}\r\n//       {type && (\r\n//         <div\r\n//           style={{\r\n//             display: \"flex\",\r\n//             justifyContent: \"center\",\r\n//             padding: \"10px\",\r\n//             borderTop: \"1px solid #eaeaea\",\r\n//             cursor: \"pointer\",\r\n//             backgroundColor: \"#f9f9f9\",\r\n//           }}\r\n//           onClick={() => setAddAccountModal(searchQuery)}\r\n//         >\r\n//           <strong>{name}</strong>\r\n//         </div>\r\n//       )}\r\n//     </components.MenuList>\r\n//   );\r\nconst { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <div className=\"w-40\">\r\n      <Select\r\n        classNamePrefix=\"custom-select\"\r\n        inputValue={searchQuery}\r\n        value={selectedOption}\r\n        onChange={handleChange}\r\n        options={options}\r\n        onInputChange={handleInputChange}\r\n        getOptionLabel={(option) => (\r\n            <div style={{ display: 'flex', alignItems: 'center' }}>\r\n              <span>{`${option.account_name} ${option.moneyType}`}</span>\r\n            </div>)}\r\n        getOptionValue={(option) => `${option.account_name} ${option.moneyType}`}\r\n        // placeholder=\"Search...\"\r\n        placeholder={formatMessage({ id: \"Search...\" })}\r\n        isClearable\r\n        isSearchable\r\n        isDisabled={isEditable}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Combo_Customer;\r\n"],"names":["ListBox","_ref","isDisabled","options","selectedOption","setSelectedOption","width","formatMessage","locale","useIntl","isRTL","allUsersOption","name","_jsx","FormattedMessage","id","updatedOptions","useEffect","customStyles","control","base","state","_objectSpread","fontFamily","localStorage","getItem","backgroundColor","zIndex","borderRadius","border","isFocused","boxShadow","minHeight","padding","textAlign","direction","menu","overflow","option","_ref2","isSelected","color","cursor","fontSize","singleValue","fontWeight","placeholder","dropdownIndicator","menuPortal","input","className","style","dir","children","Select","classNamePrefix","value","onChange","getOptionLabel","getOptionValue","isClearable","isSearchable","menuPortalTarget","document","body","styles","components","DropdownIndicator","_ref3","innerProps","ChevronDown","size","ClearIndicator","defaultProps","Edit_ThirdDepttable","useRef1","Edit_Deposit","closeEdit","open","settings","EndDateE","account","setAccount","setEditDeposit","selectedDay","setSelectedDay","Diversity","setDiversity","setCash","Cash","belance","setbelance","records","setRecords","type","settype","primarytype","setprimarytype","moneyid","setmoneyid","useState","showAlert","useShowAlert","AddDeposite","setAddDeposite","user","discription","amount","date","cash","delete","selectedBelance","setselectedBelance","account_name","moneyType","moneyId","date_created","idbelance","setidbelance","moneytype","setmoneytype","username","setusername","moneyname","setmoneyname","handleAll","e","target","add","setadd","user_name","bbelance","setbbelance","buttonRef","useRef","handleKeyDown","key","preventDefault","current","click","_jsxs","concat","overflowX","overflowY","onClick","transition","transitionDuration","flexWrap","margin","for","ComboBox","Onsearch","row","prevState","onKeyDown","Datepicker_Customer","default_value","handle_date","jalaliDate","year","month","day","now","jalaali","Date","String","getHours","padStart","getMinutes","t","isoString","toISOString","lebal","maxWidth","htmlFor","ref","class","async","axios","put","Source","getAddress","headers","then","res","prevRecords","map","record","data","report","position","icon","title","showConfirmButton","timer","catch","err","params","formatNumber","number","toLocaleString","ThirdDeptDtable","accounts","setAccounts","money","setMoney","statuss","useSelector","selecteduser","setSelecteduser","users","statusu","namesearch","setnameSearch","Date_Start","setDate_start","Date_End","setDate_end","intl","inputRef","deposite","setdeposite","moment","setopen","alert","setalert","Ddate","setDdate","utils","getToday","de_id","setde_id","report_delete","Setreport_delete","delete_report","setOpenEdit","swalWithBootstrapButtons","Swal","customClass","confirmButton","cancelButton","buttonsStyling","result","fire","text","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","isConfirmed","update","isdelete","Authorization","filter","prevBelance","a","dismiss","cancel","openBelance","setOpenBelance","edit","setEdit","editAccount","setEditAccount","setId","addAccountModal","setAddAccountModal","StartDate","setStartDate","EndDate","setEndDate","handleDeposite","Popup","setPopup","useMemo","window","innerWidth","d","formattedDate","getFullYear","getMonth","getDate","hours","minutes","ampm","aa","formattedHours","formattedMinutes","convertToHijriShamsi","gregorianDate","jalaliYear","jalaliMonth","jalaliDay","gregorianToJalali","columnsDesktopsimple","selector","minWidth","customer","justifyContent","ShowDeposit","PDcolumn","height","src","Trash","columnsDesktop","setValue","select_user","setselect_user","formattedValue","setFormattedValue","inputElement","querySelector","setTimeout","focus","select","selectedDayE","setSelectedDayE","selectedOption1","setSelectedOption1","EditDeposit","OpenEdit","setEndDateE","totalRows","setTotalRows","loading","setLoading","currentPage","setCurrentPage","perPage","setPerPage","page","pageSize","response","get","user_id","search","length","total","error","fetchData","SearchQueryTo","setSearchQueryTo","query","do","href","ComboBoxDeposite","searchQuery","setSearchQuery","handleInputChange","newValue","belanceName","NumericFormat","thousandSeparator","unformattedValue","replace","selected","marginTop","SumbitReport","add_deposite","account_id","submitdeposite","post","add_cash","moneys","borderTop","setselectedDay","DataTable","onRowClicked","label","news","isNaN","getTime","Error","setDate","gregorianMoment","columns","sortable","progressPending","striped","responsive","highlightOnHover","pagination","paginationServer","paginationTotalRows","onChangePage","onChangeRowsPerPage","newPerPage","AccountEdit","close","Belance","accountbelance","AddAccount","Alert","isEditable","inputValue","sselectedOption","onInputChange","display","alignItems"],"sourceRoot":""}