{"version":3,"file":"static/js/6622.6dad78ea.chunk.js","mappings":"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","sources":["pages/forms/Combo_Customer.js","pages/forms/AddMoney.js","pages/Money.js","pages/Items/forms/EditSell.js","pages/Items/forms/AddItem.js","pages/psbox/Combo_Customer.js","pages/forms/ComboBox.js"],"sourcesContent":["import React from 'react';\r\nimport Select, { components } from 'react-select';\r\nimport { FormattedMessage,useIntl } from \"react-intl\";\r\nconst Combo_Customer = ({ \r\n  isEditable = false, \r\n  name, \r\n  type, \r\n  options, \r\n  Onsearch, \r\n  selectedOption, \r\n  setAddAccountModal, \r\n  setSelectedOption, \r\n  searchQuery, \r\n  handleInputChange \r\n}) => {\r\n  const handleChange = (sselectedOption) => {\r\n    setSelectedOption(sselectedOption);\r\n    // console.log('hi');\r\n    // Onsearch(sselectedOption);\r\n  };\r\n// console.log(searchQuery);\r\n  const CustomMenuList = (props) => (\r\n    <components.MenuList {...props}>\r\n      {props.children}\r\n      {type && (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            padding: \"10px\",\r\n            borderTop: \"1px solid #eaeaea\",\r\n            cursor: \"pointer\",\r\n            backgroundColor: \"#f9f9f9\",\r\n          }}\r\n          onClick={() => {\r\n            setAddAccountModal(searchQuery)\r\n            // setSelectedOption({id:0, name:searchQuery});\r\n          }}\r\n        >\r\n          <strong>{name}</strong>\r\n        </div>\r\n      )}\r\n    </components.MenuList>\r\n  );\r\n\r\n  const customStyles = {\r\n    menuPortal: (base) => ({ ...base, zIndex: 9999 }),\r\n  };\r\nconst { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <div className=\"w-40\">\r\n      <Select\r\n        classNamePrefix=\"custom-select\"\r\n        inputValue={searchQuery}\r\n        value={selectedOption}\r\n        onChange={handleChange}\r\n        options={options}\r\n        onInputChange={handleInputChange}\r\n        getOptionLabel={(option) => (\r\n          <div style={{ display: 'flex', alignItems: 'center' }}>\r\n            <span>{`${option.name} `}</span>\r\n          </div>\r\n        )}\r\n        getOptionValue={(option) => `${option.name}`}\r\n        // placeholder=\"Search...\"\r\n        placeholder={formatMessage({ id: \"Search...\" })}\r\n        isClearable\r\n        components={{ MenuList: CustomMenuList }}\r\n        isSearchable\r\n        isDisabled={isEditable}\r\n        menuPortalTarget={document.body} // انتقال منو به `body`\r\n        styles={customStyles} // تنظیم `z-index`\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Combo_Customer;","import axios from \"axios\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { useShowAlert  } from \"../../warrper\";\r\nexport default function AddMoney({\r\n  setAdd,\r\n  title,\r\n  Addmoney,\r\n  error,\r\n  add,\r\n  setmoney,\r\n  money,\r\n  setError,\r\n  inputRef,\r\n}) {\r\n  const showAlert = useShowAlert(); \r\n  const handle = (e) => {\r\n    setmoney({\r\n      ...money,\r\n      [e.target.name]: e.target.value,\r\n      // user: parseInt(localStorage.getItem(\"userTokenid\")),\r\n    });\r\n  };\r\n  const buttonRef = useRef(null);\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      // Check if the Enter key was pressed\r\n      e.preventDefault(); // Prevent default action if needed\r\n      if (buttonRef.current && add) {\r\n        buttonRef.current.click(); // Programmatically click the button\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n  className={`rounded-4 row g-2 money popup m-4 mb-0 ${add && \"show\"} justify-content-center`}\r\n  style={{\r\n    width: \"30vw\",\r\n    maxWidth: \"100%\",\r\n  }}\r\n>\r\n  <h1\r\n    className=\"text-center rounded m-0 p-2 w-100 text-light fs-4\"\r\n    style={{ backgroundColor: \"var(--bs-info)\" }}\r\n  >\r\n    <FormattedMessage id=\"Add Currency\" />\r\n  </h1>\r\n\r\n  <div className=\"col-12 d-flex flex-column align-items-center\">\r\n    <label htmlFor=\"exampleInputEmail1\" className=\"w-100 text-start\">\r\n      <FormattedMessage id=\"Currency Name\" />\r\n    </label>\r\n    <input\r\n      ref={inputRef}\r\n      onKeyDown={handleKeyDown}\r\n      type=\"text\"\r\n      name=\"name\"\r\n      onChange={handle}\r\n      value={money.name}\r\n      className=\"form-control\"\r\n      id=\"exampleInputEmail1\"\r\n      aria-describedby=\"emailHelp\"\r\n      style={{ width: \"100%\", maxWidth: \"90%\" }}\r\n    />\r\n  </div>\r\n\r\n  <div className=\"col-12 d-flex justify-content-center mt-4 gap-2 flex-wrap\">\r\n    <button\r\n      className=\"btn btn-danger text-light\"\r\n      style={{ width: \"120px\" }}\r\n      onClick={() => {\r\n        setAdd(false);\r\n        setError(false);\r\n      }}\r\n    >\r\n      <FormattedMessage id=\"Cancel\" />\r\n    </button>\r\n\r\n    <button\r\n      className=\"btn btn-success text-light\"\r\n      ref={buttonRef}\r\n      style={{ width: \"120px\" }}\r\n      onClick={() => Addmoney(money)}\r\n    >\r\n      <FormattedMessage id=\"Submit\" />\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n  );\r\n}","import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport Source from \"../Source\";\r\nimport Trash from \"../assets/icon/trash.png\";\r\nimport pencil from \"../assets/icon/pencil.png\";\r\nimport AddMoney from \"./forms/AddMoney\";\r\nimport { NumericFormat } from \"react-number-format\";\r\nimport Swal from \"sweetalert2\";\r\nimport { showAlert } from \"../warrper\";\r\nimport UpdateMoney from \"./forms/Updatemoney\";\r\nimport \"./forms/money.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { batchActions } from \"redux-batched-actions\";\r\nimport Datepicker_Customer from \"./forms/Datepicker_customer\";\r\nimport jalaali from \"jalaali-js\";\r\nimport { addBelanceToCache, addMultipleDataToCache, getBelances } from \"./Redux/belanceSlice\";\r\nimport { addMoneyToCache, addProductToServer, getMoneys } from \"./Redux/moneysSlice\";\r\nimport { getCustomers } from \"./Redux/customerSlice\";\r\nimport { getReports } from \"./Redux/reportSlice\";\r\nimport { getItems } from \"./Redux/itemSlice\";\r\nimport { persistor } from \"./Redux/store\"; // persistor را وارد کنید\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\nimport ReactDOMServer from \"react-dom/server\";\r\nimport { useShowAlert } from \"../warrper\";\r\n\r\nexport default function Money({ user, settings }) {\r\n  const dispatch = useDispatch();\r\n  const intl = useIntl();\r\n  const showAlert = useShowAlert();\r\n\r\n  const [money, setMoney] = useState([]);\r\n  const [record, setRecords] = useState([]);\r\n  const [exchange, setExchange] = useState([]);\r\n  const [isNewExchange, setIsNewExchange] = useState(true);\r\n  const [Date_End, setDate_end] = useState(new Date().toISOString().slice(0, 10));\r\n  const [EndDate, setEndDate] = useState(null);\r\n  const [add, setAdd] = useState(false);\r\n  const [update, setUpdate] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [select_user, setSelect_user] = useState(\"\");\r\nconst [edit,setEdit]=useState({name:''});  \r\nconst [money1,setmoney]=useState({name:''});\r\n\r\n// ریفرنس‌های مورد نیاز\r\n  const inputRef = useRef(null);\r\n  const updateRef = useRef(null);\r\n\r\n  // دریافت لیست ارزها\r\n  useEffect(() => {\r\n    axios\r\n      .get(Source.getAddress() + \"/api/money\", {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n        },\r\n        params: { delete: \"0\",daily:'ok' },\r\n      })\r\n      .then((res) => {\r\n        setMoney(res.data);\r\n        setRecords(res.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  // دریافت نرخ ارز از سرور\r\n  useEffect(() => {\r\n    axios\r\n      .get(Source.getAddress() + \"/api/rate\", {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n        },\r\n        params: { date:Date_End },\r\n      })\r\n      .then((res) => {\r\n        console.log(\"Rate response:\", res);\r\n        if (res.data) {\r\n          setIsNewExchange(true);\r\n          // اگر هیچ نرخ از سرور دریافت نشد، از اطلاعات record استفاده می‌کنیم\r\n          if (record.length > 0) {\r\n            setExchange(record.map((row,idx) => ({ money_id: row.id, from_amount: res.data[idx]?.money_id===row.id ? res.data[idx].from_amount : 0 })));\r\n          }else{\r\n            setExchange(record.map((row) => ({ money_id: row.id, from_amount: 0 })));\r\n          }\r\n        } else {\r\n          setExchange(res.data);\r\n          setIsNewExchange(false);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, [EndDate, record]);\r\n\r\n  // تابع حذف ارز\r\n  const Delete = async (row) => {\r\n    const swalWithBootstrapButtons = Swal.mixin({\r\n      customClass: {\r\n        confirmButton: \"btn btn-success\",\r\n        cancelButton: \"btn btn-danger\",\r\n      },\r\n      buttonsStyling: false,\r\n    });\r\n    const result = await swalWithBootstrapButtons.fire({\r\n      title: intl.formatMessage({ id: \"Are you sure?\" }),\r\n      text: intl.formatMessage({ id: \"You won't be able to revert this!\" }),\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonText: intl.formatMessage({ id: \"Yes, delete it!\" }),\r\n      cancelButtonText: intl.formatMessage({ id: \"No, cancel!\" }),\r\n      reverseButtons: true,\r\n    });\r\n\r\n    if (result.isConfirmed) {\r\n      const deleterow = { existense: 1, _method: \"put\" };\r\n      axios\r\n        .post(Source.getAddress() + \"/api/money/\" + row.id, deleterow, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          Swal.fire({\r\n            position: \"top-end\",\r\n            icon: \"success\",\r\n            title: intl.formatMessage({ id: \"record successfully deleted!\" }),\r\n            showConfirmButton: false,\r\n            timer: 600,\r\n          });\r\n          setRecords(record.filter((a) => a.id !== row.id));\r\n        })\r\n        .catch((err) => {\r\n          Swal.fire({\r\n            position: \"top-end\",\r\n            icon: \"error\",\r\n            title: intl.formatMessage({ id: \"Something went wrong!\" }),\r\n            showConfirmButton: false,\r\n            timer: 600,\r\n          });\r\n        });\r\n    } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n      swalWithBootstrapButtons.fire({\r\n        title: intl.formatMessage({ id: \"Cancelled\" }),\r\n        text: intl.formatMessage({ id: \"Your record is safe :)\" }),\r\n        icon: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // تابع افزودن ارز\r\n  const Addmoney = async (Money) => {\r\n    Money.user_id=localStorage.getItem('userTokenid');\r\n    try {\r\n      const response = await axios.post(\r\n        `${Source.getAddress()}/api/money`,\r\n        Money,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n          },\r\n          params: { delete: 0 },\r\n        }\r\n      );\r\n\r\n      // به‌روزرسانی state ارزها\r\n      setmoney({name:\"\"});  \r\n      setMoney([response.data.money, ...money]);\r\n      setRecords([response.data.money, ...money]);\r\n      showAlert({\r\n        position: \"top-end\",\r\n        icon: \"success\",\r\n        title: intl.formatMessage({ id: \"Your record has been added!\" }),\r\n        showConfirmButton: false,\r\n        timer: 1500,\r\n      });\r\n      // پاکسازی فرم ورودی\r\n      setAdd(false);\r\n    } catch (error) {\r\n      console.error(\"Error details:\", error);\r\n      showAlert({\r\n        position: \"top-end\",\r\n        icon: \"error\",\r\n        title: intl.formatMessage({ id: \"Not working ,please try again!\" }),\r\n        showConfirmButton: false,\r\n        timer: 1500,\r\n      });\r\n    }\r\n  };\r\n\r\n  // تغییر کاربر بر اساس انتخاب\r\n  const ChangeUser = (e) => {\r\n    const value = e.target.value;\r\n    if (value !== \"all users\") {\r\n      const newData = money.filter((row) => {\r\n        if (typeof row.user_name === \"string\") {\r\n          return row.user_name.toLowerCase().includes(value.toLowerCase());\r\n        }\r\n        return false;\r\n      });\r\n      setRecords(newData);\r\n    } else {\r\n      setRecords(money);\r\n    }\r\n    setSelect_user(value);\r\n  };\r\n\r\n  // تابع تغییر مقدار در NumericFormat به همراه اندیس ردیف\r\n  const handleChange = (e, idx) => {\r\n    const formattedValue = e.target.value;\r\n    const unformattedValue = formattedValue.replace(/,/g, \"\").replace(\"$\", \"\");\r\n    \r\n    setExchange(prev => {\r\n      // Make sure prev is an array before trying to spread it\r\n      if (!Array.isArray(prev)) {\r\n        return prev; // or return a default array if appropriate\r\n      }\r\n      \r\n      const newExchange = [...prev];\r\n      if (newExchange[idx]) {\r\n        newExchange[idx] = {\r\n          ...newExchange[idx],\r\n          from_amount: unformattedValue\r\n        };\r\n      }\r\n      return newExchange;\r\n    });\r\n  };\r\n  // تبدیل تاریخ جلالی به میلادی و تنظیم Date_End\r\n  const handle_date_end = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      // ایجاد یک شیء تاریخ بدون ساعت و دقیقه\r\n      const date = new Date(year, month - 1, day+1);\r\n      // استخراج فرمت YYYY-MM-DD از تاریخ\r\n      const isoDate = date.toISOString().slice(0, 10);\r\n      setDate_end(isoDate);\r\n    }\r\n  };\r\n  \r\n\r\n  // ارسال یا به‌روزرسانی نرخ ارز\r\n  const submit = () => {\r\n    const dataToSend = {\r\n      date: Date_End,\r\n      rates: exchange,\r\n      user_id:localStorage.getItem('userTokenid')\r\n    };\r\n    // اگر داده‌های اولیه جدید باشند\r\n    if (isNewExchange) {\r\n      axios\r\n        .post(Source.getAddress() + \"/api/rate\", dataToSend, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          showAlert({\r\n            position: \"top-end\",\r\n            icon: \"success\",\r\n            title: \"Settings updated successfully!\",\r\n            showConfirmButton: false,\r\n            timer: 1500,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          showAlert({\r\n            position: \"top-end\",\r\n            icon: \"error\",\r\n            title: \"Something went wrong!\",\r\n            showConfirmButton: false,\r\n            timer: 1500,\r\n          });\r\n        });\r\n    } else {\r\n      // به‌روزرسانی نرخ، افزودن متد _method برای ارسال PUT\r\n      axios\r\n        .post(Source.getAddress() + \"/api/rate\", dataToSend, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          showAlert({\r\n            position: \"top-end\",\r\n            icon: \"success\",\r\n            title: \"Settings updated successfully!\",\r\n            showConfirmButton: false,\r\n            timer: 1500,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          showAlert({\r\n            position: \"top-end\",\r\n            icon: \"error\",\r\n            title: \"Something went wrong!\",\r\n            showConfirmButton: false,\r\n            timer: 1500,\r\n          });\r\n        });\r\n    }\r\n  };\r\nconsole.log(exchange);  \r\n  return (\r\n    <div\r\n      dir={localStorage.getItem(\"language\") === \"en\" ? \"ltr\" : \"rtl\"}\r\n      className={`continer w-100 h-100 English ${\"iransans\"}`}\r\n      onClick={(e) => {\r\n        if (\r\n          e.target.className === \"continer w-100 h-100\" ||\r\n          e.target.className === \"me-auto ms-auto pt-4 pb-4 h-100 w-50\"\r\n        ) {\r\n          setAdd(false);\r\n          setUpdate(false);\r\n          setError(false);\r\n        }\r\n      }}\r\n    >\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-md-6 pt-4 pb-4\">\r\n          <button\r\n            onClick={() => {\r\n              setAdd(true);\r\n              setUpdate(false);\r\n              inputRef.current.select();\r\n              // عنوان دکمه به صورت ثابت باقی می‌ماند\r\n            }}\r\n            type=\"button\"\r\n            className=\"btn btn-info text-white col m-1 mt-2 ps-2 pe-2 fs-6\"\r\n          >\r\n            <FormattedMessage id=\"Add Currency\" />\r\n          </button>\r\n          <div className=\"d-flex w-100 h-100 m-auto justify-content-between\">\r\n            <div\r\n            class=\"card card-body m-auto mt-3\"\r\n            style={{ borderTop: \"5px solid #4a5cf2\" }}\r\n          >\r\n            <h1 class=\"text-center rounded m-0 mb-2 p-4 text-light fw-bold bg-info\">\r\n              <FormattedMessage id=\"Table of Currency\" />\r\n            </h1>\r\n            <div className=\"d-flex w-100 h-100 m-auto justify-content-between\">\r\n              {/* <select\r\n              id=\"\"\r\n              name=\"gender\"\r\n              onChange={ChangeUser}\r\n              class=\"form-select h-50 m-auto mb-2\"\r\n              style={{ width: \"20%\" }}\r\n              value={select_user}\r\n            >\r\n              <option value={\"all users\"} selected>\r\n                All Users\r\n              </option>\r\n              {user.map((item) => (\r\n                <option value={item.name} selected>\r\n                  {item.name}\r\n                </option>\r\n              ))}\r\n            </select> */}\r\n            </div>\r\n            <div style={{ overflowX: \"auto\", width: \"100%\" }}>\r\n              <table\r\n                style={{\r\n                  minWidth: \"350px\",\r\n                  width: \"100%\",\r\n                  borderCollapse: \"collapse\",\r\n                }}\r\n              >\r\n                <thead>\r\n                  <tr style={{ backgroundColor: \"#f8f9fa\" }}>\r\n                    <th style={{ padding: \"12px 8px\", width: \"1%\" }}>\r\n                      <FormattedMessage id=\"No\" />\r\n                    </th>\r\n                    <th style={{ padding: \"12px 8px\", width: \"3%\" }}>\r\n                      <FormattedMessage id=\"Name\" />\r\n                    </th>\r\n                    <th style={{ padding: \"12px 8px\", width: \"3%\" }}>\r\n                      <FormattedMessage id=\"Added By\" />\r\n                    </th>\r\n                    <th style={{ padding: \"12px 8px\", width: \"3%\" }}>\r\n                      <FormattedMessage id=\"Delete\" />\r\n                    </th>\r\n                    <th style={{ padding: \"12px 8px\", width: \"3%\" }}>\r\n                      <FormattedMessage id=\"Edit\" />\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {record &&\r\n                    record.map((row, idx) => (\r\n                      <tr\r\n                        key={idx}\r\n                        style={{\r\n                          borderBottom: \"1px solid #dee2e6\",\r\n                          \":hover\": { backgroundColor: \"rgba(0,0,0,0.02)\" },\r\n                        }}\r\n                      >\r\n                        <td style={{ padding: \"12px 8px\" }}>{row.id}</td>\r\n                        <td style={{ padding: \"12px 8px\" }}>{row.name}</td>\r\n                        <td style={{ padding: \"12px 8px\", width: \"5%\" }}>\r\n                          {row.user_name}\r\n                        </td>\r\n                        <td style={{ padding: \"12px 8px\", width: \"5%\" }}>\r\n                          {!row.ontransaction && (\r\n                            <button\r\n                              style={{\r\n                                border: \"none\",\r\n                                background: \"transparent\",\r\n                                padding: \"8px\",\r\n                                cursor: \"pointer\",\r\n                                borderRadius: \"4px\",\r\n                                \":hover\": {\r\n                                  backgroundColor: \"rgba(0,0,0,0.05)\",\r\n                                },\r\n                              }}\r\n                              onClick={() => Delete(row)}\r\n                            >\r\n                              <img\r\n                                style={{\r\n                                  height: \"24px\",\r\n                                  width: \"24px\",\r\n                                  \"@media (max-width: 768px)\": {\r\n                                    height: \"32px\",\r\n                                    width: \"32px\",\r\n                                  },\r\n                                }}\r\n                                src={Trash}\r\n                                alt=\"Delete\"\r\n                              />\r\n                            </button>\r\n                          )}\r\n                        </td>\r\n                        <td style={{ padding: \"12px 8px\", width: \"5%\" }}>\r\n                          {!row.ontransaction && (\r\n                            <button\r\n                              style={{\r\n                                border: \"none\",\r\n                                background: \"transparent\",\r\n                                padding: \"8px\",\r\n                                cursor: \"pointer\",\r\n                                borderRadius: \"4px\",\r\n                                \":hover\": {\r\n                                  backgroundColor: \"rgba(0,0,0,0.05)\",\r\n                                },\r\n                              }}\r\n                              onClick={() => {\r\n                                setUpdate(true);\r\n                                setEdit(row);\r\n                              }}\r\n                            >\r\n                              <img\r\n                                style={{\r\n                                  height: \"24px\",\r\n                                  width: \"24px\",\r\n                                  \"@media (max-width: 768px)\": {\r\n                                    height: \"32px\",\r\n                                    width: \"32px\",\r\n                                  },\r\n                                }}\r\n                                src={pencil}\r\n                                alt=\"Delete\"\r\n                              />\r\n                            </button>\r\n                          )}\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            {\r\n              <UpdateMoney\r\n                setRecords={setRecords}\r\n                record={record}\r\n                updateRef={updateRef}\r\n                update={update}\r\n                setAdd={setUpdate}\r\n                money={edit}\r\n                setmoney={setEdit}\r\n              />\r\n            }\r\n            {\r\n              <AddMoney\r\n                inputRef={inputRef}\r\n                add={add}\r\n                setError={setError}\r\n                title={'Add Money'}\r\n                setAdd={setAdd}\r\n                error={error}\r\n                Addmoney={Addmoney}\r\n                setmoney={setmoney}\r\n                money={money1}\r\n              />\r\n            }\r\n          </div>\r\n              {/* نمونه استفاده از فیلتر کاربر */}\r\n              {/* <select\r\n                name=\"user\"\r\n                onChange={ChangeUser}\r\n                className=\"form-select h-50 m-auto mb-2\"\r\n                style={{ width: \"20%\" }}\r\n                value={select_user}\r\n              >\r\n                <option value=\"all users\">All Users</option>\r\n                {user.map((item) => (\r\n                  <option key={item.id} value={item.name}>\r\n                    {item.name}\r\n                  </option>\r\n                ))}\r\n              </select> */}\r\n            </div>\r\n        </div>\r\n        \r\n        <div className=\"col-12 col-md-6 pt-4 pb-4\">\r\n          <Datepicker_Customer\r\n            default_value={EndDate}\r\n            handle_date={handle_date_end}\r\n            lebal={<FormattedMessage id=\"End\" />}\r\n            setSelectedDay={setEndDate}\r\n            selectedDay={EndDate}\r\n          />\r\n          <div\r\n            className=\"card card-body m-auto\"\r\n            style={{ borderTop: \"5px solid #4a5cf2\" }}\r\n          >\r\n            <h1 className=\"text-center rounded m-0 mb-2 p-4 text-light fw-bold bg-info\">\r\n              <FormattedMessage id=\"Daily Rate\" />\r\n            </h1>\r\n            <div style={{ overflowX: \"auto\", width: \"100%\" }}>\r\n              <table\r\n                style={{\r\n                  minWidth: \"300px\",\r\n                  width: \"100%\",\r\n                  borderCollapse: \"collapse\",\r\n                }}\r\n              >\r\n                <thead>\r\n                  <tr style={{ backgroundColor: \"#f8f9fa\" }}>\r\n                    <th style={{ padding: \"12px 8px\", width: \"5%\" }}>\r\n                      <FormattedMessage id=\"No\" />\r\n                    </th>\r\n                    <th style={{ padding: \"12px 8px\", width: \"5%\" }}>\r\n                      <FormattedMessage id=\"Currency\" />\r\n                    </th>\r\n                    <th style={{ padding: \"12px 8px\", width: \"5%\" }}>\r\n                      <FormattedMessage id=\"To\" />{\"  \"} {record[record?.length-1]?.name}\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {record &&\r\n                    record.map((row, idx) => (\r\n                      \r\n                     row.id!==1 && <tr key={row.id} \r\n                      style={{\r\n                        borderBottom: \"1px solid #dee2e6\",\r\n                        \":hover\": { backgroundColor: \"rgba(0,0,0,0.02)\" },\r\n                      }}\r\n                      >\r\n                        <td>{row.id}</td>\r\n                        <td>{row.name}</td>\r\n                        <td>\r\n                          <NumericFormat\r\n                            thousandSeparator={true}\r\n                            id=\"to_amount\"\r\n                            className=\"from-control\"\r\n                            value={\r\n                              exchange && exchange[idx]\r\n                                ? exchange[idx].from_amount\r\n                                : \"\"\r\n                            }\r\n                            style={{ width: \"9rem\",margin:\".2rem\" }}\r\n                            placeholder=\"0\"\r\n                            onChange={(e) => handleChange(e, idx)}\r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                </tbody>\r\n              </table>\r\n              <button\r\n                onClick={submit}\r\n                type=\"button\"\r\n                className=\"btn btn-success text-white col m-1 mt-1 ps-2 pe-2 fs-6\"\r\n              >\r\n                <FormattedMessage id=\"update table from amount\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport Source from \"../../../Source\";\r\nimport axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\nimport Profile from \"../../../assets/icon/profile.png\";\r\nimport IdNational from \"../../../assets/icon/national_id.png\";\r\nimport Datepicker_Customer from \"../../forms/Datepicker_customer\";\r\nimport moment from \"moment-jalaali\";\r\nimport jalaali from \"jalaali-js\";\r\nimport Combo_stock from \"../../forms/Combo_Customer\";\r\nimport Combo_stockps from \"../../psbox/Combo_Customer\";\r\nimport Combo_item from \"../../forms/Combo_Customer\";\r\nimport Additem from \"./AddItem\";\r\nimport Money from \"../../Money\";\r\n// import AddCustomer from '../../assets/icon/AddCustomer.png';\r\nimport Add_customer from \"../../AddAccount\";\r\nimport Combo_Customer from \"../../forms/Combo_Customer\";\r\n// import { useMyContext } from \"../../constext/UseContext\";\r\nimport ComboBox from \"../../forms/ComboBox\";\r\nimport Trash from \"../../../assets/icon/trash.png\";\r\nimport Print from \"../../../assets/icon/print.png\";\r\nimport Add from \"../../../assets/icon/add.png\";\r\n// import Combo_stock from \"../../forms/Combo_stock\";\r\nimport { useSelector, useDispatch, createDispatchHook } from 'react-redux';\r\nimport { getCustomers } from \"../../Redux/customerSlice\";\r\nimport { showAlert } from \"../../../warrper\";\r\nimport AddAddress from \"../../../assets/icon/address.png\";\r\nimport { FormattedMessage ,useIntl} from \"react-intl\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport { getSettings } from \"../../Redux/settingSlice\";\r\nimport { useShowAlert  } from \"../../../warrper\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  IconButton,\r\n  TextField,\r\n  InputAdornment,\r\n  FormControlLabel,\r\n  Switch,\r\n  Button,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  TableContainer,\r\n  Paper,\r\n} from '@mui/material';\r\n\r\nimport { Plus, Trash2, X } from 'lucide-react';\r\nimport { NumericFormat } from 'react-number-format';\r\n\r\nexport default function EditSell({\r\n  AddSellModal,\r\n  close,\r\n  records,\r\n  setRecords,\r\n  moneys,\r\n  // setAddAccountModal,\r\n  Customer,\r\n  setCustomer,\r\n  shopingcart,\r\n  setshopingcart,\r\n  options1, setOptions1,Exesting,setExesting\r\n}) { \r\n  // console.log(options1)\r\n  const showAlert = useShowAlert(); \r\n  const dispatch=useDispatch();\r\n  const { customers, errorc, statusc } = useSelector((state) => state.customers);\r\n  const { settings, errors, statuss } = useSelector((state) => state.settings);\r\n  const { sidebars } = useSelector((state) => state.sidebars);\r\n\r\nuseEffect(() => {\r\n  // بررسی و بارگذاری `belances`\r\n  // if (!statusb && belances) {\r\n  //   dispatch(getBelances());\r\n  // }\r\n\r\n  // // بررسی و بارگذاری `moneys`\r\n  // if (!statusm && moneys) {\r\n  //   dispatch(getMoneys());\r\n  // }\r\n\r\n  // بررسی و بارگذاری `customers`\r\n  // if (!statusc  && !customers) {\r\n  //   dispatch(getCustomers());\r\n  // }\r\n\r\n  if(!statuss && !settings) {\r\n    dispatch(getSettings());\r\n  }\r\n}, [dispatch, statusc]);\r\n\r\n  const { formatMessage } = useIntl();\r\n  const [AddAccountModal,setAddAccountModal]=useState(true);\r\n  const [selectedDay, setSelectedDay] = useState(moment());\r\n  const [selectedDay1, setSelectedDay1] = useState(moment());\r\n  const [selectedOption, setSelectedOption] = useState({name:''});\r\n  const [selectedOption1, setSelectedOption1] = useState();\r\n\r\n  useEffect(()=>{\r\n    if(Customer){\r\n      setSelectedOption({name:Customer.accounts ? Customer.accounts.account.name: Customer.temp_customer});\r\n      setSelectedOptionmoney(Customer.money);\r\n      setSelectedDay(moment(Customer.Inserdate));\r\n      setTotalAmount(Customer.total);\r\n      setPaidAmount(Customer.PaidAmount);\r\n    }\r\n    \r\n  },[Customer])\r\n\r\n  const [EndDate, setEndDate] = useState(moment());\r\n  const [account, setaccount] = useState(false);\r\n  const [update, setupdate] = useState({ id: 0, belance: 0 });\r\n  const [selectedOptionAccount, setSelectedOptionAccount] = useState([]);\r\n  const [AddItem, setAddItem] = useState({\r\n    item_id: \"\",\r\n    qty: 0,\r\n    weight: 0,\r\n    dateInsert: new Date().toISOString(),\r\n    rate: 0,\r\n    user_id: localStorage.getItem(\"userTokenid\"),\r\n    purchase_price: 0,\r\n    description: \"Description\",\r\n    sell_price: 0,\r\n    expiry_date: new Date().toISOString(),\r\n    accounts_id: \"\",\r\n    money: \"\",\r\n    stock: { name: \"\" },\r\n    e_id: 1,\r\n  });\r\n//   const [shopingcart, setshopingcart] = useState([]);\r\n  const [TotalAmount, setTotalAmount] = useState(0);\r\n    const [edit,setEdit]=useState(false);\r\n  const Onsearch = (e) => {\r\n    if (e) {\r\n      setupdate({\r\n        ...update,\r\n        id: e.id,\r\n      });\r\n      setAddItem({\r\n        ...AddItem,\r\n        money: e.type_id,\r\n      });\r\n    }\r\n  };\r\n  const algorithm = (e) => {\r\n    setSelectedOption(e);\r\n    if (e) {\r\n      setAddItem({\r\n        ...AddItem,\r\n        accounts_id: e.id,\r\n      });\r\n    }\r\n  };\r\n    const generateInvoicePDF = (id) => {\r\n      // Function to format date (with Persian date support)\r\n      const dateObj = new Date(selectedDay);\r\n      let formattedDate = `${dateObj.getFullYear()}-${String(\r\n          dateObj.getMonth() + 1\r\n      ).padStart(2, \"0\")}-${String(dateObj.getDate()).padStart(2, \"0\")}`;\r\n      const hours = dateObj.getHours();\r\n      const minutes = dateObj.getMinutes();\r\n      const ampm = hours >= 12 ? \"pm\" : \"am\";\r\n      const formattedHours = hours % 12 || 12;\r\n      const formattedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n      let aa = ampm;\r\n  \r\n      if (settings[0].date === \"Persian\") {\r\n          moment.locale(\"fa\");\r\n          formattedDate = moment(selectedDay).format(\"jYYYY/jMM/jDD\");\r\n      } else {\r\n          moment.locale(\"en\");\r\n      }\r\n      formattedDate = `${formattedDate} ${formattedHours}:${formattedMinutes} ${aa}`;\r\n  \r\n      // Get the company image URL\r\n      const imageUrl = settings[0]?.company_pic;\r\n      let imageSrc = \"\";\r\n      if (imageUrl) {\r\n          const fileName = imageUrl.split(\"/\").pop();\r\n          imageSrc = Source.getAddress() + \"/api/getImage/\" + fileName;\r\n      }\r\n  \r\n      // Generate the HTML content\r\n      const invoiceHTML = `\r\n      <html>\r\n          <head>\r\n              <title>Invoice</title>\r\n              <style>\r\n                  body {\r\n                      font-family: Helvetica, sans-serif;\r\n                      font-size: 12px;\r\n                  }\r\n  \r\n                  .invoice-container {\r\n                      width: 210mm;\r\n                      height: auto;\r\n                      padding: 10mm;\r\n                      box-sizing: border-box;\r\n                      background: #fff;\r\n                  }\r\n  \r\n                  .header {\r\n                      text-align: center;\r\n                      margin-bottom: 20px;\r\n                  }\r\n  \r\n                  .invoice-details {\r\n                      margin-bottom: 15px;\r\n                  }\r\n  \r\n                  table {\r\n                      width: 100%;\r\n                      border-collapse: collapse;\r\n                      border: 1px solid #000;\r\n                  }\r\n  \r\n                  th,\r\n                  td {\r\n                      border: 1px solid #000;\r\n                      padding: 5px;\r\n                      text-align: left;\r\n                  }\r\n  \r\n                  th {\r\n                      background-color: rgb(11, 105, 255);\r\n                      color: #fff;\r\n                      font-size: 12px;\r\n                  }\r\n  \r\n                  td {\r\n                      font-size: 12px;\r\n                      color: #000;\r\n                  }\r\n  \r\n                  .amount-details {\r\n                      text-align: right;\r\n                      margin-bottom: 20px;\r\n                  }\r\n  \r\n                  .footer {\r\n                      text-align: center;\r\n                  }\r\n  \r\n                  .logo {\r\n                      position: absolute;\r\n                      top: 10px;\r\n                      right: 10px;\r\n                      width: 30mm;\r\n                  }\r\n  \r\n                  .even-row {\r\n                      background-color: #f5f5f5;\r\n                  }\r\n  \r\n                  .odd-row {\r\n                      background-color: #fff;\r\n                  }\r\n              </style>\r\n          </head>\r\n  \r\n          <body>\r\n              <div class=\"invoice-container\">\r\n                  <div class=\"header\">\r\n                      <h1 style=\"font-size: 26px; font-weight: bold; color: rgb(11,105,255); margin: 0;\">Invoice</h1>\r\n                      <h2 style=\"font-size: 14px; margin: 5px 0; color: #000;\">${settings[0].company_name}</h2>\r\n                      </div>\r\n                      \r\n                      <div class=\"invoice-details\">\r\n                      <p style=\"font-size: 12px; margin: 0;\">Customer Name: ${selectedOption ? capitalizeWords(selectedOption.name) : \"N/A\"}</p>\r\n                      <p style=\"font-size: 14px; color: rgb(11,105,255); margin: 0;\">Invoice Number: ${id}</p>\r\n                      <p style=\"font-size: 12px; margin: 0;\">Date: ${formattedDate}</p>\r\n                  </div>\r\n  \r\n                  <hr style=\"border: 0; border-top: 1px solid #000; margin-bottom: 15px;\">\r\n  \r\n                  <div style=\"margin-bottom: 20px;\">\r\n                      <table style=\"width: 100%; border-collapse: collapse;\" border=\"1\" cellspacing=\"0\" cellpadding=\"5\">\r\n                          <thead style=\"background-color: rgb(11,105,255); font-size: 12px;\">\r\n                              <tr>\r\n                                  <th>No</th>\r\n                                  <th>Name</th>\r\n                                  <th>Quantity</th>\r\n                                  <th>Price</th>\r\n                                  <th>Total</th>\r\n                              </tr>\r\n                          </thead>\r\n                          <tbody style=\"font-size: 12px; color: #000;\">\r\n                              ${shopingcart\r\n                                  .map(\r\n                                      (row, index) => `\r\n                                      <tr class=\"${index % 2 === 0 ? 'odd-row' : 'even-row'}\">\r\n                                          <td>${index}</td>\r\n                                          <td>${row.stock.name}</td>\r\n                                          <td>${row.qty}</td>\r\n                                          <td>${row.sell_price} ${selectedOptionmoney ? selectedOptionmoney.name : \"N/A\"}</td>\r\n                                          <td>${row.sell_price * row.qty} ${selectedOptionmoney ? selectedOptionmoney.name : \"N/A\"}</td>\r\n                                      </tr>\r\n                                  `\r\n                                  )\r\n                                  .join(\"\")}\r\n                          </tbody>\r\n                      </table>\r\n                  </div>\r\n  \r\n                  <div class=\"amount-details\">\r\n                      <p style=\"margin: 0;\">Total Amount: ${TotalAmount} ${selectedOptionmoney ? selectedOptionmoney.name : \"N/A\"}</p>\r\n                      <p style=\"margin: 0;\">Paid Amount: ${PaidAmount ? PaidAmount : \"0.00\"} ${selectedOptionmoney ? selectedOptionmoney.name : \"N/A\"}</p>\r\n                      <p style=\"margin: 0;\">Balance: ${update.belance} ${selectedOptionmoney ? selectedOptionmoney.name : \"N/A\"}</p>\r\n                  </div>\r\n  \r\n                  <hr style=\"border: 0; border-top: 1px solid #000; margin-bottom: 15px;\">\r\n  \r\n                  <div class=\"footer\">\r\n                      <p style=\"margin: 0;\">Address: ${settings[0].address}</p>\r\n                      <p style=\"margin: 0;\">Phone: ${settings[0].phone}</p>\r\n                      <p style=\"margin: 0;\">Email: ${settings[0].email}</p>\r\n                  </div>\r\n                   ${imageSrc ? `<img class=\"logo\"  src=\"${imageSrc}\" alt=\"Company Logo\"/>` : ''}\r\n              </div>\r\n          </body>\r\n      </html>\r\n  `;\r\n  \r\n  \r\n  \r\n      // Open a new tab/window\r\n      const printWindow = window.open('', '_blank');\r\n      if (printWindow) {\r\n          printWindow.document.open();\r\n          printWindow.document.write(invoiceHTML);\r\n          printWindow.document.close();\r\n  \r\n          // Wait for content to load in the new window\r\n          printWindow.onload = () => {\r\n              printWindow.focus(); // Focus on the new window\r\n              printWindow.print(); // Open the print dialog\r\n              printWindow.close(); // Close the new window\r\n          };\r\n      } else {\r\n          alert('Please allow pop-ups for this website to print the invoice.');\r\n      }\r\n  };\r\n  const algorithm1 = (e) => {\r\n    setSelectedOption1(e);\r\n    if (e) {\r\n      setAddItem({\r\n        ...AddItem,\r\n        item_id: e.id,\r\n        stock: e,\r\n      });\r\n    }\r\n  };\r\n  const handle_date = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n\r\n      // const date = new Date(jalaliDate.year, jalaliDate.month - 1, jalaliDate.day);\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      // setIsoDate(isoString);\r\n      setAddItem({\r\n        ...AddItem,\r\n        dateInsert: isoString,\r\n      });\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n  const handle_date1 = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n\r\n      // const date = new Date(jalaliDate.year, jalaliDate.month - 1, jalaliDate.day);\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      // setIsoDate(isoString);\r\n      setAddItem({\r\n        ...AddItem,\r\n        expiry_date: isoString,\r\n      });\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n  // console.log(shopingcart.length);\r\n  const Sumbit=()=>{\r\n    if (\r\n      selectedOption &&\r\n      AddItem.money &&\r\n      shopingcart.length<=0\r\n    ) {\r\n      showAlert({\r\n        position: \"top-end\",\r\n        icon: \"error\",\r\n        // title: \"You must fill the item input!\",\r\n                            title: <FormattedMessage id=\"You must fill the item input!\" />,\r\n        showConfirmButton: false,\r\n        timer: 1000,\r\n      });\r\n      return;}\r\n    // }\r\n    // if (update.belance < 0) {\r\n    //   showAlert({\r\n    //     position: \"top-end\",\r\n    //     icon: \"error\",\r\n    //     title: \"You don't have enough money!\",\r\n    //     showConfirmButton: false,\r\n    //     timer: 1000,\r\n    //   });\r\n    //   return;\r\n    // }\r\n    let arr=[];\r\n    shopingcart.forEach((key) => {\r\n      arr.push({\r\n        item_id: key.item_id,\r\n        qty: key.qty,\r\n        weight: key.weight,\r\n        dateInsert: key.dateInsert,\r\n        rate: key.rate,\r\n        user_id: key.user_id,\r\n        sell_price: key.sell_price,\r\n        description: key.description,\r\n        expiry_date: key.expiry_date,\r\n        bill_id:key.bill_id||null,\r\n        accounts_id: key.accounts_id,\r\n      })\r\n    });\r\n    let add={arr:arr,\r\n      _method:\"put\"\r\n    }\r\n    // console.log(selectedOptionmoney.id||0);\r\n    \r\n    axios\r\n      .post(Source.getAddress() + \"/api/sell/\"+Customer.id,add, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n        },\r\n        params: {\r\n          $type:'edit',\r\n          Bill_id:Customer.id,\r\n          prevMoney:Customer.money_id,\r\n          primaryTotalAmount: Customer.total,\r\n          primaryPaidAmount: Customer.PaidAmount,\r\n          Accounts_id:Customer.accounts_id||'0',\r\n          Exesting: Exesting ? \"ok\" : \"no\",\r\n          money:selectedOptionmoney.id||0,\r\n          accounts_id:selectedOption.id ,\r\n          PaidAmount:PaidAmount ? PaidAmount : 0,\r\n          TotalAmount:TotalAmount,\r\n          CustomerName:selectedOption.name,\r\n          DateInsert:shopingcart[0].dateInsert\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        let BillId=0;\r\n        res.data.bill[\"money\"] = selectedOptionmoney;\r\n        res.data.bill[\"accounts\"] = { account: selectedOption };\r\n        let add = {\r\n          sells: shopingcart,\r\n          bill: res.data.bill,\r\n          accounts: res.data.belance,\r\n        };\r\n        setRecords(prevRecords =>\r\n          prevRecords.map(record =>\r\n            record.bill.id === res.data.bill.id ? add : record\r\n          ));\r\n        showAlert({\r\n          position: \"top-end\",\r\n          icon: \"success\",\r\n                              title: <FormattedMessage id=\"Your record has been updated!\" />,\r\n          showConfirmButton: false,\r\n          timer: 1000,\r\n        });})\r\n        .catch((err)=>{\r\n          console.log(err);\r\n          showAlert({\r\n                    position: \"top-end\",\r\n                    icon: \"error\",\r\n                    // title: \"Something went wrong!\",\r\n                    title: <FormattedMessage id=\"Not working ,please try again!\" />,\r\n                    showConfirmButton: false,\r\n                    timer: 1000,\r\n                  });\r\n        })\r\n  }\r\n  const AddtoTable = () => {\r\n      // بررسی اینکه تمام فیلدهای ضروری پر شده‌اند\r\n      if (!AddItem.qty) {\r\n        showAlert({\r\n          position: \"top-end\",\r\n          icon: \"error\",\r\n          // title: \"Select an item!\",\r\n                  title:  <FormattedMessage id=\"Select an item!\" />,\r\n          showConfirmButton: false,\r\n          timer: 1000,\r\n        });\r\n        return;\r\n      }\r\n      const qty = AddItem.qty ? parseInt(AddItem.qty) : 0;\r\n      console.log(parseInt(selectedOption1.qty) - qty);\r\n      const sellPrice = AddItem.sell_price ? parseFloat(AddItem.sell_price) : 0;\r\n      const weight= AddItem.weight;\r\n      if (parseInt(selectedOption1.qty) - qty < 0) {\r\n        showAlert({\r\n          position: \"top-end\",\r\n          icon: \"error\",\r\n          // title: \"have not enuagh item!\",\r\n                  title:  <FormattedMessage id=\"have not enuagh item!\" />,\r\n          showConfirmButton: false,\r\n          timer: 1000,\r\n        });\r\n        return;\r\n      }\r\n      if (!qty || !sellPrice || !selectedOption1||!weight) {\r\n        showAlert({\r\n          position: \"top-end\",\r\n          icon: \"error\",\r\n          // title: \"Please select an item and fill the quantity and price!\",\r\n                                    title:  <FormattedMessage id=\"Please select an item and fill the quantity and price!\" />,\r\n          showConfirmButton: false,\r\n          timer: 1000,\r\n        });\r\n        return;\r\n      }\r\n  \r\n      // اطمینان از مقدار مثبت برای موجودی\r\n      if (qty <= 0 || sellPrice <= 0) {\r\n        showAlert({\r\n          position: \"top-end\",\r\n          icon: \"error\",\r\n          // title: \"Quantity and price must be positive values!\",\r\n          title:  <FormattedMessage id=\"Quantity and price must be positive values!\" />,\r\n          showConfirmButton: false,\r\n          timer: 1000,\r\n        });\r\n        return;\r\n      }\r\n  \r\n      // ایجاد نسخه کپی از AddItem و selectedOption1\r\n      const addto = { ...AddItem, item: { ...selectedOption1 } };\r\n      addto.item.qty = selectedOption1.qty\r\n        ? qty - parseInt(selectedOption1.qty)\r\n        : qty;\r\n        let nextId=shopingcart.length > 0 ? shopingcart[shopingcart.length-1].id +1 :1 ;\r\n        addto.id=nextId;\r\n      // افزودن آیتم به سبد خرید\r\n      setshopingcart((prev) => [...prev, addto]);\r\n  \r\n      // به‌روزرسانی مقادیر کل\r\n      setPaidAmount((prev) => prev + qty * sellPrice *weight);\r\n      setTotalAmount((prev) => prev + qty * sellPrice*weight);\r\n  \r\n      // بازنشانی مقدار AddItem\r\n      setAddItem({\r\n        stocks_id: \"\",\r\n        qty: \"\",\r\n        weight: null,\r\n        dateInsert: new Date().toISOString(),\r\n        rate: null,\r\n        user_id: localStorage.getItem(\"userTokenid\"),\r\n        purchase_price: \"\",\r\n        description: \"\",\r\n        sell_price: null,\r\n        expiry_date: new Date().toISOString(),\r\n        accounts_id: \"\",\r\n        money: \"\",\r\n        stock: { name: \"\" },\r\n        e_id: AddItem.e_id + 1,\r\n      });\r\n  \r\n      // بازنشانی selectedOption1\r\n      setSelectedOption1(null);\r\n    };\r\n  const handleItem = (e) => {\r\n    setAddItem({\r\n      ...AddItem,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const [options, setOptions] = useState(customers);\r\n  // const [options1, setOptions1] = useState([]);\r\n  const handleSearch = async (query) => {\r\n    if(!Exesting){\r\n      if(query){\r\n        setAddItem({\r\n          ...AddItem,\r\n          temp_customer:query\r\n        })\r\n        setSelectedOption({id:1,name:query});\r\n      }}\r\n    // }\r\n  };\r\n  const capitalizeWords = (text) => {\r\n    return text\r\n      .toLowerCase() // همه حروف را کوچک کنید\r\n      .split(\" \") // متن را به آرایه‌ای از کلمات تقسیم کنید\r\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1)) // حروف اول هر کلمه را بزرگ کنید\r\n      .join(\" \"); // کلمات را به هم وصل کنید\r\n  };\r\n  const handleSearch1 = async (query) => {\r\n    // if (query.length < 3) {\r\n    //   // برای جلوگیری از ارسال درخواست بیش از حد، درخواست فقط اگر ورودی بیشتر از 2 حرف باشد ارسال شود\r\n    //   setOptions1([]);\r\n    //   return;\r\n    // }\r\n    // try {\r\n    //   const response = await axios.get(`${Source.getAddress()}/api/item`, {\r\n    //     headers: {\r\n    //       Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n    //     },\r\n    //     params: {\r\n    //       query: query,\r\n    //     }, // ارسال پارامتر جستجو به سرور\r\n    //   });\r\n    //   const data = response.data;\r\n    //   // console.log(data);\r\n    //   // تبدیل داده‌ها به فرمت مناسب برای react-select\r\n    //   const formattedOptions = data;\r\n    //   //    data.map((customer) => ({\r\n    //   //     id: customer.id,\r\n    //   //     name: customer.name,\r\n    //   //     customer\r\n    //   //   }));\r\n    //   setOptions1(formattedOptions);\r\n    // } catch (error) {\r\n    //   console.error(\"Error fetching data:\", error);\r\n    // } finally {\r\n    // }\r\n  };\r\n  const handleInputChange = (newValue) => {\r\n    setSearchQuery(newValue); // بروزرسانی مقدار ورودی جستجو\r\n    handleSearch(newValue); // ارسال درخواست جستجو به سرور\r\n  };\r\n  const handleInputChange1 = (newValue) => {\r\n    setSearchQuery1(newValue); // بروزرسانی مقدار ورودی جستجو\r\n    handleSearch1(newValue); // ارسال درخواست جستجو به سرور\r\n  };\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [searchQuery1, setSearchQuery1] = useState(\"\");\r\n\r\n  const [selectedOptionmoney, setSelectedOptionmoney] = useState({ name: \"\" });\r\n  const algorithmmoney = (e) => {\r\n    if (e) {\r\n      setAddItem({\r\n        ...AddItem,\r\n        money: e.id,\r\n      });\r\n    }\r\n  };\r\n\r\n  const Deleteshopingcart = (e) => {\r\n    setPaidAmount((prev) => prev - e.qty * e.sell_price*e.weight);\r\n    setTotalAmount((prev) => prev - e.qty * e.sell_price*e.weight);\r\n    setshopingcart((prev) => prev.filter((pre) => pre.id !== e.id));\r\n  };\r\n  const buttonRef = useRef(null);\r\nconst handleKeyDown = (e) => {\r\n  if (e.key === \"Enter\") {\r\n    e.preventDefault();\r\n    if (buttonRef.current && AddSellModal) {\r\n      buttonRef.current.click();\r\n    }\r\n  }\r\n}\r\nconst  [PaidAmount,setPaidAmount]=useState();\r\nconst handlepaid=(e)=>{\r\n  setPaidAmount(e.target.value);\r\n};\r\nuseEffect(() => {\r\n  // if (PaidAmount) {\r\n    // const total = Number(TotalAmount) || 0;\r\n    // const paid = Number(PaidAmount) || 0;\r\n    if(!PaidAmount){\r\n      setupdate((prevState) => ({\r\n        ...prevState,\r\n        belance: -TotalAmount,\r\n      }));  \r\n    }\r\n    else{\r\n      setupdate((prevState) => ({\r\n        ...prevState,\r\n        belance: PaidAmount - TotalAmount ||0 ,\r\n      }));\r\n    }\r\n    \r\n  // }\r\n}, [PaidAmount, TotalAmount,shopingcart]);\r\nuseEffect(() => {\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(`${Source.getAddress()}/api/customers`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n        },\r\n        params: { query:searchQuery ,do:'ok'}, // ارسال پارامتر جستجو به سرور\r\n      });\r\n      // setSelectedOption(response.data);\r\n      const data = response.data;\r\n      setOptions(data);\r\n      // console.log('hhi');\r\n\r\n      // if (data && data.length === 0) {\r\n      //   setSelectedOptionTo({ id: 0, name: searchQueryTo });\r\n      // } else {\r\n      //   setOptionsTo(data); // ذخیره داده‌ها برای نمایش در لیست\r\n      // }\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  if(searchQuery){\r\n    if (!searchQuery || searchQuery?.length < 3) {\r\n      setOptions([]);\r\n      return;\r\n    }else{\r\n  if (Exesting) {\r\n      fetchData();}\r\n    }\r\n  }\r\n}, [searchQuery]); // اضافه کردن searchQuery به وابستگی‌های useEffect\r\n\r\n  return (\r\n   <Box\r\n      dir={localStorage.getItem(\"language\") === \"en\" ? \"ltr\" : \"rtl\"}\r\n      sx={{\r\n        width: \"100%\",\r\n        maxWidth: 1200, // حداکثر عرض استاندارد برای فرم\r\n        overflowX: \"auto\",\r\n        overflowY: \"auto\",\r\n        height: \"75vh\",\r\n        bgcolor: \"#f8f9fa\",\r\n        p: 2,\r\n        borderRadius: 2,\r\n        mx: \"auto\", // مرکز کردن فرم\r\n      }}\r\n      className={`popup transition ${account && \"sellpurchase\"} ${  AddSellModal ? \"show\" : \"\"}`}\r\n    >\r\n      {/* Header */}\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mt={2} mb={2}>\r\n        <Typography\r\n          variant=\"h6\"\r\n          align=\"center\"\r\n          sx={{ bgcolor: \"info.main\", color: \"#fff\", p: 1, borderRadius: 1, flexGrow: 1, fontSize: \"1.1rem\" }}\r\n        >\r\n          <FormattedMessage id=\"Edit Sell\" />\r\n        </Typography>\r\n        <IconButton onClick={close} aria-label=\"Close\" sx={{ ml: 2 }}>\r\n          <X size={24} />\r\n        </IconButton>\r\n      </Box>\r\n\r\n      {/* Customer Info Section */}\r\n      <Box boxShadow={2} p={2} borderRadius={2} mb={3}>\r\n        <Typography variant=\"subtitle1\" fontWeight=\"bold\" mb={2}>\r\n          <FormattedMessage id=\"Customer Info\" />\r\n        </Typography>\r\n        <Box\r\n          display=\"flex\"\r\n          flexDirection={{ xs: \"column\", md: \"row\" }}\r\n          gap={3}\r\n          alignItems=\"center\"\r\n          flexWrap=\"wrap\"\r\n        >\r\n          {/* Exesting Switch */}\r\n          <FormControlLabel\r\n            control={<Switch checked={Exesting} onChange={(e) => setExesting(e.target.checked)} />}\r\n            label={<FormattedMessage id=\"Exesting\" />}\r\n            sx={{ minWidth: 120 }}\r\n          />\r\n\r\n          {/* Customer Name Dropdown */}\r\n          <Box sx={{ flexGrow: 1, minWidth: 200 }}>\r\n            <Typography component=\"label\" fontWeight=\"bold\" fontSize=\"0.9rem\" mb={1} display=\"block\">\r\n              <FormattedMessage id=\"Customer Name\" />\r\n            </Typography>\r\n            <Combo_stock\r\n              name={<FormattedMessage id=\"Add Customer\" />}\r\n              setAddAccountModal={AddAccountModal}\r\n              type={Exesting}\r\n              searchQuery={searchQuery}\r\n              handleInputChange={handleInputChange}\r\n              setSelectedOption={setSelectedOption}\r\n              selectedOption={selectedOption}\r\n              options={options}\r\n              Onsearch={algorithm}\r\n              compactMode={true}\r\n            />\r\n          </Box>\r\n\r\n          {/* Currency Dropdown */}\r\n          <Box sx={{ flexGrow: 1, minWidth: 180 }}>\r\n            <Typography component=\"label\" fontWeight=\"bold\" fontSize=\"0.9rem\" mb={1} display=\"block\">\r\n              <FormattedMessage id=\"Currency\" />\r\n            </Typography>\r\n            <Combo_Customer\r\n              isEditable={account}\r\n              setSelectedOption={setSelectedOptionmoney}\r\n              selectedOption={selectedOptionmoney}\r\n              options={moneys}\r\n              Onsearch={algorithmmoney}\r\n              compactMode={true}\r\n            />\r\n          </Box>\r\n          {/* Datepicker */}\r\n          <Box sx={{ minWidth: 180 }}>\r\n            <Datepicker_Customer\r\n              default_value={EndDate}\r\n              handle_date={handle_date}\r\n              lebal={<FormattedMessage id=\"Date\" />}\r\n              setSelectedDay={setSelectedDay}\r\n              selectedDay={selectedDay}\r\n              compactMode={true}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n      {/* Item Info Section */}\r\n<Box\r\n  display=\"flex\"\r\n  flexDirection={{ xs: \"column\", md: \"row\" }}\r\n  gap={2}\r\n  alignItems=\"flex-end\"\r\n  flexWrap=\"wrap\"\r\n  sx={{\r\n    p: 2,\r\n    backgroundColor: 'background.paper',\r\n    borderRadius: 2,\r\n    boxShadow: 1\r\n  }}\r\n>\r\n  {/* Item Name */}\r\n  <Box sx={{ minWidth: 240, flexGrow: 1 }}>\r\n    <Typography variant=\"subtitle2\" fontWeight=\"bold\" gutterBottom>\r\n      <FormattedMessage id=\"Item Name\" />\r\n    </Typography>\r\n    <Combo_stockps\r\n      searchQuery={searchQuery1}\r\n      setSearchQuery={setSearchQuery1}\r\n      handleInputChange={handleInputChange1}\r\n      handleSearch={handleSearch1}\r\n      setSelectedOption={algorithm1}\r\n      selectedOption={selectedOption1}\r\n      options={options1}\r\n      compactMode={true}\r\n      sx={{\r\n        '& .MuiOutlinedInput-root': {\r\n          height: 40\r\n        }\r\n      }}\r\n    />\r\n  </Box>\r\n\r\n  {/* Quantity */}\r\n  <Box sx={{ width: 120 }}>\r\n    <NumericFormat\r\n      onKeyDown={handleKeyDown}\r\n      onValueChange={(values) => {\r\n        handleItem({ target: { name: \"qty\", value: values.value } });\r\n      }}\r\n      value={AddItem.qty}\r\n      customInput={TextField}\r\n      label={<FormattedMessage id=\"Quantity\" />}\r\n      size=\"small\"\r\n      fullWidth\r\n      thousandSeparator\r\n      allowNegative={false}\r\n      decimalScale={0}\r\n      InputProps={{\r\n        sx: { height: 40 }\r\n      }}\r\n    />\r\n  </Box>\r\n\r\n  {/* Weight (Gold only) */}\r\n  {sidebars[0].type === \"gold\" && (\r\n    <Box sx={{ width: 160 }}>\r\n      <NumericFormat\r\n        value={AddItem.weight}\r\n        thousandSeparator=\",\"\r\n        decimalSeparator=\".\"\r\n        decimalScale={3}\r\n        name=\"weight\"\r\n        onValueChange={(values) => {\r\n          handleItem({ target: { name: \"weight\", value: values.value } });\r\n        }}\r\n        customInput={TextField}\r\n        label={<FormattedMessage id=\"Weight\" />}\r\n        size=\"small\"\r\n        fullWidth\r\n        allowNegative={false}\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\" sx={{ color: \"text.secondary\" }}>\r\n              Gram\r\n            </InputAdornment>\r\n          ),\r\n          sx: { height: 40 }\r\n        }}\r\n      />\r\n    </Box>\r\n  )}\r\n\r\n  {/* Purchase Price */}\r\n  <Box sx={{ width: 140 }}>\r\n    <NumericFormat\r\n      onKeyDown={handleKeyDown}\r\n      onValueChange={(values) => {\r\n        handleItem({ target: { name: \"sell_price\", value: values.value } });\r\n      }}\r\n      value={AddItem.sell_price}\r\n      customInput={TextField}\r\n      label={<FormattedMessage id=\"Sell Price\" />}\r\n      size=\"small\"\r\n      fullWidth\r\n      thousandSeparator\r\n      decimalScale={2}\r\n      allowNegative={false}\r\n      InputProps={{\r\n        startAdornment: (\r\n          <InputAdornment position=\"start\" sx={{ color: \"text.secondary\" }}>\r\n            $\r\n          </InputAdornment>\r\n        ),\r\n        sx: { height: 40 }\r\n      }}\r\n    />\r\n  </Box>\r\n\r\n  {/* Total Amount */}\r\n  <Box sx={{ width: 160 }}>\r\n    <NumericFormat\r\n      value={AddItem.qty * AddItem.sell_price * (AddItem.weight || 1)}\r\n      customInput={TextField}\r\n      label={<FormattedMessage id=\"Total Amount\" />}\r\n      size=\"small\"\r\n      fullWidth\r\n      thousandSeparator\r\n      decimalScale={2}\r\n      InputProps={{ \r\n        readOnly: true,\r\n        startAdornment: (\r\n          <InputAdornment position=\"start\" sx={{ color: \"text.secondary\" }}>\r\n            $\r\n          </InputAdornment>\r\n        ),\r\n        sx: { \r\n          height: 40,\r\n          backgroundColor: 'action.selected' \r\n        }\r\n      }}\r\n    />\r\n  </Box>\r\n\r\n  {/* Existing Quantity */}\r\n  <Box sx={{ width: 140 }}>\r\n    <NumericFormat\r\n      value={selectedOption1 ? (selectedOption1.qty ? parseInt(AddItem.qty || 0) + parseInt(selectedOption1.qty) : \"\") : \"\"}\r\n      customInput={TextField}\r\n      label={<FormattedMessage id=\"Exest QTY\" />}\r\n      size=\"small\"\r\n      fullWidth\r\n      thousandSeparator\r\n      decimalScale={0}\r\n      InputProps={{ \r\n        readOnly: true,\r\n        sx: { \r\n          height: 40,\r\n          backgroundColor: 'action.selected' \r\n        }\r\n      }}\r\n    />\r\n  </Box>\r\n\r\n  {/* Description */}\r\n  <Box sx={{ flexGrow: 1, minWidth: 240 }}>\r\n    <TextField\r\n      name=\"description\"\r\n      multiline\r\n      minRows={2}\r\n      value={AddItem.description}\r\n      onChange={handleItem}\r\n      label={<FormattedMessage id=\"Description\" />}\r\n      size=\"small\"\r\n      fullWidth\r\n      InputProps={{\r\n        sx: { \r\n          alignItems: 'flex-start',\r\n          height: 'auto'\r\n        }\r\n      }}\r\n    />\r\n  </Box>\r\n\r\n  {/* Add Button */}\r\n  <Button\r\n    onClick={() => AddtoTable()}\r\n    variant=\"contained\"\r\n    color=\"primary\"\r\n    size=\"medium\"\r\n    startIcon={<Plus size={18} />}\r\n    sx={{ \r\n      height: 40,\r\n      minWidth: 120,\r\n      fontWeight: 'bold',\r\n      textTransform: 'none',\r\n      boxShadow: 'none',\r\n      '&:hover': {\r\n        boxShadow: 'none'\r\n      }\r\n    }}\r\n  >\r\n    <FormattedMessage id=\"Add\" />\r\n  </Button>\r\n</Box>\r\n\r\n      {/* Bottom Section */}\r\n      <Box display=\"flex\" flexDirection={{ xs: \"column\", md: \"row\" }} gap={3}>\r\n        <Box flex={2} pr={{ md: 2 }}>\r\n          <Typography\r\n            variant=\"subtitle1\"\r\n            sx={{ bgcolor: \"info.main\", color: \"#fff\", p: 1, borderRadius: 1, fontSize: \"1rem\", mb: 1 }}\r\n            align=\"center\"\r\n          >\r\n            <FormattedMessage id=\"Purchase stocks\" />\r\n          </Typography>\r\n          <TableContainer component={Paper} sx={{ maxHeight: 320 }}>\r\n            <Table size=\"small\" stickyHeader>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell sx={{ width: \"5%\" }}><FormattedMessage id=\"ID\" /></TableCell>\r\n                  <TableCell sx={{ width: \"20%\" }}><FormattedMessage id=\"Name\" /></TableCell>\r\n                  <TableCell sx={{ width: \"10%\" }}><FormattedMessage id=\"Quantity\" /></TableCell>\r\n                                   {sidebars[0].type==='gold' && <TableCell sx={{ width: \"10%\" }}><FormattedMessage id=\"weight\" /></TableCell>}\r\n                  \r\n                  <TableCell sx={{ width: \"10%\" }}><FormattedMessage id=\"Price\" /></TableCell>\r\n                  <TableCell sx={{ width: \"10%\" }}><FormattedMessage id=\"Total\" /></TableCell>\r\n                  <TableCell sx={{ width: \"30%\" }}><FormattedMessage id=\"Description\" /></TableCell>\r\n                  <TableCell sx={{ width: \"5%\" }}><FormattedMessage id=\"Delete\" /></TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {shopingcart && shopingcart.map((row, idx) => (\r\n                  <TableRow key={idx}>\r\n                    <TableCell>{row.e_id}</TableCell>\r\n                    <TableCell>{row.stock.name}</TableCell>\r\n                    <TableCell>{row.qty}</TableCell>\r\n                                        {sidebars[0].type==='gold'&&< TableCell>{row.weight}</TableCell>}\r\n                    <TableCell>{row.purchase_price}</TableCell>\r\n                    <TableCell>{row.purchase_price * row.qty}</TableCell>\r\n                    <TableCell>{row.description}</TableCell>\r\n                    <TableCell>\r\n                      <IconButton onClick={() => Deleteshopingcart(row)}>\r\n                        <Trash2 size={18} />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Box>\r\n\r\n        <Box flex={1} pl={{ md: 2 }}>\r\n          <TextField\r\n            value={TotalAmount}\r\n            label={<FormattedMessage id=\"Total Amount\" />}\r\n            InputProps={{ readOnly: true }}\r\n            size=\"small\"\r\n            fullWidth\r\n            sx={{ mb: 1 }}\r\n          />\r\n          <TextField\r\n            value={PaidAmount}\r\n            onChange={handlepaid}\r\n            InputProps={{ readOnly: !Exesting }}\r\n            label={<FormattedMessage id=\"Paid Amount\" />}\r\n            size=\"small\"\r\n            fullWidth\r\n            sx={{ mb: 1 }}\r\n          />\r\n          <TextField\r\n            value={update.belance}\r\n            InputProps={{ readOnly: true }}\r\n            label={<FormattedMessage id=\"Remain Balance\" />}\r\n            size=\"small\"\r\n            fullWidth\r\n            sx={{ mb: 2 }}\r\n          />\r\n\r\n          <Box display=\"flex\" justifyContent=\"center\" gap={2}>\r\n            <Button variant=\"outlined\" color=\"error\" size=\"medium\" onClick={close}>\r\n              <FormattedMessage id=\"Cancel\" />\r\n            </Button>\r\n            <Button variant=\"contained\" color=\"success\" size=\"medium\" onClick={() => Sumbit(false)}>\r\n              <FormattedMessage id=\"Submit\" />\r\n            </Button>\r\n            <Button variant=\"contained\" color=\"success\" size=\"medium\" onClick={() => Sumbit(true)}>\r\n              <FormattedMessage id=\"Print And Save\" />\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport Source from \"../../../Source\";\r\nimport axios from \"axios\";\r\n// import Swal from \"sweetalert2\";\r\n// import { showAlert } from \"../../../warrper\";\r\nimport Profile from \"../../../assets/icon/profile.png\";\r\nimport IdNational from \"../../../assets/icon/national_id.png\";\r\nimport Datepicker_Customer from \"../../forms/Datepicker_customer\";\r\nimport moment from \"moment-jalaali\";\r\nimport jalaali from \"jalaali-js\";\r\nimport Combo_Customer from \"../../forms/Combo_Customer\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { useShowAlert  } from \"../../../warrper\";\r\nexport default function Additem({\r\n  AddItemModal,\r\n  close,\r\n  Itemtype,\r\n  records,\r\n  setRecords,\r\n  inputRef\r\n  // money\r\n}) {\r\n  const showAlert = useShowAlert(); \r\n  const [selectedDay, setSelectedDay] = useState(moment());\r\n  const [selectedOption, setSelectedOption] = useState({name:\"\"});\r\n  const [EndDate, setEndDate] = useState(moment());\r\n  const [AddItem, setAddItem] = useState({\r\n    name: \"\",\r\n    type_id: \"\",\r\n    user_id: parseInt(localStorage.getItem(\"userTokenid\")),\r\n    isdelete: 0,\r\n    description: \"\",\r\n    date_creation: new Date().toISOString(),\r\n    serial_number: \"\",\r\n    rate:\"\",\r\n    weight:null,\r\n    qty:null,\r\n  });\r\n  const algorithm = (e) => {\r\n    setSelectedOption(e);\r\n    if(e){\r\n      setAddItem({\r\n        ...AddItem,\r\n        type_id: e.id,\r\n      });\r\n    }\r\n    \r\n  };\r\n  const handle_date = (jalaliDate) => {\r\n    if (jalaliDate) {\r\n      const { year, month, day } = jalaliDate;\r\n      const gregorianDate = jalaali.toGregorian(year, month, day);\r\n      // Get current time\r\n      const now = new Date();\r\n      const hours = String(now.getHours()).padStart(2, \"0\");\r\n      const minutes = String(now.getMinutes()).padStart(2, \"0\");\r\n      // Create the ISO date string\r\n      let isoDateString;\r\n      const t = new Date();\r\n      const date = new Date(\r\n        jalaliDate.year,\r\n        jalaliDate.month - 1,\r\n        jalaliDate.day,\r\n        t.getHours(),\r\n        t.getMinutes()\r\n      );\r\n\r\n      // const date = new Date(jalaliDate.year, jalaliDate.month - 1, jalaliDate.day);\r\n      const isoString = date.toISOString(); // This gives you the ISO string in UTC\r\n      // setIsoDate(isoString);\r\n      setAddItem({\r\n        ...AddItem,\r\n        date_creation: isoString,\r\n      });\r\n      // const isoDateString = `${year}-${month}-${day}T${hours}:${minutes}`;\r\n    }\r\n  };\r\n  const sumbit = () => {\r\n    // console.log(AddItem);\r\n    if(selectedOption){\r\n      axios\r\n      .post(Source.getAddress() + \"/api/item\", AddItem, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        showAlert({\r\n          position: \"top-end\",\r\n          icon: \"success\",\r\n          // title: \"Item has been created!\",\r\n                                  title: <FormattedMessage id=\"Your record has been added!\" />,\r\n          showConfirmButton: false,\r\n          timer: 1000,\r\n        });\r\n        let item = {\r\n          id: res.data.item.id,\r\n          name: AddItem.name,\r\n          type: selectedOption,\r\n          user: {\r\n            id: AddItem.user_id,\r\n            name: localStorage.getItem(\"userToken\"),\r\n          },\r\n          isdelete: 0,\r\n          description: AddItem.description,\r\n          date_creation: AddItem.date_creation,\r\n          serial_number: AddItem.serial_number,\r\n        };\r\n        setRecords([item, ...records]);\r\n        setAddItem({\r\n          name: \"\",\r\n          type_id: \"\",\r\n          user_id: parseInt(localStorage.getItem(\"userTokenid\")),\r\n          isdelete: 0,\r\n          description: \"\",\r\n          date_creation: new Date().toISOString(),\r\n          serial_number: \"\",\r\n          rate:\"\",\r\n          weight:null,\r\n          qty:null,\r\n        });\r\n        setSelectedDay(moment());\r\n        close();\r\n      })\r\n      .catch((error) => {\r\n        // console.log(error);\r\n        showAlert({\r\n          position: \"top-end\",\r\n          icon: \"error\",\r\n          // title: \"Something went wrong!\",\r\n                                  title: <FormattedMessage id=\"Not working ,please try again!\" />,\r\n          showConfirmButton: false,\r\n          timer: 1000,\r\n        });\r\n      });\r\n    }else{\r\n      showAlert({\r\n        position: \"top-end\",\r\n        icon: \"error\",\r\n        // title: \"You Must fill all inputs!\",\r\n                title:  <FormattedMessage id=\"You Must fill all inputs!\" />,\r\n        \r\n        showConfirmButton: false,\r\n        timer: 1000,\r\n      });\r\n    }\r\n  };\r\n  const handleItem = (e) => {\r\n    setAddItem({\r\n      ...AddItem,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n\r\n  // const [selectedOptionmoney, setSelectedOptionmoney] = useState({name:\"\"});\r\n  // const algorithmmoney = (e) => {\r\n  //   setAddItem({\r\n  //     ...AddItem,\r\n  //     money: e.id,\r\n  //   });\r\n  // };\r\n  return (\r\n    <div\r\n  dir={localStorage.getItem(\"language\") === \"en\" ? \"ltr\" : \"rtl\"}\r\n  className={`container rounded-5 popup item ${AddItemModal ? \"show\" : \"\"}`}\r\n  style={{\r\n    width: \"96%\",\r\n    maxWidth: \"40% !important\",\r\n    overflowX: \"auto\",\r\n    overflowY: \"auto\",\r\n    height: \"70vh\",\r\n    backgroundColor: \"#f8f9fa\",\r\n    padding: \"10px\",\r\n  }}\r\n>\r\n  <div className=\"d-flex justify-content-end\">\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn-close p-2 m-1 mt-0 hover_btn\"\r\n      onClick={close}\r\n      aria-label=\"Close\"\r\n      style={{ fontSize: \"0.7rem\" }}\r\n    ></button>\r\n  </div>\r\n  <div className=\"p-1 rounded-5\">\r\n    <div className=\"row\">\r\n      <h1\r\n        className=\"text-center rounded p-2 text-light\"\r\n        style={{ \r\n          backgroundColor: \"var(--bs-info)\", \r\n          width: \"100%\",\r\n          // fontSize: \"0.8rem\",\r\n          padding: \"0.8rem\"\r\n        }}\r\n      >\r\n        <FormattedMessage id=\"Add Item\" />\r\n      </h1>\r\n      <div className=\"col-12 mt-3\">\r\n        <label htmlFor=\"name\" style={{ fontWeight: \"bold\", }}>\r\n          <FormattedMessage id=\"Item Name\" /> \r\n        </label>\r\n        <input\r\n          ref={inputRef}\r\n          onChange={handleItem}\r\n          value={AddItem.name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Name\"\r\n          className=\"form-control mb-2\"\r\n          style={{ width: \"100%\", fontSize: \"0.7rem\", padding: \"0.3rem\" }}\r\n        />\r\n\r\n        <label for=\"validationServer01\" className=\"fw-bold\" style={{ fontSize: \"0.8rem\" }}>\r\n          <FormattedMessage id=\"Item Name\" />\r\n        </label>\r\n        <Combo_Customer\r\n          setSelectedOption={algorithm}\r\n          selectedOption={selectedOption}\r\n          options={Itemtype}\r\n        />\r\n\r\n        <label\r\n          htmlFor=\"phone_number\"\r\n          style={{ fontWeight: \"bold\", marginTop: \"0.5rem\", fontSize: \"0.8rem\" }}\r\n        >\r\n          <FormattedMessage id=\"Serial Number\" />\r\n        </label>\r\n        <input\r\n          onChange={handleItem}\r\n          value={AddItem.serial_number}\r\n          type=\"text\"\r\n          name=\"serial_number\"\r\n          maxLength={10}\r\n          placeholder=\"Serial Number\"\r\n          className=\"form-control mb-2\"\r\n          style={{ width: \"100%\", fontSize: \"0.7rem\", padding: \"0.3rem\" }}\r\n        />\r\n\r\n        <Datepicker_Customer\r\n          default_value={EndDate}\r\n          handle_date={handle_date}\r\n          lebal={<FormattedMessage id=\"Date\" />}\r\n          setSelectedDay={setSelectedDay}\r\n          selectedDay={selectedDay}\r\n        />\r\n\r\n        <div class=\"form-floating\">\r\n          <textarea\r\n            name=\"description\"\r\n            class=\"form-control\"\r\n            placeholder=\"Leave a comment here\"\r\n            id=\"floatingTextarea2\"\r\n            value={AddItem.description}\r\n            onChange={handleItem}\r\n            style={{ fontSize: \"0.7rem\", minHeight: \"60px\" }}\r\n          ></textarea>\r\n        </div>\r\n\r\n        <label\r\n          htmlFor=\"phone_number\"\r\n          style={{ fontWeight: \"bold\", marginTop: \"0.5rem\", fontSize: \"0.8rem\" }}\r\n        >\r\n          <FormattedMessage id=\"Rate\" />\r\n        </label>\r\n        <input\r\n          onChange={handleItem}\r\n          value={AddItem.rate}\r\n          type=\"number\"\r\n          name=\"rate\"\r\n          maxLength={10}\r\n          placeholder=\"Rate\"\r\n          className=\"form-control mb-1\"\r\n          style={{ width: \"100%\", fontSize: \"0.7rem\", padding: \"0.3rem\" }}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"col-12 d-flex justify-content-center mt-2\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"text-center btn btn-danger text-light me-2 ms-2\"\r\n          style={{ width: \"120px\", fontSize: \"0.7rem\", padding: \"0.3rem\" }}\r\n          onClick={close}\r\n        >\r\n          <FormattedMessage id=\"Cancel\" />\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"text-center btn btn-success text-light ms-2\"\r\n          style={{ width: \"120px\", fontSize: \"0.7rem\", padding: \"0.3rem\" }}\r\n          onClick={sumbit}\r\n        >\r\n          <FormattedMessage id=\"Submit\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Select, { components } from 'react-select';\r\nimport { FormattedMessage,useIntl } from \"react-intl\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getSidebars } from '../Redux/sidebarSlice';\r\n\r\nconst Combo_Customer = ({ \r\n  isEditable = false, \r\n  name, \r\n  type, \r\n  options, \r\n  Onsearch, \r\n  selectedOption, \r\n  setAddAccountModal, \r\n  setSelectedOption, \r\n  searchQuery, \r\n  notCurrency=true, \r\n  handleInputChange \r\n}) => {\r\n\r\n  const handleChange = (sselectedOption) => {\r\n    setSelectedOption(sselectedOption);\r\n    // console.log(sselectedOption);\r\n    // Onsearch(sselectedOption);\r\n  };\r\n  const dispatch = useDispatch();\r\n  const { sidebars,statusSidebar} = useSelector((state) => state.sidebars);\r\n  // console.log(sidebars);\r\n  // dispatch(getSidebars());\r\n  const CustomMenuList = (props) => (\r\n    <components.MenuList {...props}>\r\n      {props.children}\r\n      {type && (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            padding: \"4px\",\r\n            borderTop: \"1px solid #eaeaea\",\r\n            cursor: \"pointer\",\r\n            backgroundColor: \"#f9f9f9\",\r\n          }}\r\n          onClick={() => setAddAccountModal(searchQuery)}\r\n        >\r\n          <strong>{name}</strong>\r\n        </div>\r\n      )}\r\n    </components.MenuList>\r\n  );\r\n\r\n  const customStyles = {\r\n    menuPortal: (base) => ({ ...base, zIndex: 9999 }),\r\n  };\r\nconst { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <div className=\"w-40\">\r\n      <Select\r\n        classNamePrefix=\"custom-select\"\r\n        inputValue={searchQuery}\r\n        value={selectedOption}\r\n        onChange={handleChange}\r\n        options={options}\r\n        onInputChange={handleInputChange}\r\n        getOptionLabel={(option) => (\r\n          <div style={{ display: 'flex', alignItems: 'center' }}>\r\n            <span>{`${sidebars[0].type===\"gold\" && notCurrency ? option?.name+\" \"+option?.type?.name :option?.name} `}</span>\r\n          </div>\r\n        )}\r\n        getOptionValue={(option) => `${option.name}`}\r\n        // placeholder=\"Search...\"\r\n        placeholder={formatMessage({ id: \"Search...\" })}\r\n        isClearable\r\n        components={{ MenuList: CustomMenuList }}\r\n        isSearchable\r\n        isDisabled={isEditable}\r\n        menuPortalTarget={document.body} // انتقال منو به `body`\r\n        styles={customStyles} // تنظیم `z-index`\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Combo_Customer;\r\n","import React, { useEffect, useState,useCallback } from 'react';\r\nimport Select ,{components}from 'react-select';\r\n\r\nconst ComboBox = ({isEditable=false,name, options,type,Onsearch,selectedOption,setSelectedOption,setAddBalanceModal}) => {\r\n  const handleChange = (selectedOption) => {\r\n      setSelectedOption(selectedOption);\r\n      Onsearch(selectedOption);\r\n};\r\nconst CustomMenuList = (props) => {\r\n  return (\r\n    <components.MenuList {...props}>\r\n      {props.children}\r\n     {type &&<div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          padding: \"10px\",\r\n          borderTop: \"1px solid #eaeaea\",\r\n          cursor: \"pointer\",\r\n          backgroundColor: \"#f9f9f9\",\r\n        }}\r\n        onClick={()=>setAddBalanceModal(true)}\r\n      >\r\n        {/* <strong>Add \"{searchQuery}\"</strong> */}\r\n        <strong>{name}</strong>\r\n      </div>}\r\n    </components.MenuList>\r\n  );\r\n};\r\n  return (\r\n    <div className='w-40'>\r\n      <Select\r\n        value={selectedOption}\r\n        onChange={handleChange}\r\n        options={options}\r\n        getOptionLabel={(option) => (\r\n          <div style={{ display: 'flex', alignItems: 'center' }}>\r\n            <span>{`${option.account_name} ${option.moneyType}`}</span>\r\n          </div>)}\r\n        getOptionValue={(option) => `${option.account_name} ${option.moneyType}`}\r\n        placeholder=\"Search...\"\r\n        isClearable\r\n        components={{ MenuList: CustomMenuList }}\r\n        isSearchable\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComboBox;\r\n"],"names":["_ref","isEditable","name","type","options","Onsearch","selectedOption","setAddAccountModal","setSelectedOption","searchQuery","handleInputChange","customStyles","menuPortal","base","_objectSpread","zIndex","formatMessage","useIntl","_jsx","className","children","Select","classNamePrefix","inputValue","value","onChange","sselectedOption","onInputChange","getOptionLabel","option","style","display","alignItems","concat","getOptionValue","placeholder","id","isClearable","components","MenuList","props","_jsxs","justifyContent","padding","borderTop","cursor","backgroundColor","onClick","isSearchable","isDisabled","menuPortalTarget","document","body","styles","AddMoney","setAdd","title","Addmoney","error","add","setmoney","money","setError","inputRef","useShowAlert","buttonRef","useRef","width","maxWidth","FormattedMessage","htmlFor","ref","onKeyDown","e","key","preventDefault","current","click","target","Money","_record","user","settings","useDispatch","intl","showAlert","setMoney","useState","record","setRecords","exchange","setExchange","isNewExchange","setIsNewExchange","Date_End","setDate_end","Date","toISOString","slice","EndDate","setEndDate","update","setUpdate","select_user","setSelect_user","edit","setEdit","money1","updateRef","useEffect","axios","get","Source","getAddress","headers","Authorization","localStorage","getItem","params","delete","daily","then","res","data","catch","err","date","length","map","row","idx","_res$data$idx","money_id","from_amount","dir","select","class","overflowX","minWidth","borderCollapse","borderBottom","user_name","ontransaction","border","background","borderRadius","async","swalWithBootstrapButtons","Swal","customClass","confirmButton","cancelButton","buttonsStyling","result","fire","text","icon","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","isConfirmed","deleterow","existense","_method","post","position","showConfirmButton","timer","filter","a","dismiss","cancel","Delete","height","src","Trash","alt","pencil","UpdateMoney","user_id","response","Datepicker_Customer","default_value","handle_date","jalaliDate","year","month","day","isoDate","lebal","setSelectedDay","selectedDay","NumericFormat","thousandSeparator","margin","handleChange","unformattedValue","replace","prev","Array","isArray","newExchange","submit","dataToSend","rates","EditSell","AddSellModal","close","records","moneys","Customer","setCustomer","shopingcart","setshopingcart","options1","setOptions1","Exesting","setExesting","dispatch","customers","errorc","statusc","useSelector","state","errors","statuss","sidebars","getSettings","AddAccountModal","moment","selectedDay1","setSelectedDay1","selectedOption1","setSelectedOption1","accounts","account","temp_customer","setSelectedOptionmoney","Inserdate","setTotalAmount","total","setPaidAmount","PaidAmount","setaccount","setupdate","belance","selectedOptionAccount","setSelectedOptionAccount","AddItem","setAddItem","item_id","qty","weight","dateInsert","rate","purchase_price","description","sell_price","expiry_date","accounts_id","stock","e_id","TotalAmount","Sumbit","arr","forEach","push","bill_id","$type","Bill_id","prevMoney","primaryTotalAmount","primaryPaidAmount","Accounts_id","selectedOptionmoney","CustomerName","DateInsert","bill","sells","prevRecords","handleItem","setOptions","handleSearch1","setSearchQuery","searchQuery1","setSearchQuery1","handleKeyDown","prevState","query","do","fetchData","Box","sx","overflowY","bgcolor","p","mx","mt","mb","Typography","variant","align","color","flexGrow","fontSize","IconButton","ml","X","size","boxShadow","fontWeight","flexDirection","xs","md","gap","flexWrap","FormControlLabel","control","Switch","checked","label","component","Combo_stock","newValue","handleSearch","compactMode","Combo_Customer","now","jalaali","String","getHours","padStart","getMinutes","t","isoString","gutterBottom","Combo_stockps","onValueChange","values","customInput","TextField","fullWidth","allowNegative","decimalScale","InputProps","decimalSeparator","startAdornment","InputAdornment","readOnly","parseInt","multiline","minRows","Button","AddtoTable","sellPrice","parseFloat","addto","item","nextId","stocks_id","startIcon","Plus","textTransform","flex","pr","TableContainer","Paper","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","Deleteshopingcart","pre","Trash2","pl","Additem","AddItemModal","Itemtype","type_id","isdelete","date_creation","serial_number","for","marginTop","maxLength","minHeight","sumbit","notCurrency","statusSidebar","_option$type","setAddBalanceModal","account_name","moneyType"],"sourceRoot":""}